#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//	RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//	RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
// 框架官网：http://www.rdiframework.net/
// 框架博客：http://blog.rdiframework.net/
//    Email：406590790@qq.com
//       QQ：406590790
//------------------------------------------------------------------------------
// <auto-generated>
//	此代码由RDIFramework.NET平台代码生成工具自动生成。
//	运行时版本:4.0.30319.1
//
//	对此文件的更改可能会导致不正确的行为，并且如果
//	重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion


using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace CRM.BizLogic
{
    using RDIFramework.Utilities;

    /// <summary>
    /// CUSTOMERCHANCEEntity
    /// 客户机会
    /// 
    /// 修改纪录
    /// 
    /// 2016-01-08 版本：3.0 XuWangBin 针对3.0版本的基础业务实体BaseEntity重构。
    /// 2013-07-11 版本：1.0 XuWangBin 创建主键。
    /// 
    /// 版本：2.0
    /// 
    /// <author>
    /// <name>XuWangBin</name>
    /// <date>2013-07-11</date>
    /// </author>
    /// </summary>
    [Serializable]
    public partial class CUSTOMERCHANCEEntity 
    {
        /// <summary>
        /// 主键
        /// </summary>
        public int? Id { get; set; }

        /// <summary>
        /// 客户信息_主键
        /// </summary>
        public int? CUSTOMERID { get; set; }

        /// <summary>
        /// 客户名称
        /// </summary>
        public string CUSTOMERNAME { get; set; }

        /// <summary>
        /// 主题
        /// </summary>
        public string THEME { get; set; }

        /// <summary>
        /// 负责人
        /// </summary>
        public string FZR { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        public string STATE { get; set; }

        /// <summary>
        /// 阶段
        /// </summary>
        public string MOMENT { get; set; }

        /// <summary>
        /// 来源
        /// </summary>
        public string SOURCE { get; set; }

        /// <summary>
        /// 预计金额
        /// </summary>
        public float? INTENDPRICE { get; set; }

        /// <summary>
        /// 可能性
        /// </summary>
        public string POSSIBILITY { get; set; }

        /// <summary>
        /// 开始时间
        /// </summary>
        public DateTime? STARTDATE { get; set; }

        /// <summary>
        /// 结束时间
        /// </summary>
        public DateTime? ENDDATE { get; set; }

        /// <summary>
        /// 实际结束时间
        /// </summary>
        public DateTime? REALENDDATE { get; set; }

        /// <summary>
        /// 备注
        /// </summary>
        public string DESCRIPTION { get; set; }

        /// <summary>
        /// 排序码
        /// </summary>
        public int? SORTCODE { get; set; }

        /// <summary>
        /// 删除标志
        /// </summary>
        public int? DELETEMARK { get; set; }

        /// <summary>
        /// 有效标志
        /// </summary>
        public int? ENABLE { get; set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime? CreateOn { get; set; }

        /// <summary>
        /// 创建用户主键
        /// </summary>
        public string CreateUserId { get; set; }

        /// <summary>
        /// 创建用户
        /// </summary>
        public string CREATEUSER { get; set; }

        /// <summary>
        /// 修改日期
        /// </summary>
        public DateTime? MODIFYON { get; set; }

        /// <summary>
        /// 修改用户主键
        /// </summary>
        public string MODIFIEDUSERID { get; set; }

        /// <summary>
        /// 修改用户
        /// </summary>
        public string MODIFYUSER { get; set; }

        /// <summary>
        /// 构造函数
        /// </summary>
        public CUSTOMERCHANCEEntity()
        {
            MODIFYON = null;
            CreateOn = null;
            ENABLE = null;
            DELETEMARK = null;
            SORTCODE = null;
            REALENDDATE = null;
            ENDDATE = null;
            STARTDATE = null;
            INTENDPRICE = 0;
            CUSTOMERID = null;
            Id = null;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dataRow">数据行</param>
        public CUSTOMERCHANCEEntity(DataRow dataRow)
        {
            this.GetFrom(dataRow);
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dataReader">数据流</param>
        public CUSTOMERCHANCEEntity(IDataReader dataReader)
        {
            this.GetFrom(dataReader);
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dataTable">数据表</param>
        public CUSTOMERCHANCEEntity(DataTable dataTable)
        {
            this.GetSingle(dataTable);
        }

        /// <summary>
        /// 从数据表读取
        /// </summary>
        /// <param name="dataTable">数据表</param>
        public CUSTOMERCHANCEEntity GetSingle(DataTable dataTable)
        {
            if ((dataTable == null) || (dataTable.Rows.Count == 0))
            {
                return null;
            }

            foreach (DataRow dataRow in dataTable.Rows)
            {
                this.GetFrom(dataRow);
                break;
            }
            return this;
        }

        /// <summary>
        /// 从数据表读取返回实体列表
        /// </summary>
        /// <param name="dataTable">数据表</param>
        public List<CUSTOMERCHANCEEntity> GetList(DataTable dataTable)
        {
            return (from DataRow dataRow in dataTable.Rows select GetFrom(dataRow)).ToList();
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        public CUSTOMERCHANCEEntity GetFrom(DataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToInt(dataRow[CUSTOMERCHANCETable.FieldId]);
            this.CUSTOMERID = BusinessLogic.ConvertToInt(dataRow[CUSTOMERCHANCETable.FieldCUSTOMERID]);
            this.CUSTOMERNAME = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldCUSTOMERNAME]);
            this.THEME = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldTHEME]);
            this.FZR = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldFZR]);
            this.STATE = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldSTATE]);
            this.MOMENT = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldMOMENT]);
            this.SOURCE = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldSOURCE]);
            this.INTENDPRICE = BusinessLogic.ConvertToFloat(dataRow[CUSTOMERCHANCETable.FieldINTENDPRICE]);
            this.POSSIBILITY = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldPOSSIBILITY]);
            this.STARTDATE = BusinessLogic.ConvertToDateTime(dataRow[CUSTOMERCHANCETable.FieldSTARTDATE]);
            this.ENDDATE = BusinessLogic.ConvertToDateTime(dataRow[CUSTOMERCHANCETable.FieldENDDATE]);
            this.REALENDDATE = BusinessLogic.ConvertToDateTime(dataRow[CUSTOMERCHANCETable.FieldREALENDDATE]);
            this.DESCRIPTION = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldDESCRIPTION]);
            this.SORTCODE = BusinessLogic.ConvertToInt(dataRow[CUSTOMERCHANCETable.FieldSORTCODE]);
            this.DELETEMARK = BusinessLogic.ConvertToInt(dataRow[CUSTOMERCHANCETable.FieldDELETEMARK]);
            this.ENABLE = BusinessLogic.ConvertToInt(dataRow[CUSTOMERCHANCETable.FieldENABLE]);
            this.CreateOn = BusinessLogic.ConvertToDateTime(dataRow[CUSTOMERCHANCETable.FieldCreateOn]);
            this.CreateUserId = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldCreateUserId]);
            this.CREATEUSER = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldCREATEUSER]);
            this.MODIFYON = BusinessLogic.ConvertToDateTime(dataRow[CUSTOMERCHANCETable.FieldMODIFYON]);
            this.MODIFIEDUSERID = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldMODIFIEDUSERID]);
            this.MODIFYUSER = BusinessLogic.ConvertToString(dataRow[CUSTOMERCHANCETable.FieldMODIFYUSER]);
            return this;
        }

        /// <summary>
        /// 从数据流读取
        /// </summary>
        /// <param name="dataReader">数据流</param>
        public CUSTOMERCHANCEEntity GetFrom(IDataReader dataReader)
        {
            this.Id = BusinessLogic.ConvertToInt(dataReader[CUSTOMERCHANCETable.FieldId]);
            this.CUSTOMERID = BusinessLogic.ConvertToInt(dataReader[CUSTOMERCHANCETable.FieldCUSTOMERID]);
            this.CUSTOMERNAME = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldCUSTOMERNAME]);
            this.THEME = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldTHEME]);
            this.FZR = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldFZR]);
            this.STATE = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldSTATE]);
            this.MOMENT = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldMOMENT]);
            this.SOURCE = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldSOURCE]);
            this.INTENDPRICE = BusinessLogic.ConvertToFloat(dataReader[CUSTOMERCHANCETable.FieldINTENDPRICE]);
            this.POSSIBILITY = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldPOSSIBILITY]);
            this.STARTDATE = BusinessLogic.ConvertToDateTime(dataReader[CUSTOMERCHANCETable.FieldSTARTDATE]);
            this.ENDDATE = BusinessLogic.ConvertToDateTime(dataReader[CUSTOMERCHANCETable.FieldENDDATE]);
            this.REALENDDATE = BusinessLogic.ConvertToDateTime(dataReader[CUSTOMERCHANCETable.FieldREALENDDATE]);
            this.DESCRIPTION = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldDESCRIPTION]);
            this.SORTCODE = BusinessLogic.ConvertToInt(dataReader[CUSTOMERCHANCETable.FieldSORTCODE]);
            this.DELETEMARK = BusinessLogic.ConvertToInt(dataReader[CUSTOMERCHANCETable.FieldDELETEMARK]);
            this.ENABLE = BusinessLogic.ConvertToInt(dataReader[CUSTOMERCHANCETable.FieldENABLE]);
            this.CreateOn = BusinessLogic.ConvertToDateTime(dataReader[CUSTOMERCHANCETable.FieldCreateOn]);
            this.CreateUserId = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldCreateUserId]);
            this.CREATEUSER = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldCREATEUSER]);
            this.MODIFYON = BusinessLogic.ConvertToDateTime(dataReader[CUSTOMERCHANCETable.FieldMODIFYON]);
            this.MODIFIEDUSERID = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldMODIFIEDUSERID]);
            this.MODIFYUSER = BusinessLogic.ConvertToString(dataReader[CUSTOMERCHANCETable.FieldMODIFYUSER]);
            return this;
        }
    }
}