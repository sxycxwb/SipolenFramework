#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//	RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//	RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
// 框架官网：http://www.rdiframework.net/
// 框架博客：http://blog.rdiframework.net/
//    Email：406590790@qq.com
//       QQ：406590790
//------------------------------------------------------------------------------
// <auto-generated>
//	此代码由RDIFramework.NET平台代码生成工具自动生成。
//	运行时版本:4.0.30319.1
//
//	对此文件的更改可能会导致不正确的行为，并且如果
//	重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion


using System.Collections.Generic;

namespace CRM.BizLogic
{
    using RDIFramework.BizLogic;
    using RDIFramework.Utilities;

    /// <summary>
    /// CUSTOMERCHANCEManager
    /// 客户机会
    /// 
    /// 修改纪录
    /// 
    /// 2013-07-11 版本：1.0 EricHu 创建主键。
    /// 
    /// 版本：1.0
    /// 
    /// <author>
    /// <name>EricHu</name>
    /// <date>2013-07-11</date>
    /// </author>
    /// </summary>
    public partial class CUSTOMERCHANCEManager : DbCommonManager
    {
        /// <summary>
        /// 构造函数
        /// </summary>
        public CUSTOMERCHANCEManager()
        {
            base.CurrentTableName = CUSTOMERCHANCETable.TableName;
            base.PrimaryKey = "Id";
        }

        /// <summary>
        /// 构造函数
        /// <param name="tableName">指定表名</param>
        /// </summary>
        public CUSTOMERCHANCEManager(string tableName)
        {
            base.CurrentTableName = tableName;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        public CUSTOMERCHANCEManager(IDbProvider dbProvider): this()
        {
            DBProvider = dbProvider;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="userInfo">用户信息</param>
        public CUSTOMERCHANCEManager(UserInfo userInfo) : this()
        {
            UserInfo = userInfo;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        /// <param name="userInfo">用户信息</param>
        public CUSTOMERCHANCEManager(IDbProvider dbProvider, UserInfo userInfo) : this(dbProvider)
        {
            UserInfo = userInfo;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        /// <param name="userInfo">用户信息</param>
        /// <param name="tableName">指定表名</param>
        public CUSTOMERCHANCEManager(IDbProvider dbProvider, UserInfo userInfo, string tableName) : this(dbProvider, userInfo)
        {
            base.CurrentTableName = tableName;
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="cUSTOMERCHANCEEntity">实体</param>
        /// <returns>主键</returns>
        public string Add(CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity)
        {
            return this.AddEntity(cUSTOMERCHANCEEntity);
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="cUSTOMERCHANCEEntity">实体</param>
        /// <param name="identity">自增量方式</param>
        /// <param name="returnId">返回主键</param>
        /// <returns>主键</returns>
        public string Add(CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity, bool identity, bool returnId)
        {
            this.Identity = identity;
            this.ReturnId = returnId;
            return this.AddEntity(cUSTOMERCHANCEEntity);
        }

        /// <summary>
        /// 更新
        /// </summary>
        /// <param name="cUSTOMERCHANCEEntity">实体</param>
        public int Update(CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity)
        {
            return this.UpdateEntity(cUSTOMERCHANCEEntity);
        }

        /// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id">主键</param>
        public CUSTOMERCHANCEEntity GetEntity(string id)
        {
            return GetEntity(int.Parse(id));
        }

        public CUSTOMERCHANCEEntity GetEntity(int id)
        {
            CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity = new CUSTOMERCHANCEEntity(this.GetDT(new KeyValuePair<string, object>(CUSTOMERCHANCETable.FieldId, id)));
            return cUSTOMERCHANCEEntity;
        }

        /// <summary>
        /// 添加实体
        /// </summary>
        /// <param name="cUSTOMERCHANCEEntity">实体</param>
        public string AddEntity(CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity)
        {
            string sequence = string.Empty;
            if (cUSTOMERCHANCEEntity.SORTCODE == null || cUSTOMERCHANCEEntity.SORTCODE == 0)
            {
                CiSequenceManager sequenceManager = new CiSequenceManager(DBProvider, this.Identity);
                sequence = sequenceManager.GetSequence(this.CurrentTableName);
                cUSTOMERCHANCEEntity.SORTCODE = int.Parse(sequence);
            }
            SQLBuilder sqlBuilder = new SQLBuilder(DBProvider, this.Identity, this.ReturnId);
            sqlBuilder.BeginInsert(this.CurrentTableName, CUSTOMERCHANCETable.FieldId);
            if (!this.Identity) 
            {
                sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldId, cUSTOMERCHANCEEntity.Id);
            }
            else
            {
                if (!this.ReturnId && (DBProvider.CurrentDbType == CurrentDbType.Oracle || DBProvider.CurrentDbType == CurrentDbType.DB2))
                {
                    if (DBProvider.CurrentDbType == CurrentDbType.Oracle)
                    {
                        sqlBuilder.SetFormula(CUSTOMERCHANCETable.FieldId, "SEQ_" + this.CurrentTableName.ToUpper() + ".NEXTVAL ");
                    }
                    if (DBProvider.CurrentDbType == CurrentDbType.DB2)
                    {
                        sqlBuilder.SetFormula(CUSTOMERCHANCETable.FieldId, "NEXT VALUE FOR SEQ_" + this.CurrentTableName.ToUpper());
                    }
                }
                else
                {
                    if (this.Identity && (DBProvider.CurrentDbType == CurrentDbType.Oracle || DBProvider.CurrentDbType == CurrentDbType.DB2))
                    {
                        if (cUSTOMERCHANCEEntity.Id == null)
                        {
                            if (string.IsNullOrEmpty(sequence))
                            {
                                CiSequenceManager sequenceManager = new CiSequenceManager(DBProvider, this.Identity);
                                sequence = sequenceManager.GetSequence(this.CurrentTableName);
                            }
                            cUSTOMERCHANCEEntity.Id = int.Parse(sequence);
                        }
                        sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldId, cUSTOMERCHANCEEntity.Id);
                    }
                }
            }
            this.SetEntity(sqlBuilder, cUSTOMERCHANCEEntity);
            if (UserInfo != null) 
            { 
                sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldCreateUserId, UserInfo.Id);
            } 
            sqlBuilder.SetDBNow(CUSTOMERCHANCETable.FieldCreateOn);
            if (this.Identity && (DBProvider.CurrentDbType == CurrentDbType.SqlServer || DBProvider.CurrentDbType == CurrentDbType.Access))
            {
                sequence = sqlBuilder.EndInsert().ToString();
            }
            else
            {
                sqlBuilder.EndInsert();
            }
            return sequence;
        }

        /// <summary>
        /// 更新实体
        /// </summary>
        /// <param name="cUSTOMERCHANCEEntity">实体</param>
        public int UpdateEntity(CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity)
        {
            SQLBuilder sqlBuilder = new SQLBuilder(DBProvider);
            sqlBuilder.BeginUpdate(this.CurrentTableName);
            this.SetEntity(sqlBuilder, cUSTOMERCHANCEEntity);
            sqlBuilder.SetWhere(CUSTOMERCHANCETable.FieldId, cUSTOMERCHANCEEntity.Id);
            return sqlBuilder.EndUpdate();
        }
        
        /// <summary>
        /// 设置实体
        /// </summary>
        /// <param name="cUSTOMERCHANCEEntity">实体</param>
        private void SetEntity(SQLBuilder sqlBuilder, CUSTOMERCHANCEEntity cUSTOMERCHANCEEntity)
        {
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldCUSTOMERID, cUSTOMERCHANCEEntity.CUSTOMERID);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldCUSTOMERNAME, cUSTOMERCHANCEEntity.CUSTOMERNAME);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldTHEME, cUSTOMERCHANCEEntity.THEME);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldFZR, cUSTOMERCHANCEEntity.FZR);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldSTATE, cUSTOMERCHANCEEntity.STATE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldMOMENT, cUSTOMERCHANCEEntity.MOMENT);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldSOURCE, cUSTOMERCHANCEEntity.SOURCE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldINTENDPRICE, cUSTOMERCHANCEEntity.INTENDPRICE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldPOSSIBILITY, cUSTOMERCHANCEEntity.POSSIBILITY);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldSTARTDATE, cUSTOMERCHANCEEntity.STARTDATE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldENDDATE, cUSTOMERCHANCEEntity.ENDDATE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldREALENDDATE, cUSTOMERCHANCEEntity.REALENDDATE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldDESCRIPTION, cUSTOMERCHANCEEntity.DESCRIPTION);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldSORTCODE, cUSTOMERCHANCEEntity.SORTCODE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldDELETEMARK, cUSTOMERCHANCEEntity.DELETEMARK);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldENABLE, cUSTOMERCHANCEEntity.ENABLE);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldCREATEUSER, cUSTOMERCHANCEEntity.CREATEUSER);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldMODIFYON, cUSTOMERCHANCEEntity.MODIFYON);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldMODIFIEDUSERID, cUSTOMERCHANCEEntity.MODIFIEDUSERID);
            sqlBuilder.SetValue(CUSTOMERCHANCETable.FieldMODIFYUSER, cUSTOMERCHANCEEntity.MODIFYUSER);
        }

        /// <summary>
        /// 删除实体
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns>影响行数</returns>
        public int Delete(int id)
        {
            return this.Delete(new KeyValuePair<string, object>(CUSTOMERCHANCETable.FieldId, id));
        }
    }
}