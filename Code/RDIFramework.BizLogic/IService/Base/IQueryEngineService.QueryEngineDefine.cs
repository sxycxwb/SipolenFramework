#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System.Data;
using System.ServiceModel;
using System.Collections.Generic;

namespace RDIFramework.BizLogic
{
	using RDIFramework.Utilities;

    public partial interface IQueryEngineService
	{
		/// <summary>
		/// 新增查询引擎定义
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="entity">实体</param>
		/// <param name="statusCode">返回状态</param>
		/// <param name="statusMessage">返回状态信息</param>
		/// <returns>主键</returns>
		[OperationContract]
        string AddQueryEngineDefine(UserInfo userInfo, QueryEngineDefineEntity entity, out string statusCode, out string statusMessage);

		/// <summary>
		/// 更新查询引擎定义
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="entity">查询引擎定义实体</param>
		/// <param name="statusCode">返回状态码</param>
		/// <param name="statusMessage">返回状态信息</param>
		/// <returns>影响行数</returns>
		[OperationContract]
        int UpdateQueryEngineDefine(UserInfo userInfo, QueryEngineDefineEntity entity, out string statusCode, out string statusMessage);

		/// <summary>
		/// 获取查询引擎定义列表
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <returns>数据表</returns>
		[OperationContract]
        DataTable GetQueryEngineDefineDT(UserInfo userInfo);

        /// <summary>
        /// 根据查询引擎主键获取查询引擎定义列表
        /// </summary>
        /// <param name="userInfo">用户</param>
        /// <param name="queryEngineId">查询引擎主键</param>
        /// <returns>数据表</returns>
        [OperationContract]
        DataTable GetQueryEngineDefineDTByEngineId(UserInfo userInfo, string queryEngineId);

		/// <summary>
		/// 分页获取查询引擎定义列表
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="searchValue">查询关键字</param>
		/// <param name="recordCount">返回记录数</param>
		/// <param name="pageIndex">当前页</param>
		/// <param name="pageSize">每页显示条数</param>
		/// <param name="sortExpression">排序字段</param>
		/// <returns>数据表</returns>
		[OperationContract]
        DataTable GetQueryEngineDefineDTByPage(UserInfo userInfo, string searchValue, out int recordCount, int pageIndex, int pageSize, string sortExpression);
		
		/// <summary>
		/// 得到查询引擎定义实体
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="id">主键</param>
		/// <returns>实体</returns>
		[OperationContract]
        QueryEngineDefineEntity GetQueryEngineDefineEntity(UserInfo userInfo, string id);		
	
		/// <summary>
		/// 根据主键获取数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="ids">主键</param>
		/// <returns>数据表</returns>
		[OperationContract]
        DataTable GetQueryEngineDefineDTByIds(UserInfo userInfo, string[] ids);
		
		/// <summary>
		/// 根据条件获取数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="names">字段</param>
		/// <param name="values">值</param>
		/// <returns>数据表</returns>
		[OperationContract]
        DataTable GetQueryEngineDefineDTByValues(UserInfo userInfo, List<KeyValuePair<string, object>> parameters);
				
		/// <summary>
		/// 删除指定数据
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="id">主键</param>
		/// <returns>数据表</returns>
		[OperationContract]
        int DeleteQueryEngineDefine(UserInfo userInfo, string id);
		
		/// <summary>
		/// 批量删除
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="ids">主键数组</param>
		/// <returns>影响行数</returns>
		[OperationContract]
        int BatchDeleteQueryEngineDefine(UserInfo userInfo, string[] ids);

		/// <summary>
		/// 批量设置删除标志
		/// </summary>
		/// <param name="userInfo">用户</param>
		/// <param name="ids">主键数组</param>
		/// <returns>影响行数</returns>
		[OperationContract]
        int SetDeletedQueryEngineDefine(UserInfo userInfo, string[] ids);
	}
}
