#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;

namespace RDIFramework.BizLogic
{
    using RDIFramework.Utilities;

    /// <summary>
    /// QueryEngineEntity
    /// 查询引擎主表
    /// 
    /// 修改纪录
    /// 
    /// 2015-09-18 版本：1.0 EricHu 创建主键。
    /// 
    /// 版本：1.0
    /// 
    /// <author>
    /// <name>EricHu</name>
    /// <date>2015-09-18</date>
    /// </author>
    /// </summary>
    [Serializable]
    public partial class QueryEngineEntity : BaseEntity
    {
        /// <summary>
        /// 主键
        /// </summary>
        public string Id { get; set; }

        /// <summary>
        /// 父级主键
        /// </summary>
        public string ParentId { get; set; }

        /// <summary>
        /// 编号
        /// </summary>
        public string Code { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        public string FullName { get; set; }

        /// <summary>
        /// 允许编辑
        /// </summary>
        public int AllowEdit { get; set; }

        /// <summary>
        /// 允许删除
        /// </summary>
        public int AllowDelete { get; set; }

        /// <summary>
        /// 删除标记
        /// </summary>
        public int DeleteMark { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// 有效
        /// </summary>
        public int Enabled { get; set; }

        /// <summary>
        /// 排序码
        /// </summary>
        public int SortCode { get; set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime CreateOn { get; set; }

        /// <summary>
        /// 创建用户主键
        /// </summary>
        public string CreateUserId { get; set; }

        /// <summary>
        /// 创建用户
        /// </summary>
        public string CreateBy { get; set; }

        /// <summary>
        /// 修改日期
        /// </summary>
        public DateTime ModifiedOn { get; set; }

        /// <summary>
        /// 修改用户主键
        /// </summary>
        public string ModifiedUserId { get; set; }

        /// <summary>
        /// 修改用户
        /// </summary>
        public string ModifiedBy { get; set; }

        /// <summary>
        /// 构造函数
        /// </summary>
        public QueryEngineEntity()
        {
            Enabled = 0;
            DeleteMark = 0;
            AllowDelete = 0;
            AllowEdit = 0;
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        protected override BaseEntity GetFrom(IDataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldId]);
            this.ParentId = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldParentId]);
            this.Code = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldCode]);
            this.FullName = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldFullName]);
            this.AllowEdit = BusinessLogic.ConvertToInt(dataRow[QueryEngineTable.FieldAllowEdit]);
            this.AllowDelete = BusinessLogic.ConvertToInt(dataRow[QueryEngineTable.FieldAllowDelete]);
            this.DeleteMark = BusinessLogic.ConvertToInt(dataRow[QueryEngineTable.FieldDeleteMark]);
            this.Description = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldDescription]);
            this.Enabled = BusinessLogic.ConvertToInt(dataRow[QueryEngineTable.FieldEnabled]);
            this.SortCode = BusinessLogic.ConvertToInt(dataRow[QueryEngineTable.FieldSortCode]);
            this.CreateOn = BusinessLogic.ConvertToDateTime(dataRow[QueryEngineTable.FieldCreateOn]);
            this.CreateUserId = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldCreateUserId]);
            this.CreateBy = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldCreateBy]);
            this.ModifiedOn = BusinessLogic.ConvertToDateTime(dataRow[QueryEngineTable.FieldModifiedOn]);
            this.ModifiedUserId = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldModifiedUserId]);
            this.ModifiedBy = BusinessLogic.ConvertToString(dataRow[QueryEngineTable.FieldModifiedBy]);
            return this;
        }
    }
}
