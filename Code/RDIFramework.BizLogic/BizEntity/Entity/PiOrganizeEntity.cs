#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;

namespace RDIFramework.BizLogic
{
  using RDIFramework.Utilities;

    /// <summary>
    /// PiOrganizeEntity
    /// 组织机构、部门表
    ///
    /// 修改纪录
    ///     2014-07-30 版本: 2.8 EricHu 以自动属性进行重新组织。
    ///		2012-03-02 版本：1.0 EricHu 创建主键。
    ///
    /// 版本：3.0
    ///
    /// <author>
    ///		<name>EricHu</name>
    ///		<date>2012-03-02</date>
    /// </author>
    /// </summary>
    [Serializable]
    public partial class PiOrganizeEntity : BaseEntity
    {
        /// <summary>
        /// 主键
        /// </summary>
        public String Id { get; set; }

        /// <summary>
        /// 父级主键
        /// </summary>
        public String ParentId { get; set; }

        /// <summary>
        /// 编号
        /// </summary>
        public String Code { get; set; }

        /// <summary>
        /// 简称
        /// </summary>
        public String ShortName { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        public String FullName { get; set; }

        /// <summary>
        /// 分类
        /// </summary>
        public String Category { get; set; }

        /// <summary>
        /// 外线电话
        /// </summary>
        public String OuterPhone { get; set; }

        /// <summary>
        /// 内线电话
        /// </summary>
        public String InnerPhone { get; set; }

        /// <summary>
        /// 传真
        /// </summary>
        public String Fax { get; set; }

        /// <summary>
        /// 邮编
        /// </summary>
        public String Postalcode { get; set; }

        /// <summary>
        /// 地址
        /// </summary>
        public String Address { get; set; }

        /// <summary>
        /// 网址
        /// </summary>
        public String Web { get; set; }

        /// <summary>
        /// 主负责人主键
        /// </summary>
        public String ManagerId { get; set; }

        /// <summary>
        /// 主负责人
        /// </summary>
        public String Manager { get; set; }

        /// <summary>
        /// 层
        /// </summary>
        public int? Layer { get; set; }

        /// <summary>
        /// 副负责人主键
        /// </summary>
        public String AssistantManagerId { get; set; }

        /// <summary>
        /// 副负责人
        /// </summary>
        public String AssistantManager { get; set; }

        /// <summary>
        /// 内部组织机构
        /// </summary>
        public int? IsInnerOrganize { get; set; }

        /// <summary>
        /// 开户行
        /// </summary>
        public String Bank { get; set; }

        /// <summary>
        /// 银行帐号
        /// </summary>
        public String BankAccount { get; set; }

        /// <summary>
        /// 删除标记
        /// </summary>
        public int? DeleteMark { get; set; }

        /// <summary>
        /// 有效
        /// </summary>
        public int? Enabled { get; set; }

        /// <summary>
        /// 排序码
        /// </summary>
        public int? SortCode { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public String Description { get; set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime? CreateOn { get; set; }

        /// <summary>
        /// 创建用户主键
        /// </summary>
        public String CreateUserId { get; set; }

        /// <summary>
        /// 创建用户
        /// </summary>
        public String CreateBy { get; set; }

        /// <summary>
        /// 修改日期
        /// </summary>
        public DateTime? ModifiedOn { get; set; }

        /// <summary>
        /// 修改用户主键
        /// </summary>
        public String ModifiedUserId { get; set; }

        /// <summary>
        /// 修改用户
        /// </summary>
        public String ModifiedBy { get; set; }

        /// <summary>
        /// 构造函数
        /// </summary>
        public PiOrganizeEntity()
        {
            this.IsInnerOrganize = 0;
            this.Enabled = 0;
            this.DeleteMark = 0;
            this.SortCode = null;
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        protected override BaseEntity GetFrom(IDataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldId]);
            this.ParentId = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldParentId]);
            this.Code = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldCode]);
            this.ShortName = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldShortName]);
            this.FullName = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldFullName]);
            this.Category = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldCategory]);
            this.OuterPhone = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldOuterPhone]);
            this.InnerPhone = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldInnerPhone]);
            this.Fax = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldFax]);
            this.Postalcode = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldPostalcode]);
            this.Address = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldAddress]);
            this.Web = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldWeb]);
            this.ManagerId = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldManagerId]);
            this.Manager = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldManager]);
            this.Layer = BusinessLogic.ConvertToNullableInt(dataRow[PiOrganizeTable.FieldLayer]);
            this.AssistantManagerId = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldAssistantManagerId]);
            this.AssistantManager = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldAssistantManager]);
            this.IsInnerOrganize = BusinessLogic.ConvertToNullableInt(dataRow[PiOrganizeTable.FieldIsInnerOrganize]);
            this.Bank = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldBank]);
            this.BankAccount = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldBankAccount]);
            this.DeleteMark = BusinessLogic.ConvertToNullableInt(dataRow[PiOrganizeTable.FieldDeleteMark]);
            this.Enabled = BusinessLogic.ConvertToNullableInt(dataRow[PiOrganizeTable.FieldEnabled]);
            this.SortCode = BusinessLogic.ConvertToNullableInt(dataRow[PiOrganizeTable.FieldSortCode]);
            this.Description = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldDescription]);
            this.CreateOn = BusinessLogic.ConvertToNullableDateTime(dataRow[PiOrganizeTable.FieldCreateOn]);
            this.CreateUserId = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldCreateUserId]);
            this.CreateBy = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldCreateBy]);
            this.ModifiedOn = BusinessLogic.ConvertToNullableDateTime(dataRow[PiOrganizeTable.FieldModifiedOn]);
            this.ModifiedUserId = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldModifiedUserId]);
            this.ModifiedBy = BusinessLogic.ConvertToString(dataRow[PiOrganizeTable.FieldModifiedBy]);
            return this;
        }
    }
}
