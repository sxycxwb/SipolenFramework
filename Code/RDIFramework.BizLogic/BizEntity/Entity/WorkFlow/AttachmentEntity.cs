#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;

namespace RDIFramework.BizLogic
{
    using RDIFramework.Utilities;

    /// <summary>
    /// AttachmentEntity
    /// 
    /// 
    /// 修改纪录
    /// 
    /// 2014-08-18 版本：1.0 EricHu 创建主键。
    /// 
    /// 版本：3.0
    /// 
    /// <author>
    /// <name>EricHu</name>
    /// <date>2014-08-18</date>
    /// </author>
    /// </summary>
    [Serializable]
    public partial class AttachmentEntity : BaseEntity
    {
        /// <summary>
        /// 主键
        /// </summary>
        public String Id { get;set;}

        /// <summary>
        /// 工作流模版主键
        /// </summary>
        public String WorkFlowId { get;set;}

        /// <summary>
        /// 工作流实例主键
        /// </summary>
        public String WorkFlowInsId{ get;set;}

        /// <summary>
        /// 工作任务主键
        /// </summary>
        public String WorkTaskId{ get;set;}

        /// <summary>
        /// 工作任务实例主键
        /// </summary>
        public String WorkTaskInsId{ get;set;}

        /// <summary>
        /// 附件名称
        /// </summary>
        public String AttachmentName{ get;set;}

        /// <summary>
        /// 附件内容
        /// </summary>
        public Byte[] AttachmentContent{ get;set;}

        /// <summary>
        /// 附件类型
        /// </summary>
        public String AttachmentType{ get;set;}

        /// <summary>
        /// 附件大小
        /// </summary>
        public Decimal? AttachmentSize { get;set;}

        /// <summary>
        /// 附件路径
        /// </summary>
        public String AttachmentPath { get;set;}

        /// <summary>
        /// 有效
        /// </summary>
        public int? Enabled { get;set;}

        /// <summary>
        /// 删除标记
        /// </summary>
        public int? DeleteMark { get;set;}

        /// <summary>
        /// 排序码
        /// </summary>
        public int? SortCode { get;set;}

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime? CreateOn { get;set;}

        /// <summary>
        /// 创建用户主键
        /// </summary>
        public String CreateUserId { get;set;}

        /// <summary>
        /// 创建用户
        /// </summary>
        public String CreateBy { get;set;}

        /// <summary>
        /// 修改日期
        /// </summary>
        public DateTime? ModifiedOn { get;set;}

        /// <summary>
        /// 修改用户主键
        /// </summary>
        public String ModifiedUserId { get;set;}

        /// <summary>
        /// 修改用户
        /// </summary>
        public String ModifiedBy { get;set;}

        /// <summary>
        /// 构造函数
        /// </summary>
        public AttachmentEntity()
        {
            this.Id = BusinessLogic.NewGuid();
            this.AttachmentSize = 0;
            this.Enabled = 1;
            this.DeleteMark = 0;
            this.SortCode = null;
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        protected override BaseEntity GetFrom(IDataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldId]);
            this.WorkFlowId = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldWorkFlowId]);
            this.WorkFlowInsId = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldWorkFlowInsId]);
            this.WorkTaskId = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldWorkTaskId]);
            this.WorkTaskInsId = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldWorkTaskInsId]);
            this.AttachmentName = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldAttachmentName]);
            this.AttachmentContent = BusinessLogic.ConvertToByte(dataRow[AttachmentTable.FieldAttachmentContent]);
            this.AttachmentType = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldAttachmentType]);
            this.AttachmentSize = BusinessLogic.ConvertToNullableDecimal(dataRow[AttachmentTable.FieldAttachmentSize]);
            this.AttachmentPath = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldAttachmentPath]);
            this.Enabled = BusinessLogic.ConvertToNullableInt(dataRow[AttachmentTable.FieldEnabled]);
            this.DeleteMark = BusinessLogic.ConvertToNullableInt(dataRow[AttachmentTable.FieldDeleteMark]);
            this.SortCode = BusinessLogic.ConvertToNullableInt(dataRow[AttachmentTable.FieldSortCode]);
            this.CreateOn = BusinessLogic.ConvertToNullableDateTime(dataRow[AttachmentTable.FieldCreateOn]);
            this.CreateUserId = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldCreateUserId]);
            this.CreateBy = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldCreateBy]);
            this.ModifiedOn = BusinessLogic.ConvertToNullableDateTime(dataRow[AttachmentTable.FieldModifiedOn]);
            this.ModifiedUserId = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldModifiedUserId]);
            this.ModifiedBy = BusinessLogic.ConvertToString(dataRow[AttachmentTable.FieldModifiedBy]);
            return this;
        }
    }
}
