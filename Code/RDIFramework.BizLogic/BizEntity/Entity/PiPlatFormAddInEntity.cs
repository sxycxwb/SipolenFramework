#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace RDIFramework.BizLogic
{
    using RDIFramework.Utilities;

    /// <summary>
    /// PiPlatFormAddInEntity
    /// 平台插件实体
    ///
    /// 修改纪录
    ///     2014-07-30 版本: 2.8 EricHu 以自动属性进行重新组织。
    ///		2012-05-25 版本：1.0 EricHu 创建PiPlatFormAddInEntity。
    ///
    /// 版本：3.0
    ///
    /// <author>
    ///		<name>EricHu</name>
    ///		<date>2012-05-25</date>
    /// </author>
    /// </summary>
    [Serializable]
    public class PiPlatFormAddInEntity
    {
        /// <summary>
        /// 主键
        /// </summary>
        public String Id { get; set; }

        /// <summary>
        /// 全局唯一标识符(GUID)
        /// </summary>
        public String Guid { get; set; }

        /// <summary>
        /// 插件的名称（要做到所见即所得）。
        /// </summary>
        public String Name { get; set; }

        /// <summary>
        /// dll文件、exe文件等的程序集名称。
        /// </summary>
        public String AssemblyName { get; set; }

        /// <summary>
        /// 一般为类的全名(带命名空间)。
        /// </summary>
        public String ClassName { get; set; }

        /// <summary>
        /// 插件
        /// </summary>
        public byte[] AddIn { get; set; }

        /// <summary>
        /// 插件所占的空间大小（以KB为单位）。
        /// </summary>
        public long? AddInSize { get; set; }

        /// <summary>
        /// 版本信息
        /// </summary>
        public String Version { get; set; }

        /// <summary>
        /// 插件的开发人员（多个以逗号隔开）。
        /// </summary>
        public String Developer { get; set; }

        /// <summary>
        /// 下载次数
        /// </summary>
        public int? DownLoadCount { get; set; }

        /// <summary>
        /// 删除标志
        /// </summary>
        public int? DeleteMark { get; set; }

        /// <summary>
        /// 有效
        /// </summary>
        public int? Enabled { get; set; }

        /// <summary>
        /// 插件的描述信息。
        /// </summary>
        public String Description { get; set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime? CreateOn { get; set; }

        /// <summary>
        /// 创建用户主键
        /// </summary>
        public String CreateUserId { get; set; }

        /// <summary>
        /// 创建用户
        /// </summary>
        public String CreateBy { get; set; }

        /// <summary>
        /// 修改日期
        /// </summary>
        public DateTime? ModifiedOn { get; set; }

        /// <summary>
        /// 修改用户主键
        /// </summary>
        public String ModifiedUserId { get; set; }

        /// <summary>
        /// 修改用户
        /// </summary>
        public String ModifiedBy { get; set; }

        /// <summary>
        /// 构造函数
        /// </summary>
        public PiPlatFormAddInEntity()
        {
            this.Enabled = 1;
            this.DeleteMark = 0;
            this.CreateOn = DateTime.Now;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dataRow">数据行</param>
        public PiPlatFormAddInEntity(DataRow dataRow)
        {
            this.GetFrom(dataRow);
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dataReader">数据流</param>
        public PiPlatFormAddInEntity(IDataReader dataReader)
        {
            this.GetFrom(dataReader);
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dataTable">数据表</param>
        public PiPlatFormAddInEntity(DataTable dataTable)
        {
            this.GetFrom(dataTable);
        }

        /// <summary>
        /// 从数据表读取返回实体列表
        /// </summary>
        /// <param name="dataTable">数据表</param>
        public List<PiPlatFormAddInEntity> GetList(DataTable dataTable)
        {
            return (from DataRow dataRow in dataTable.Rows select new PiPlatFormAddInEntity().GetFrom(dataRow)).ToList();
        }

        /// <summary>
        /// 从数据表读取
        /// </summary>
        /// <param name="dataTable">数据表</param>
        public PiPlatFormAddInEntity GetFrom(DataTable dataTable)
        {
            if ((dataTable == null) || (dataTable.Rows.Count == 0))
            {
                return null;
            }

            foreach (DataRow dataRow in dataTable.Rows)
            {
                this.GetFrom(dataRow);
                break;
            }
            return this;
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        public PiPlatFormAddInEntity GetFrom(DataRow dataRow)
        {
            this.Id             = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldId]);
            this.Guid           = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldGuid]);
            this.Name           = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldName]);
            this.AssemblyName   = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldAssemblyName]);
            this.ClassName      = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldClassName]);
            this.AddIn          = BusinessLogic.ConvertToByte(dataRow[PiPlatFormAddInTable.FieldAddIn]);
            this.AddInSize      = BusinessLogic.ConvertToNullableLong(dataRow[PiPlatFormAddInTable.FieldAddInSize]);
            this.Version        = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldVersion]);
            this.Developer      = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldDeveloper]);
            this.DownLoadCount  = BusinessLogic.ConvertToNullableInt(dataRow[PiPlatFormAddInTable.FieldDownLoadCount]);
            this.Enabled        = BusinessLogic.ConvertToNullableInt(dataRow[PiPlatFormAddInTable.FieldEnabled]);
            this.DeleteMark     = BusinessLogic.ConvertToNullableInt(dataRow[PiPlatFormAddInTable.FieldDeleteMark]);
            this.Description    = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldDescription]);
            this.CreateOn       = BusinessLogic.ConvertToNullableDateTime(dataRow[PiPlatFormAddInTable.FieldCreateOn]);
            this.CreateUserId   = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldCreateUserId]);
            this.CreateBy       = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldCreateBy]);
            this.ModifiedOn     = BusinessLogic.ConvertToNullableDateTime(dataRow[PiPlatFormAddInTable.FieldModifiedOn]);
            this.ModifiedUserId   = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldModifiedUserId]);
            this.ModifiedBy     = BusinessLogic.ConvertToString(dataRow[PiPlatFormAddInTable.FieldModifiedBy]);
            return this;
        }

        /// <summary>
        /// 从数据流读取
        /// </summary>
        /// <param name="dataReader">数据流</param>
        public PiPlatFormAddInEntity GetFrom(IDataReader dataReader)
        {
            this.Id             = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldId]);
            this.Guid           = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldGuid]);
            this.Name           = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldName]);
            this.AssemblyName   = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldAssemblyName]);
            this.ClassName      = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldClassName]);
            this.AddIn          = BusinessLogic.ConvertToByte(dataReader[PiPlatFormAddInTable.FieldAddIn]);
            this.AddInSize      = BusinessLogic.ConvertToNullableLong(dataReader[PiPlatFormAddInTable.FieldAddInSize]);
            this.Version        = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldVersion]);
            this.Developer      = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldDeveloper]);
            this.DownLoadCount  = BusinessLogic.ConvertToNullableInt(dataReader[PiPlatFormAddInTable.FieldDownLoadCount]);
            this.Enabled        = BusinessLogic.ConvertToNullableInt(dataReader[PiPlatFormAddInTable.FieldEnabled]);
            this.DeleteMark     = BusinessLogic.ConvertToNullableInt(dataReader[PiPlatFormAddInTable.FieldDeleteMark]);
            this.Description    = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldDescription]);
            this.CreateOn       = BusinessLogic.ConvertToNullableDateTime(dataReader[PiPlatFormAddInTable.FieldCreateOn]);
            this.CreateUserId   = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldCreateUserId]);
            this.CreateBy       = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldCreateBy]);
            this.ModifiedOn     = BusinessLogic.ConvertToNullableDateTime(dataReader[PiPlatFormAddInTable.FieldModifiedOn]);
            this.ModifiedUserId   = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldModifiedUserId]);
            this.ModifiedBy     = BusinessLogic.ConvertToString(dataReader[PiPlatFormAddInTable.FieldModifiedBy]);
            return this;
        }
    }
}
