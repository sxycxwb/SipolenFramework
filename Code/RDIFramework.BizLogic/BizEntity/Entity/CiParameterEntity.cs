#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;

namespace RDIFramework.BizLogic
{
      using RDIFramework.Utilities;

     /// <summary>
     /// CiParameterEntity
     /// 系统参数配置表
     ///
     /// 修改纪录
     ///        2015-08-06 版本：3.0 EricHu 新增允许编辑、允许删除。
     ///        2014-07-30 版本: 2.8 EricHu 以自动属性进行重新组织。
     ///		2012-03-02 版本：1.0 EricHu 创建主键。
     ///
     /// 版本：3.0
     ///
     /// <author>
     ///		<name>EricHu</name>
     ///		<date>2012-03-02</date>
     /// </author>
     /// </summary>
    [Serializable]
    public partial class CiParameterEntity : BaseEntity
    {
        /// <summary>
        /// 主键
        /// </summary>
        public String Id { get; set; }

        /// <summary>
        /// 分类键值
        /// </summary>
        public String CategoryKey { get; set; }

        /// <summary>
        /// 参数主键
        /// </summary>
        public String ParameterId { get; set; }

        /// <summary>
        /// 参数编号
        /// </summary>
        public String ParameterCode { get; set; }

        /// <summary>
        /// 参数具体内容
        /// </summary>
        public String ParameterContent { get; set; }

        /// <summary>
        /// 处理审核过
        /// </summary>
        public int? Worked { get; set; }

        /// <summary>
        /// 有效
        /// </summary>
        public int? Enabled { get; set; }

        /// <summary>
        /// 允许编辑
        /// </summary>
        public int? AllowEdit { get; set; }

        /// <summary>
        /// 允许删除
        /// </summary>
        public int? AllowDelete { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public String Description { get; set; }

        /// <summary>
        /// 排序码
        /// </summary>
        public int? SortCode { get; set; }

        /// <summary>
        /// 删除标志
        /// </summary>
        public int? DeleteMark { get; set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime? CreateOn { get; set; }

        /// <summary>
        /// 创建用户主键
        /// </summary>
        public String CreateUserId { get; set; }

        /// <summary>
        /// 创建用户
        /// </summary>
        public String CreateBy { get; set; }

        /// <summary>
        /// 修改日期
        /// </summary>
        public DateTime? ModifiedOn { get; set; }

        /// <summary>
        /// 修改用户主键
        /// </summary>
        public String ModifiedUserId { get; set; }

        /// <summary>
        /// 修改用户
        /// </summary>
        public String ModifiedBy { get; set; }

        /// <summary>
        /// 构造函数
        /// </summary>
        public CiParameterEntity()
        {
            this.Enabled = 0;
            this.AllowEdit = 0;
            this.AllowDelete = 0;
            this.DeleteMark = 0;
            this.SortCode = null;
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        protected override BaseEntity GetFrom(IDataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldId]);
            this.CategoryKey = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldCategoryKey]);
            this.ParameterId = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldParameterId]);
            this.ParameterCode = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldParameterCode]);
            this.ParameterContent = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldParameterContent]);
            this.Worked = BusinessLogic.ConvertToNullableInt(dataRow[CiParameterTable.FieldWorked]);
            this.Enabled = BusinessLogic.ConvertToNullableInt(dataRow[CiParameterTable.FieldEnabled]);
            this.AllowEdit = BusinessLogic.ConvertToNullableInt(dataRow[CiParameterTable.FieldAllowEdit]);
            this.AllowDelete = BusinessLogic.ConvertToNullableInt(dataRow[CiParameterTable.FieldAllowDelete]);
            this.Description = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldDescription]);
            this.DeleteMark = BusinessLogic.ConvertToNullableInt(dataRow[CiParameterTable.FieldDeleteMark]);
            this.SortCode = BusinessLogic.ConvertToNullableInt(dataRow[CiParameterTable.FieldSortCode]);
            this.CreateOn = BusinessLogic.ConvertToNullableDateTime(dataRow[CiParameterTable.FieldCreateOn]);
            this.CreateUserId = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldCreateUserId]);
            this.CreateBy = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldCreateBy]);
            this.ModifiedOn = BusinessLogic.ConvertToNullableDateTime(dataRow[CiParameterTable.FieldModifiedOn]);
            this.ModifiedUserId = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldModifiedUserId]);
            this.ModifiedBy = BusinessLogic.ConvertToString(dataRow[CiParameterTable.FieldModifiedBy]);
            return this;
        }
    }
}
