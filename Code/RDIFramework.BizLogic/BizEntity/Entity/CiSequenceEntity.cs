#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//     RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//     RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
//	框架官网：http://www.rdiframework.net/
//	框架博客：http://blog.rdiframework.net/
//	交流QQ：406590790 
//	邮件交流：406590790@qq.com
//	其他博客：
//    http://www.cnblogs.com/huyong 
//    http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由RDIFramework.NET平台代码生成工具自动生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;

namespace RDIFramework.BizLogic
{
  using RDIFramework.Utilities;

    /// <summary>
    /// CiSequenceEntity
    /// 序列产生器表
    ///
    /// 修改纪录
    ///     
    ///     2015-08-05 版本：3.0 EricHu 增加"DeleteMark"删除标志。
    ///     2014-07-30 版本: 2.8 EricHu 以自动属性进行重新组织。
    ///		2012-03-02 版本：1.0 EricHu 创建主键。
    ///
    /// 版本：3.0
    ///
    /// <author>
    ///		<name>EricHu</name>
    ///		<date>2012-03-02</date>
    /// </author>
    /// </summary>
    [Serializable]
    public partial class CiSequenceEntity : BaseEntity
    {
        /// <summary>
        /// 主键
        /// </summary>
        public String Id { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        public String FullName { get; set; }

        /// <summary>
        /// 序列号前缀
        /// </summary>
        public String Prefix { get; set; }

        /// <summary>
        /// 序列号分隔符
        /// </summary>
        public String Separate { get; set; }
        /// <summary>
        /// 升序序列
        /// </summary>
        public int? Sequence { get; set; }

        /// <summary>
        /// 倒序序列
        /// </summary>
        public int? Reduction { get; set; }

        /// <summary>
        /// 步骤
        /// </summary>
        public int? Step { get; set; }

        /// <summary>
        /// 删除标志
        /// </summary>
        public int? DeleteMark { get; set; }

        /// <summary>
        /// 创建日期
        /// </summary>
        public DateTime? CreateOn { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public String Description { get; set; }

        /// <summary>
        /// 构造函数
        /// </summary>
        public CiSequenceEntity()
        {
            this.Sequence = 10000000;
            this.Reduction = 9999999;
            this.Step = 1;
            this.DeleteMark = 0;
            this.CreateOn = DateTime.Now;
        }

        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        protected override BaseEntity GetFrom(IDataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToString(dataRow[CiSequenceTable.FieldId]);
            this.FullName = BusinessLogic.ConvertToString(dataRow[CiSequenceTable.FieldFullName]);
            this.Prefix = BusinessLogic.ConvertToString(dataRow[CiSequenceTable.FieldPrefix]);
            this.Separate = BusinessLogic.ConvertToString(dataRow[CiSequenceTable.FieldSeparate]);
            this.Sequence = BusinessLogic.ConvertToNullableInt(dataRow[CiSequenceTable.FieldSequence]);
            this.Reduction = BusinessLogic.ConvertToNullableInt(dataRow[CiSequenceTable.FieldReduction]);
            this.Step = BusinessLogic.ConvertToNullableInt(dataRow[CiSequenceTable.FieldStep]);
            this.DeleteMark = BusinessLogic.ConvertToNullableInt(dataRow[CiSequenceTable.FieldDeleteMark]);
            this.CreateOn = BusinessLogic.ConvertToNullableDateTime(dataRow[CiSequenceTable.FieldCreateOn]);
            this.Description = BusinessLogic.ConvertToString(dataRow[CiSequenceTable.FieldDescription]);
            return this;
        }
    }
}
