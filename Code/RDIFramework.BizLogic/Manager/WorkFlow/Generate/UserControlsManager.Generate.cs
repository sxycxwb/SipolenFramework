#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//	RDIFramework.NET（.NET快速信息化系统开发、整合框架）是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//	RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
// 官方博客：http://www.cnblogs.com/huyong
//           http://blog.csdn.net/chinahuyong
//    Email：80368704@qq.com
//       QQ：80368704
//------------------------------------------------------------------------------
// <auto-generated>
//	此代码由RDIFramework.NET平台代码生成工具自动生成。
//	运行时版本:4.0.30319.1
//
//	对此文件的更改可能会导致不正确的行为，并且如果
//	重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System.Collections.Generic;
using System.Globalization;

namespace RDIFramework.BizLogic
{
    
    using RDIFramework.Utilities;

    /// <summary>
    /// UserControlsManager
    /// 
    /// 
    /// 修改纪录
    /// 
    /// 2014-06-03 版本：1.0 EricHu 创建主键。
    /// 
    /// 版本：1.0
    /// 
    /// <author>
    /// <name>EricHu</name>
    /// <date>2014-06-03</date>
    /// </author>
    /// </summary>
    public partial class UserControlsManager : DbCommonManager
    {
        /// <summary>
        /// 构造函数
        /// </summary>
        public UserControlsManager()
        {
            base.CurrentTableName = UserControlsTable.TableName;
            base.PrimaryKey = UserControlsTable.FieldId;
        }

        /// <summary>
        /// 构造函数
        /// <param name="tableName">指定表名</param>
        /// </summary>
        public UserControlsManager(string tableName)
        {
            base.CurrentTableName = tableName;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        public UserControlsManager(IDbProvider dbProvider): this()
        {
            DBProvider = dbProvider;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="userInfo">用户信息</param>
        public UserControlsManager(UserInfo userInfo) : this()
        {
            UserInfo = userInfo;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        /// <param name="userInfo">用户信息</param>
        public UserControlsManager(IDbProvider dbProvider, UserInfo userInfo) : this(dbProvider)
        {
            UserInfo = userInfo;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        /// <param name="userInfo">用户信息</param>
        /// <param name="tableName">指定表名</param>
        public UserControlsManager(IDbProvider dbProvider, UserInfo userInfo, string tableName) : this(dbProvider, userInfo)
        {
            base.CurrentTableName = tableName;
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="userControlsEntity">实体</param>
        /// <returns>主键</returns>
        public string Add(UserControlsEntity userControlsEntity)
        {
            return this.AddEntity(userControlsEntity);
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="userControlsEntity">实体</param>
        /// <param name="identity">自增量方式</param>
        /// <param name="returnId">返回主键</param>
        /// <returns>主键</returns>
        public string Add(UserControlsEntity userControlsEntity, bool identity, bool returnId)
        {
            this.Identity = identity;
            this.ReturnId = returnId;
            return this.AddEntity(userControlsEntity);
        }

        /// <summary>
        /// 更新
        /// </summary>
        /// <param name="userControlsEntity">实体</param>
        public int Update(UserControlsEntity userControlsEntity)
        {
            return this.UpdateEntity(userControlsEntity);
        }

        /// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id">主键</param>
        public UserControlsEntity GetEntity(string id)
        {
            var userControlsEntity = BaseEntity.Create<UserControlsEntity>(this.GetDT(new KeyValuePair<string, object>(UserControlsTable.FieldId, id)));
            return userControlsEntity;
        }

        /// <summary>
        /// 添加实体
        /// </summary>
        /// <param name="userControlsEntity">实体</param>
        public string AddEntity(UserControlsEntity userControlsEntity)
        {
            var sequence = string.Empty;
            this.Identity = false; 
            if ( !string.IsNullOrEmpty(userControlsEntity.Id))
            {
                sequence = userControlsEntity.Id.ToString(CultureInfo.InvariantCulture);
            }
            var sqlBuilder = new SQLBuilder(DBProvider, this.Identity, this.ReturnId);
            sqlBuilder.BeginInsert(this.CurrentTableName, UserControlsTable.FieldId);
            if (!this.Identity) 
            {
                if (string.IsNullOrEmpty(userControlsEntity.Id)) 
                { 
                    sequence = BusinessLogic.NewGuid(); 
                    userControlsEntity.Id = sequence ;
                }
                sqlBuilder.SetValue(UserControlsTable.FieldId, userControlsEntity.Id);
            }
            else
            {
                if (!this.ReturnId && (DBProvider.CurrentDbType == CurrentDbType.Oracle || DBProvider.CurrentDbType == CurrentDbType.DB2))
                {
                    if (DBProvider.CurrentDbType == CurrentDbType.Oracle)
                    {
                        sqlBuilder.SetFormula(UserControlsTable.FieldId, "SEQ_" + this.CurrentTableName.ToUpper() + ".NEXTVAL ");
                    }
                    if (DBProvider.CurrentDbType == CurrentDbType.DB2)
                    {
                        sqlBuilder.SetFormula(UserControlsTable.FieldId, "NEXT VALUE FOR SEQ_" + this.CurrentTableName.ToUpper());
                    }
                }
                else
                {
                    if (this.Identity && (DBProvider.CurrentDbType == CurrentDbType.Oracle || DBProvider.CurrentDbType == CurrentDbType.DB2))
                    {
                        if (string.IsNullOrEmpty(userControlsEntity.Id))
                        {
                            if (string.IsNullOrEmpty(sequence))
                            {
                                var sequenceManager = new CiSequenceManager(DBProvider, this.Identity);
                                sequence = sequenceManager.GetSequence(this.CurrentTableName);
                            }
                            userControlsEntity.Id = sequence;
                        }
                        sqlBuilder.SetValue(UserControlsTable.FieldId, userControlsEntity.Id);
                    }
                }
            }
            this.SetEntity(sqlBuilder, userControlsEntity);
            if (UserInfo != null)
            {
                sqlBuilder.SetValue(UserControlsTable.FieldCreateUserId, UserInfo.Id);
                sqlBuilder.SetValue(UserControlsTable.FieldCreateBy, UserInfo.RealName);
                sqlBuilder.SetValue(UserControlsTable.FieldModifiedUserId, UserInfo.Id);
                sqlBuilder.SetValue(UserControlsTable.FieldModifiedBy, UserInfo.RealName);
            }
            sqlBuilder.SetDBNow(UserControlsTable.FieldCreateOn);
            sqlBuilder.SetDBNow(UserControlsTable.FieldModifiedOn);
            if (this.Identity && (DBProvider.CurrentDbType == CurrentDbType.SqlServer || DBProvider.CurrentDbType == CurrentDbType.Access))
            {
                sequence = sqlBuilder.EndInsert().ToString(CultureInfo.InvariantCulture);
            }
            else
            {
                sqlBuilder.EndInsert();
            }
            return sequence;
        }

        /// <summary>
        /// 更新实体
        /// </summary>
        /// <param name="userControlsEntity">实体</param>
        public int UpdateEntity(UserControlsEntity userControlsEntity)
        {
            var sqlBuilder = new SQLBuilder(DBProvider);
            sqlBuilder.BeginUpdate(this.CurrentTableName);
            this.SetEntity(sqlBuilder, userControlsEntity);
            if (UserInfo != null)
            {
                sqlBuilder.SetValue(UserControlsTable.FieldModifiedUserId, UserInfo.Id);
                sqlBuilder.SetValue(UserControlsTable.FieldModifiedBy, UserInfo.RealName);
            }
            sqlBuilder.SetDBNow(UserControlsTable.FieldModifiedOn);
            sqlBuilder.SetWhere(UserControlsTable.FieldId, userControlsEntity.Id);
            return sqlBuilder.EndUpdate();
        }

        /// <summary>
        /// 设置实体
        /// </summary>
        /// <param name="sqlBuilder">Sql语句生成器</param>
        /// <param name="userControlsEntity">实体</param>
        private void SetEntity(SQLBuilder sqlBuilder, UserControlsEntity userControlsEntity)
        {
            sqlBuilder.SetValue(UserControlsTable.FieldFullName, userControlsEntity.FullName);
            sqlBuilder.SetValue(UserControlsTable.FieldPath, userControlsEntity.Path);
            sqlBuilder.SetValue(UserControlsTable.FieldFormName, userControlsEntity.FormName);
            sqlBuilder.SetValue(UserControlsTable.FieldAssemblyName, userControlsEntity.AssemblyName);
            sqlBuilder.SetValue(UserControlsTable.FieldControlId, userControlsEntity.ControlId);
            sqlBuilder.SetValue(UserControlsTable.FieldDescription, userControlsEntity.Description);
            sqlBuilder.SetValue(UserControlsTable.FieldType, userControlsEntity.Type);
            sqlBuilder.SetValue(UserControlsTable.FieldEnabled, userControlsEntity.Enabled);
        }

        /// <summary>
        /// 删除实体
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns>影响行数</returns>
        public int Delete(string id)
        {
            return this.Delete(new KeyValuePair<string, object>(UserControlsTable.FieldId, id));
        }
    }
}
