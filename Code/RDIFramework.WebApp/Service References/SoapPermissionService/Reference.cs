//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1026
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace RDIFramework.WebApp.SoapPermissionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SoapPermissionService.IPermissionService")]
    public interface IPermissionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsModuleAuthorizedByUserId", ReplyAction="http://tempuri.org/IPermissionService/IsModuleAuthorizedByUserIdResponse")]
        bool IsModuleAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string moduleCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsModuleAuthorizedByUserId", ReplyAction="http://tempuri.org/IPermissionService/IsModuleAuthorizedByUserIdResponse")]
        System.IAsyncResult BeginIsModuleAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string moduleCode, System.AsyncCallback callback, object asyncState);
        
        bool EndIsModuleAuthorizedByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetPermissionScopeByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionScopeByUserIdResponse")]
        RDIFramework.Utilities.PermissionScope GetPermissionScopeByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetPermissionScopeByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionScopeByUserIdResponse")]
        System.IAsyncResult BeginGetPermissionScopeByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        RDIFramework.Utilities.PermissionScope EndGetPermissionScopeByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetResourcePermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetResourcePermissionItemIdsResponse")]
        string[] GetResourcePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetResourcePermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetResourcePermissionItemIdsResponse")]
        System.IAsyncResult BeginGetResourcePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetResourcePermissionItemIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantResourcePermission", ReplyAction="http://tempuri.org/IPermissionService/GrantResourcePermissionResponse")]
        int GrantResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] grantPermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantResourcePermission", ReplyAction="http://tempuri.org/IPermissionService/GrantResourcePermissionResponse")]
        System.IAsyncResult BeginGrantResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantResourcePermission(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeResourcePermission", ReplyAction="http://tempuri.org/IPermissionService/RevokeResourcePermissionResponse")]
        int RevokeResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] revokePermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeResourcePermission", ReplyAction="http://tempuri.org/IPermissionService/RevokeResourcePermissionResponse")]
        System.IAsyncResult BeginRevokeResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeResourcePermission(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetPermissionScopeTargetIds", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionScopeTargetIdsResponse")]
        string[] GetPermissionScopeTargetIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetPermissionScopeTargetIds", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionScopeTargetIdsResponse")]
        System.IAsyncResult BeginGetPermissionScopeTargetIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetPermissionScopeTargetIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetPermissionScopeResourceIds", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionScopeResourceIdsResponse")]
        string[] GetPermissionScopeResourceIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string targetResourceId, string targetResourceCategory, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetPermissionScopeResourceIds", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionScopeResourceIdsResponse")]
        System.IAsyncResult BeginGetPermissionScopeResourceIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string targetResourceId, string targetResourceCategory, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetPermissionScopeResourceIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantPermissionScopeTargets", ReplyAction="http://tempuri.org/IPermissionService/GrantPermissionScopeTargetsResponse")]
        int GrantPermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] grantTargetIds, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantPermissionScopeTargets", ReplyAction="http://tempuri.org/IPermissionService/GrantPermissionScopeTargetsResponse")]
        System.IAsyncResult BeginGrantPermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] grantTargetIds, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndGrantPermissionScopeTargets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantPermissionScopeTarget", ReplyAction="http://tempuri.org/IPermissionService/GrantPermissionScopeTargetResponse")]
        int GrantPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string grantTargetId, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantPermissionScopeTarget", ReplyAction="http://tempuri.org/IPermissionService/GrantPermissionScopeTargetResponse")]
        System.IAsyncResult BeginGrantPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string grantTargetId, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndGrantPermissionScopeTarget(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokePermissionScopeTargets", ReplyAction="http://tempuri.org/IPermissionService/RevokePermissionScopeTargetsResponse")]
        int RevokePermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] revokeTargetIds, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokePermissionScopeTargets", ReplyAction="http://tempuri.org/IPermissionService/RevokePermissionScopeTargetsResponse")]
        System.IAsyncResult BeginRevokePermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] revokeTargetIds, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokePermissionScopeTargets(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokePermissionScopeTarget", ReplyAction="http://tempuri.org/IPermissionService/RevokePermissionScopeTargetResponse")]
        int RevokePermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string revokeTargetId, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokePermissionScopeTarget", ReplyAction="http://tempuri.org/IPermissionService/RevokePermissionScopeTargetResponse")]
        System.IAsyncResult BeginRevokePermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string revokeTargetId, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokePermissionScopeTarget(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/ClearPermissionScopeTarget", ReplyAction="http://tempuri.org/IPermissionService/ClearPermissionScopeTargetResponse")]
        int ClearPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/ClearPermissionScopeTarget", ReplyAction="http://tempuri.org/IPermissionService/ClearPermissionScopeTargetResponse")]
        System.IAsyncResult BeginClearPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndClearPermissionScopeTarget(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetResourceScopeIds", ReplyAction="http://tempuri.org/IPermissionService/GetResourceScopeIdsResponse")]
        string[] GetResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetResourceScopeIds", ReplyAction="http://tempuri.org/IPermissionService/GetResourceScopeIdsResponse")]
        System.IAsyncResult BeginGetResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetResourceScopeIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetTreeResourceScopeIds", ReplyAction="http://tempuri.org/IPermissionService/GetTreeResourceScopeIdsResponse")]
        string[] GetTreeResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, bool childrens);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetTreeResourceScopeIds", ReplyAction="http://tempuri.org/IPermissionService/GetTreeResourceScopeIdsResponse")]
        System.IAsyncResult BeginGetTreeResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, bool childrens, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetTreeResourceScopeIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetModuleIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetModuleIdsByUserIdResponse")]
        string[] GetModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetModuleIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetModuleIdsByUserIdResponse")]
        System.IAsyncResult BeginGetModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetModuleIdsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetModuleDTByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetModuleDTByUserIdResponse")]
        System.Data.DataTable GetModuleDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetModuleDTByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetModuleDTByUserIdResponse")]
        System.IAsyncResult BeginGetModuleDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetModuleDTByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeModuleIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeModuleIdsByUserIdResponse")]
        string[] GetScopeModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeModuleIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeModuleIdsByUserIdResponse")]
        System.IAsyncResult BeginGetScopeModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeModuleIdsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/GrantUserModuleScope1Response")]
        string GrantUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string grantModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/GrantUserModuleScope1Response")]
        System.IAsyncResult BeginGrantUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string grantModuleId, System.AsyncCallback callback, object asyncState);
        
        string EndGrantUserModuleScope1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/GrantUserModuleScope2Response")]
        int GrantUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] grantModuleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/GrantUserModuleScope2Response")]
        System.IAsyncResult BeginGrantUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] grantModuleIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantUserModuleScope2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserModuleScope1Response")]
        int RevokeUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string revokeModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserModuleScope1Response")]
        System.IAsyncResult BeginRevokeUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string revokeModuleId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserModuleScope1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserModuleScope2Response")]
        int RevokeUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] revokeModuleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserModuleScope2Response")]
        System.IAsyncResult BeginRevokeUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] revokeModuleIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserModuleScope2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeModuleIdsByOrganizeId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeModuleIdsByOrganizeIdResponse")]
        string[] GetScopeModuleIdsByOrganizeId(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeModuleIdsByOrganizeId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeModuleIdsByOrganizeIdResponse")]
        System.IAsyncResult BeginGetScopeModuleIdsByOrganizeId(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeModuleIdsByOrganizeId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope2Response")]
        int GrantOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] grantModuleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope2Response")]
        System.IAsyncResult BeginGrantOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] grantModuleIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantOrganizeModuleScope2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope1Response")]
        string GrantOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string grantModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizeModuleScope1Response")]
        System.IAsyncResult BeginGrantOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string grantModuleId, System.AsyncCallback callback, object asyncState);
        
        string EndGrantOrganizeModuleScope1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope2Response")]
        int RevokeOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] revokeModuleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope2Response")]
        System.IAsyncResult BeginRevokeOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] revokeModuleIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeOrganizeModuleScope2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope1Response")]
        int RevokeOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string revokeModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizeModuleScope1Response")]
        System.IAsyncResult BeginRevokeOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string revokeModuleId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeOrganizeModuleScope1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetOrganizePermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizePermissionItemIdsResponse")]
        string[] GetOrganizePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string organizeId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetOrganizePermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizePermissionItemIdsResponse")]
        System.IAsyncResult BeginGetOrganizePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string organizeId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetOrganizePermissionItemIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionItemId", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionItemIdResponse")]
        string[] GetOrganizeIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionItemId", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionItemIdResponse")]
        System.IAsyncResult BeginGetOrganizeIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetOrganizeIdsByPermissionItemId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantOrganizePermissionById", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizePermissionByIdResponse")]
        string GrantOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string grantPermissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantOrganizePermissionById", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizePermissionByIdResponse")]
        System.IAsyncResult BeginGrantOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string grantPermissionItemId, System.AsyncCallback callback, object asyncState);
        
        string EndGrantOrganizePermissionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantOrganizePermissions", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizePermissionsResponse")]
        int GrantOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] grantPermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantOrganizePermissions", ReplyAction="http://tempuri.org/IPermissionService/GrantOrganizePermissionsResponse")]
        System.IAsyncResult BeginGrantOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantOrganizePermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeOrganizePermissions", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizePermissionsResponse")]
        int RevokeOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] revokePermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeOrganizePermissions", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizePermissionsResponse")]
        System.IAsyncResult BeginRevokeOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeOrganizePermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeOrganizePermissionById", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizePermissionByIdResponse")]
        int RevokeOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string revokePermissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeOrganizePermissionById", ReplyAction="http://tempuri.org/IPermissionService/RevokeOrganizePermissionByIdResponse")]
        System.IAsyncResult BeginRevokeOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string revokePermissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeOrganizePermissionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/ClearOrganizePermission", ReplyAction="http://tempuri.org/IPermissionService/ClearOrganizePermissionResponse")]
        int ClearOrganizePermission(RDIFramework.Utilities.UserInfo userInfo, string organizeId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/ClearOrganizePermission", ReplyAction="http://tempuri.org/IPermissionService/ClearOrganizePermissionResponse")]
        System.IAsyncResult BeginClearOrganizePermission(RDIFramework.Utilities.UserInfo userInfo, string organizeId, System.AsyncCallback callback, object asyncState);
        
        int EndClearOrganizePermission(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsInRole", ReplyAction="http://tempuri.org/IPermissionService/IsInRoleResponse")]
        bool IsInRole(RDIFramework.Utilities.UserInfo userInfo, string userId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsInRole", ReplyAction="http://tempuri.org/IPermissionService/IsInRoleResponse")]
        System.IAsyncResult BeginIsInRole(RDIFramework.Utilities.UserInfo userInfo, string userId, string roleName, System.AsyncCallback callback, object asyncState);
        
        bool EndIsInRole(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsAuthorized", ReplyAction="http://tempuri.org/IPermissionService/IsAuthorizedResponse")]
        bool IsAuthorized(RDIFramework.Utilities.UserInfo userInfo, string permissionItemCode, string permissionItemName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsAuthorized", ReplyAction="http://tempuri.org/IPermissionService/IsAuthorizedResponse")]
        System.IAsyncResult BeginIsAuthorized(RDIFramework.Utilities.UserInfo userInfo, string permissionItemCode, string permissionItemName, System.AsyncCallback callback, object asyncState);
        
        bool EndIsAuthorized(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsAuthorizedByUserId", ReplyAction="http://tempuri.org/IPermissionService/IsAuthorizedByUserIdResponse")]
        bool IsAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string permissionItemName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsAuthorizedByUserId", ReplyAction="http://tempuri.org/IPermissionService/IsAuthorizedByUserIdResponse")]
        System.IAsyncResult BeginIsAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string permissionItemName, System.AsyncCallback callback, object asyncState);
        
        bool EndIsAuthorizedByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsAuthorizedByRoleId", ReplyAction="http://tempuri.org/IPermissionService/IsAuthorizedByRoleIdResponse")]
        bool IsAuthorizedByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsAuthorizedByRoleId", ReplyAction="http://tempuri.org/IPermissionService/IsAuthorizedByRoleIdResponse")]
        System.IAsyncResult BeginIsAuthorizedByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        bool EndIsAuthorizedByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsAdministrator", ReplyAction="http://tempuri.org/IPermissionService/IsAdministratorResponse")]
        bool IsAdministrator(RDIFramework.Utilities.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsAdministrator", ReplyAction="http://tempuri.org/IPermissionService/IsAdministratorResponse")]
        System.IAsyncResult BeginIsAdministrator(RDIFramework.Utilities.UserInfo userInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndIsAdministrator(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsAdministratorByUserId", ReplyAction="http://tempuri.org/IPermissionService/IsAdministratorByUserIdResponse")]
        bool IsAdministratorByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsAdministratorByUserId", ReplyAction="http://tempuri.org/IPermissionService/IsAdministratorByUserIdResponse")]
        System.IAsyncResult BeginIsAdministratorByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState);
        
        bool EndIsAdministratorByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetPermissionDT", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionDTResponse")]
        System.Data.DataTable GetPermissionDT(RDIFramework.Utilities.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetPermissionDT", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionDTResponse")]
        System.IAsyncResult BeginGetPermissionDT(RDIFramework.Utilities.UserInfo userInfo, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetPermissionDT(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetPermissionDTByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionDTByUserIdResponse")]
        System.Data.DataTable GetPermissionDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetPermissionDTByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionDTByUserIdResponse")]
        System.IAsyncResult BeginGetPermissionDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetPermissionDTByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/IsModuleAuthorized", ReplyAction="http://tempuri.org/IPermissionService/IsModuleAuthorizedResponse")]
        bool IsModuleAuthorized(RDIFramework.Utilities.UserInfo userInfo, string moduleCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/IsModuleAuthorized", ReplyAction="http://tempuri.org/IPermissionService/IsModuleAuthorizedResponse")]
        System.IAsyncResult BeginIsModuleAuthorized(RDIFramework.Utilities.UserInfo userInfo, string moduleCode, System.AsyncCallback callback, object asyncState);
        
        bool EndIsModuleAuthorized(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/ClearRolePermissionByRoleId", ReplyAction="http://tempuri.org/IPermissionService/ClearRolePermissionByRoleIdResponse")]
        int ClearRolePermissionByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/ClearRolePermissionByRoleId", ReplyAction="http://tempuri.org/IPermissionService/ClearRolePermissionByRoleIdResponse")]
        System.IAsyncResult BeginClearRolePermissionByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, System.AsyncCallback callback, object asyncState);
        
        int EndClearRolePermissionByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/ClearRolePermissionScope", ReplyAction="http://tempuri.org/IPermissionService/ClearRolePermissionScopeResponse")]
        int ClearRolePermissionScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/ClearRolePermissionScope", ReplyAction="http://tempuri.org/IPermissionService/ClearRolePermissionScopeResponse")]
        System.IAsyncResult BeginClearRolePermissionScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        int EndClearRolePermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeModuleIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeModuleIdsByRoleIdResponse")]
        string[] GetScopeModuleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeModuleIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeModuleIdsByRoleIdResponse")]
        System.IAsyncResult BeginGetScopeModuleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeModuleIdsByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRoleModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleModuleScope2Response")]
        int GrantRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantModuleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRoleModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleModuleScope2Response")]
        System.IAsyncResult BeginGrantRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantModuleIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantRoleModuleScope2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRoleModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleModuleScope1Response")]
        string GrantRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string grantModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRoleModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleModuleScope1Response")]
        System.IAsyncResult BeginGrantRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string grantModuleId, System.AsyncCallback callback, object asyncState);
        
        string EndGrantRoleModuleScope1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRoleModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleModuleScope2Response")]
        int RevokeRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeModuleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRoleModuleScope2", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleModuleScope2Response")]
        System.IAsyncResult BeginRevokeRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeModuleIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRoleModuleScope2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRoleModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleModuleScope1Response")]
        int RevokeRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string revokeModuleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRoleModuleScope1", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleModuleScope1Response")]
        System.IAsyncResult BeginRevokeRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string revokeModuleId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRoleModuleScope1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetUserPermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetUserPermissionItemIdsResponse")]
        string[] GetUserPermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetUserPermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetUserPermissionItemIdsResponse")]
        System.IAsyncResult BeginGetUserPermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetUserPermissionItemIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetUserIdsByPermissionItemId", ReplyAction="http://tempuri.org/IPermissionService/GetUserIdsByPermissionItemIdResponse")]
        string[] GetUserIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetUserIdsByPermissionItemId", ReplyAction="http://tempuri.org/IPermissionService/GetUserIdsByPermissionItemIdResponse")]
        System.IAsyncResult BeginGetUserIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetUserIdsByPermissionItemId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserPermissions", ReplyAction="http://tempuri.org/IPermissionService/GrantUserPermissionsResponse")]
        int GrantUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] grantPermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserPermissions", ReplyAction="http://tempuri.org/IPermissionService/GrantUserPermissionsResponse")]
        System.IAsyncResult BeginGrantUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantUserPermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserPermissionById", ReplyAction="http://tempuri.org/IPermissionService/GrantUserPermissionByIdResponse")]
        string GrantUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string grantPermissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserPermissionById", ReplyAction="http://tempuri.org/IPermissionService/GrantUserPermissionByIdResponse")]
        System.IAsyncResult BeginGrantUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string grantPermissionItemId, System.AsyncCallback callback, object asyncState);
        
        string EndGrantUserPermissionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserPermissions", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserPermissionsResponse")]
        int RevokeUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] revokePermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserPermissions", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserPermissionsResponse")]
        System.IAsyncResult BeginRevokeUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserPermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserPermissionById", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserPermissionByIdResponse")]
        int RevokeUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string revokePermissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserPermissionById", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserPermissionByIdResponse")]
        System.IAsyncResult BeginRevokeUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string revokePermissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserPermissionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByUserIdResponse")]
        string[] GetScopeOrganizeIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByUserIdResponse")]
        System.IAsyncResult BeginGetScopeOrganizeIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeOrganizeIdsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserOrganizeScopeResponse")]
        int GrantUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantOrganizeIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserOrganizeScopeResponse")]
        System.IAsyncResult BeginGrantUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantOrganizeIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantUserOrganizeScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserOrganizeScopeResponse")]
        int RevokeUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeOrganizeIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserOrganizeScopeResponse")]
        System.IAsyncResult BeginRevokeUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeOrganizeIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserOrganizeScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeUserIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeUserIdsByUserIdResponse")]
        string[] GetScopeUserIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeUserIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeUserIdsByUserIdResponse")]
        System.IAsyncResult BeginGetScopeUserIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeUserIdsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserUserScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserUserScopeResponse")]
        int GrantUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantUserIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserUserScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserUserScopeResponse")]
        System.IAsyncResult BeginGrantUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantUserIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantUserUserScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserUserScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserUserScopeResponse")]
        int RevokeUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeUserIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserUserScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserUserScopeResponse")]
        System.IAsyncResult BeginRevokeUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeUserIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserUserScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeRoleIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeRoleIdsByUserIdResponse")]
        string[] GetScopeRoleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeRoleIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeRoleIdsByUserIdResponse")]
        System.IAsyncResult BeginGetScopeRoleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeRoleIdsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserRoleScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserRoleScopeResponse")]
        int GrantUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantRoleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserRoleScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserRoleScopeResponse")]
        System.IAsyncResult BeginGrantUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantRoleIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantUserRoleScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserRoleScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserRoleScopeResponse")]
        int RevokeUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeRoleds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserRoleScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserRoleScopeResponse")]
        System.IAsyncResult BeginRevokeUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeRoleds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserRoleScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByUserIdResponse")]
        string[] GetScopePermissionItemIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByUserId", ReplyAction="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByUserIdResponse")]
        System.IAsyncResult BeginGetScopePermissionItemIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopePermissionItemIdsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantUserPermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserPermissionItemScopeResponse")]
        int GrantUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantPermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantUserPermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/GrantUserPermissionItemScopeResponse")]
        System.IAsyncResult BeginGrantUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantUserPermissionItemScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeUserPermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserPermissionItemScopeResponse")]
        int RevokeUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokePermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeUserPermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeUserPermissionItemScopeResponse")]
        System.IAsyncResult BeginRevokeUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeUserPermissionItemScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/ClearUserPermissionByUserId", ReplyAction="http://tempuri.org/IPermissionService/ClearUserPermissionByUserIdResponse")]
        int ClearUserPermissionByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/ClearUserPermissionByUserId", ReplyAction="http://tempuri.org/IPermissionService/ClearUserPermissionByUserIdResponse")]
        System.IAsyncResult BeginClearUserPermissionByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState);
        
        int EndClearUserPermissionByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/ClearUserPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/ClearUserPermissionScopeResponse")]
        int ClearUserPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/ClearUserPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/ClearUserPermissionScopeResponse")]
        System.IAsyncResult BeginClearUserPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        int EndClearUserPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetModuleDT", ReplyAction="http://tempuri.org/IPermissionService/GetModuleDTResponse")]
        System.Data.DataTable GetModuleDT(RDIFramework.Utilities.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetModuleDT", ReplyAction="http://tempuri.org/IPermissionService/GetModuleDTResponse")]
        System.IAsyncResult BeginGetModuleDT(RDIFramework.Utilities.UserInfo userInfo, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetModuleDT(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetUserDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetUserDTByPermissionScopeResponse")]
        System.Data.DataTable GetUserDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetUserDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetUserDTByPermissionScopeResponse")]
        System.IAsyncResult BeginGetUserDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetUserDTByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetUserIdsByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetUserIdsByPermissionScopeResponse")]
        string[] GetUserIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetUserIdsByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetUserIdsByPermissionScopeResponse")]
        System.IAsyncResult BeginGetUserIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetUserIdsByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetRoleDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetRoleDTByPermissionScopeResponse")]
        System.Data.DataTable GetRoleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetRoleDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetRoleDTByPermissionScopeResponse")]
        System.IAsyncResult BeginGetRoleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetRoleDTByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionScopeResponse")]
        string[] GetRoleIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionScopeResponse")]
        System.IAsyncResult BeginGetRoleIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRoleIdsByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetModuleDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetModuleDTByPermissionScopeResponse")]
        System.Data.DataTable GetModuleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetModuleDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetModuleDTByPermissionScopeResponse")]
        System.IAsyncResult BeginGetModuleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetModuleDTByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetPermissionItemDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionItemDTByPermissionScopeRespons" +
            "e")]
        System.Data.DataTable GetPermissionItemDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetPermissionItemDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetPermissionItemDTByPermissionScopeRespons" +
            "e")]
        System.IAsyncResult BeginGetPermissionItemDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetPermissionItemDTByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetOrganizeDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizeDTByPermissionScopeResponse")]
        System.Data.DataTable GetOrganizeDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetOrganizeDTByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizeDTByPermissionScopeResponse")]
        System.IAsyncResult BeginGetOrganizeDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndGetOrganizeDTByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionScopeResponse")]
        string[] GetOrganizeIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionScope", ReplyAction="http://tempuri.org/IPermissionService/GetOrganizeIdsByPermissionScopeResponse")]
        System.IAsyncResult BeginGetOrganizeIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetOrganizeIdsByPermissionScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetRolePermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetRolePermissionItemIdsResponse")]
        string[] GetRolePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string roleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetRolePermissionItemIds", ReplyAction="http://tempuri.org/IPermissionService/GetRolePermissionItemIdsResponse")]
        System.IAsyncResult BeginGetRolePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string roleId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRolePermissionItemIds(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionItemId", ReplyAction="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionItemIdResponse")]
        string[] GetRoleIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionItemId", ReplyAction="http://tempuri.org/IPermissionService/GetRoleIdsByPermissionItemIdResponse")]
        System.IAsyncResult BeginGetRoleIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetRoleIdsByPermissionItemId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRolePermissions", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionsResponse")]
        int GrantRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] grantPermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRolePermissions", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionsResponse")]
        System.IAsyncResult BeginGrantRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantRolePermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRolePermission", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionResponse")]
        string GrantRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string grantPermissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRolePermission", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionResponse")]
        System.IAsyncResult BeginGrantRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string grantPermissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string EndGrantRolePermission(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRolePermissionById", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionByIdResponse")]
        string GrantRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string grantPermissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRolePermissionById", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionByIdResponse")]
        System.IAsyncResult BeginGrantRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string grantPermissionItemId, System.AsyncCallback callback, object asyncState);
        
        string EndGrantRolePermissionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRolePermissions", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionsResponse")]
        int RevokeRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] revokePermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRolePermissions", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionsResponse")]
        System.IAsyncResult BeginRevokeRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRolePermissions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRolePermission", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionResponse")]
        int RevokeRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string revokePermissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRolePermission", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionResponse")]
        System.IAsyncResult BeginRevokeRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string revokePermissionItemCode, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRolePermission(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRolePermissionById", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionByIdResponse")]
        int RevokeRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string revokePermissionItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRolePermissionById", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionByIdResponse")]
        System.IAsyncResult BeginRevokeRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string revokePermissionItemId, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRolePermissionById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeUserIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeUserIdsByRoleIdResponse")]
        string[] GetScopeUserIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeUserIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeUserIdsByRoleIdResponse")]
        System.IAsyncResult BeginGetScopeUserIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeUserIdsByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeRoleIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeRoleIdsByRoleIdResponse")]
        string[] GetScopeRoleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeRoleIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeRoleIdsByRoleIdResponse")]
        System.IAsyncResult BeginGetScopeRoleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeRoleIdsByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByRoleIdResponse")]
        string[] GetScopeOrganizeIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopeOrganizeIdsByRoleIdResponse")]
        System.IAsyncResult BeginGetScopeOrganizeIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopeOrganizeIdsByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRoleUserScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleUserScopeResponse")]
        int GrantRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantUserIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRoleUserScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleUserScopeResponse")]
        System.IAsyncResult BeginGrantRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantUserIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantRoleUserScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRoleUserScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleUserScopeResponse")]
        int RevokeRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeUserIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRoleUserScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleUserScopeResponse")]
        System.IAsyncResult BeginRevokeRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeUserIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRoleUserScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRoleRoleScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleRoleScopeResponse")]
        int GrantRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantRoleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRoleRoleScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleRoleScopeResponse")]
        System.IAsyncResult BeginGrantRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantRoleIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantRoleRoleScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRoleRoleScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleRoleScopeResponse")]
        int RevokeRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeRoleIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRoleRoleScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleRoleScopeResponse")]
        System.IAsyncResult BeginRevokeRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeRoleIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRoleRoleScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRoleOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleOrganizeScopeResponse")]
        int GrantRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantOrganizeIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRoleOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRoleOrganizeScopeResponse")]
        System.IAsyncResult BeginGrantRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantOrganizeIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantRoleOrganizeScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRoleOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleOrganizeScopeResponse")]
        int RevokeRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeOrganizeIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRoleOrganizeScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRoleOrganizeScopeResponse")]
        System.IAsyncResult BeginRevokeRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeOrganizeIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRoleOrganizeScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByRoleIdResponse")]
        string[] GetScopePermissionItemIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByRoleId", ReplyAction="http://tempuri.org/IPermissionService/GetScopePermissionItemIdsByRoleIdResponse")]
        System.IAsyncResult BeginGetScopePermissionItemIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetScopePermissionItemIdsByRoleId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/GrantRolePermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionItemScopeResponse")]
        int GrantRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantPermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/GrantRolePermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/GrantRolePermissionItemScopeResponse")]
        System.IAsyncResult BeginGrantRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndGrantRolePermissionItemScope(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPermissionService/RevokeRolePermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionItemScopeResponse")]
        int RevokeRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokePermissionItemIds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPermissionService/RevokeRolePermissionItemScope", ReplyAction="http://tempuri.org/IPermissionService/RevokeRolePermissionItemScopeResponse")]
        System.IAsyncResult BeginRevokeRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState);
        
        int EndRevokeRolePermissionItemScope(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPermissionServiceChannel : RDIFramework.WebApp.SoapPermissionService.IPermissionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsModuleAuthorizedByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsModuleAuthorizedByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionScopeByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionScopeByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public RDIFramework.Utilities.PermissionScope Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((RDIFramework.Utilities.PermissionScope)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetResourcePermissionItemIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetResourcePermissionItemIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantResourcePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantResourcePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeResourcePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeResourcePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionScopeTargetIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionScopeTargetIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionScopeResourceIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionScopeResourceIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantPermissionScopeTargetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantPermissionScopeTargetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantPermissionScopeTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantPermissionScopeTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokePermissionScopeTargetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokePermissionScopeTargetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokePermissionScopeTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokePermissionScopeTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearPermissionScopeTargetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearPermissionScopeTargetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetResourceScopeIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetResourceScopeIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTreeResourceScopeIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTreeResourceScopeIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetModuleIdsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetModuleIdsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetModuleDTByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetModuleDTByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeModuleIdsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeModuleIdsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserModuleScope1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserModuleScope1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserModuleScope2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserModuleScope2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserModuleScope1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserModuleScope1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserModuleScope2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserModuleScope2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeModuleIdsByOrganizeIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeModuleIdsByOrganizeIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantOrganizeModuleScope2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantOrganizeModuleScope2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantOrganizeModuleScope1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantOrganizeModuleScope1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeOrganizeModuleScope2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeOrganizeModuleScope2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeOrganizeModuleScope1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeOrganizeModuleScope1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizePermissionItemIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizePermissionItemIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizeIdsByPermissionItemIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizeIdsByPermissionItemIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantOrganizePermissionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantOrganizePermissionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantOrganizePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantOrganizePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeOrganizePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeOrganizePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeOrganizePermissionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeOrganizePermissionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearOrganizePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearOrganizePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsInRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsInRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAuthorizedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAuthorizedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAuthorizedByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAuthorizedByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAuthorizedByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAuthorizedByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAdministratorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAdministratorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsAdministratorByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsAdministratorByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionDTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionDTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionDTByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionDTByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsModuleAuthorizedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsModuleAuthorizedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearRolePermissionByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearRolePermissionByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearRolePermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearRolePermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeModuleIdsByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeModuleIdsByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRoleModuleScope2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRoleModuleScope2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRoleModuleScope1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRoleModuleScope1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRoleModuleScope2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRoleModuleScope2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRoleModuleScope1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRoleModuleScope1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserPermissionItemIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserPermissionItemIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserIdsByPermissionItemIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserIdsByPermissionItemIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserPermissionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserPermissionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserPermissionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserPermissionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeOrganizeIdsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeOrganizeIdsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserOrganizeScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserOrganizeScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserOrganizeScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserOrganizeScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeUserIdsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeUserIdsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserUserScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserUserScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserUserScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserUserScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeRoleIdsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeRoleIdsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserRoleScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserRoleScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserRoleScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserRoleScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopePermissionItemIdsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopePermissionItemIdsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantUserPermissionItemScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantUserPermissionItemScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeUserPermissionItemScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeUserPermissionItemScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearUserPermissionByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearUserPermissionByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearUserPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearUserPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetModuleDTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetModuleDTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserDTByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserDTByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserIdsByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserIdsByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRoleDTByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoleDTByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRoleIdsByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoleIdsByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetModuleDTByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetModuleDTByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPermissionItemDTByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPermissionItemDTByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizeDTByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizeDTByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrganizeIdsByPermissionScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrganizeIdsByPermissionScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRolePermissionItemIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRolePermissionItemIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRoleIdsByPermissionItemIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoleIdsByPermissionItemIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRolePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRolePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRolePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRolePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRolePermissionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRolePermissionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRolePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRolePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRolePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRolePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRolePermissionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRolePermissionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeUserIdsByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeUserIdsByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeRoleIdsByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeRoleIdsByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopeOrganizeIdsByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopeOrganizeIdsByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRoleUserScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRoleUserScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRoleUserScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRoleUserScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRoleRoleScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRoleRoleScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRoleRoleScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRoleRoleScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRoleOrganizeScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRoleOrganizeScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRoleOrganizeScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRoleOrganizeScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScopePermissionItemIdsByRoleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScopePermissionItemIdsByRoleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GrantRolePermissionItemScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GrantRolePermissionItemScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevokeRolePermissionItemScopeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RevokeRolePermissionItemScopeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PermissionServiceClient : System.ServiceModel.ClientBase<RDIFramework.WebApp.SoapPermissionService.IPermissionService>, RDIFramework.WebApp.SoapPermissionService.IPermissionService {
        
        private BeginOperationDelegate onBeginIsModuleAuthorizedByUserIdDelegate;
        
        private EndOperationDelegate onEndIsModuleAuthorizedByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onIsModuleAuthorizedByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPermissionScopeByUserIdDelegate;
        
        private EndOperationDelegate onEndGetPermissionScopeByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionScopeByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetResourcePermissionItemIdsDelegate;
        
        private EndOperationDelegate onEndGetResourcePermissionItemIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetResourcePermissionItemIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantResourcePermissionDelegate;
        
        private EndOperationDelegate onEndGrantResourcePermissionDelegate;
        
        private System.Threading.SendOrPostCallback onGrantResourcePermissionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeResourcePermissionDelegate;
        
        private EndOperationDelegate onEndRevokeResourcePermissionDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeResourcePermissionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPermissionScopeTargetIdsDelegate;
        
        private EndOperationDelegate onEndGetPermissionScopeTargetIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionScopeTargetIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPermissionScopeResourceIdsDelegate;
        
        private EndOperationDelegate onEndGetPermissionScopeResourceIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionScopeResourceIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantPermissionScopeTargetsDelegate;
        
        private EndOperationDelegate onEndGrantPermissionScopeTargetsDelegate;
        
        private System.Threading.SendOrPostCallback onGrantPermissionScopeTargetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantPermissionScopeTargetDelegate;
        
        private EndOperationDelegate onEndGrantPermissionScopeTargetDelegate;
        
        private System.Threading.SendOrPostCallback onGrantPermissionScopeTargetCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokePermissionScopeTargetsDelegate;
        
        private EndOperationDelegate onEndRevokePermissionScopeTargetsDelegate;
        
        private System.Threading.SendOrPostCallback onRevokePermissionScopeTargetsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokePermissionScopeTargetDelegate;
        
        private EndOperationDelegate onEndRevokePermissionScopeTargetDelegate;
        
        private System.Threading.SendOrPostCallback onRevokePermissionScopeTargetCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearPermissionScopeTargetDelegate;
        
        private EndOperationDelegate onEndClearPermissionScopeTargetDelegate;
        
        private System.Threading.SendOrPostCallback onClearPermissionScopeTargetCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetResourceScopeIdsDelegate;
        
        private EndOperationDelegate onEndGetResourceScopeIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetResourceScopeIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTreeResourceScopeIdsDelegate;
        
        private EndOperationDelegate onEndGetTreeResourceScopeIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTreeResourceScopeIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetModuleIdsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetModuleIdsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetModuleIdsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetModuleDTByUserIdDelegate;
        
        private EndOperationDelegate onEndGetModuleDTByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetModuleDTByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeModuleIdsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetScopeModuleIdsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeModuleIdsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserModuleScope1Delegate;
        
        private EndOperationDelegate onEndGrantUserModuleScope1Delegate;
        
        private System.Threading.SendOrPostCallback onGrantUserModuleScope1CompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserModuleScope2Delegate;
        
        private EndOperationDelegate onEndGrantUserModuleScope2Delegate;
        
        private System.Threading.SendOrPostCallback onGrantUserModuleScope2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserModuleScope1Delegate;
        
        private EndOperationDelegate onEndRevokeUserModuleScope1Delegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserModuleScope1CompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserModuleScope2Delegate;
        
        private EndOperationDelegate onEndRevokeUserModuleScope2Delegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserModuleScope2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeModuleIdsByOrganizeIdDelegate;
        
        private EndOperationDelegate onEndGetScopeModuleIdsByOrganizeIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeModuleIdsByOrganizeIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantOrganizeModuleScope2Delegate;
        
        private EndOperationDelegate onEndGrantOrganizeModuleScope2Delegate;
        
        private System.Threading.SendOrPostCallback onGrantOrganizeModuleScope2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantOrganizeModuleScope1Delegate;
        
        private EndOperationDelegate onEndGrantOrganizeModuleScope1Delegate;
        
        private System.Threading.SendOrPostCallback onGrantOrganizeModuleScope1CompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeOrganizeModuleScope2Delegate;
        
        private EndOperationDelegate onEndRevokeOrganizeModuleScope2Delegate;
        
        private System.Threading.SendOrPostCallback onRevokeOrganizeModuleScope2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeOrganizeModuleScope1Delegate;
        
        private EndOperationDelegate onEndRevokeOrganizeModuleScope1Delegate;
        
        private System.Threading.SendOrPostCallback onRevokeOrganizeModuleScope1CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizePermissionItemIdsDelegate;
        
        private EndOperationDelegate onEndGetOrganizePermissionItemIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizePermissionItemIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizeIdsByPermissionItemIdDelegate;
        
        private EndOperationDelegate onEndGetOrganizeIdsByPermissionItemIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizeIdsByPermissionItemIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantOrganizePermissionByIdDelegate;
        
        private EndOperationDelegate onEndGrantOrganizePermissionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGrantOrganizePermissionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantOrganizePermissionsDelegate;
        
        private EndOperationDelegate onEndGrantOrganizePermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onGrantOrganizePermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeOrganizePermissionsDelegate;
        
        private EndOperationDelegate onEndRevokeOrganizePermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeOrganizePermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeOrganizePermissionByIdDelegate;
        
        private EndOperationDelegate onEndRevokeOrganizePermissionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeOrganizePermissionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearOrganizePermissionDelegate;
        
        private EndOperationDelegate onEndClearOrganizePermissionDelegate;
        
        private System.Threading.SendOrPostCallback onClearOrganizePermissionCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsInRoleDelegate;
        
        private EndOperationDelegate onEndIsInRoleDelegate;
        
        private System.Threading.SendOrPostCallback onIsInRoleCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAuthorizedDelegate;
        
        private EndOperationDelegate onEndIsAuthorizedDelegate;
        
        private System.Threading.SendOrPostCallback onIsAuthorizedCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAuthorizedByUserIdDelegate;
        
        private EndOperationDelegate onEndIsAuthorizedByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onIsAuthorizedByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAuthorizedByRoleIdDelegate;
        
        private EndOperationDelegate onEndIsAuthorizedByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onIsAuthorizedByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAdministratorDelegate;
        
        private EndOperationDelegate onEndIsAdministratorDelegate;
        
        private System.Threading.SendOrPostCallback onIsAdministratorCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsAdministratorByUserIdDelegate;
        
        private EndOperationDelegate onEndIsAdministratorByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onIsAdministratorByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPermissionDTDelegate;
        
        private EndOperationDelegate onEndGetPermissionDTDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionDTCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPermissionDTByUserIdDelegate;
        
        private EndOperationDelegate onEndGetPermissionDTByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionDTByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsModuleAuthorizedDelegate;
        
        private EndOperationDelegate onEndIsModuleAuthorizedDelegate;
        
        private System.Threading.SendOrPostCallback onIsModuleAuthorizedCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearRolePermissionByRoleIdDelegate;
        
        private EndOperationDelegate onEndClearRolePermissionByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onClearRolePermissionByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearRolePermissionScopeDelegate;
        
        private EndOperationDelegate onEndClearRolePermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onClearRolePermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeModuleIdsByRoleIdDelegate;
        
        private EndOperationDelegate onEndGetScopeModuleIdsByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeModuleIdsByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRoleModuleScope2Delegate;
        
        private EndOperationDelegate onEndGrantRoleModuleScope2Delegate;
        
        private System.Threading.SendOrPostCallback onGrantRoleModuleScope2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRoleModuleScope1Delegate;
        
        private EndOperationDelegate onEndGrantRoleModuleScope1Delegate;
        
        private System.Threading.SendOrPostCallback onGrantRoleModuleScope1CompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRoleModuleScope2Delegate;
        
        private EndOperationDelegate onEndRevokeRoleModuleScope2Delegate;
        
        private System.Threading.SendOrPostCallback onRevokeRoleModuleScope2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRoleModuleScope1Delegate;
        
        private EndOperationDelegate onEndRevokeRoleModuleScope1Delegate;
        
        private System.Threading.SendOrPostCallback onRevokeRoleModuleScope1CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserPermissionItemIdsDelegate;
        
        private EndOperationDelegate onEndGetUserPermissionItemIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserPermissionItemIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserIdsByPermissionItemIdDelegate;
        
        private EndOperationDelegate onEndGetUserIdsByPermissionItemIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserIdsByPermissionItemIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserPermissionsDelegate;
        
        private EndOperationDelegate onEndGrantUserPermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onGrantUserPermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserPermissionByIdDelegate;
        
        private EndOperationDelegate onEndGrantUserPermissionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGrantUserPermissionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserPermissionsDelegate;
        
        private EndOperationDelegate onEndRevokeUserPermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserPermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserPermissionByIdDelegate;
        
        private EndOperationDelegate onEndRevokeUserPermissionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserPermissionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeOrganizeIdsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetScopeOrganizeIdsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeOrganizeIdsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserOrganizeScopeDelegate;
        
        private EndOperationDelegate onEndGrantUserOrganizeScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantUserOrganizeScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserOrganizeScopeDelegate;
        
        private EndOperationDelegate onEndRevokeUserOrganizeScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserOrganizeScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeUserIdsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetScopeUserIdsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeUserIdsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserUserScopeDelegate;
        
        private EndOperationDelegate onEndGrantUserUserScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantUserUserScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserUserScopeDelegate;
        
        private EndOperationDelegate onEndRevokeUserUserScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserUserScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeRoleIdsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetScopeRoleIdsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeRoleIdsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserRoleScopeDelegate;
        
        private EndOperationDelegate onEndGrantUserRoleScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantUserRoleScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserRoleScopeDelegate;
        
        private EndOperationDelegate onEndRevokeUserRoleScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserRoleScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopePermissionItemIdsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetScopePermissionItemIdsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopePermissionItemIdsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantUserPermissionItemScopeDelegate;
        
        private EndOperationDelegate onEndGrantUserPermissionItemScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantUserPermissionItemScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeUserPermissionItemScopeDelegate;
        
        private EndOperationDelegate onEndRevokeUserPermissionItemScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeUserPermissionItemScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearUserPermissionByUserIdDelegate;
        
        private EndOperationDelegate onEndClearUserPermissionByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onClearUserPermissionByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearUserPermissionScopeDelegate;
        
        private EndOperationDelegate onEndClearUserPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onClearUserPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetModuleDTDelegate;
        
        private EndOperationDelegate onEndGetModuleDTDelegate;
        
        private System.Threading.SendOrPostCallback onGetModuleDTCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDTByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetUserDTByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserDTByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserIdsByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetUserIdsByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserIdsByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoleDTByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetRoleDTByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoleDTByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoleIdsByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetRoleIdsByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoleIdsByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetModuleDTByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetModuleDTByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetModuleDTByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPermissionItemDTByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetPermissionItemDTByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetPermissionItemDTByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizeDTByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetOrganizeDTByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizeDTByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrganizeIdsByPermissionScopeDelegate;
        
        private EndOperationDelegate onEndGetOrganizeIdsByPermissionScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrganizeIdsByPermissionScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRolePermissionItemIdsDelegate;
        
        private EndOperationDelegate onEndGetRolePermissionItemIdsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRolePermissionItemIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoleIdsByPermissionItemIdDelegate;
        
        private EndOperationDelegate onEndGetRoleIdsByPermissionItemIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoleIdsByPermissionItemIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRolePermissionsDelegate;
        
        private EndOperationDelegate onEndGrantRolePermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRolePermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRolePermissionDelegate;
        
        private EndOperationDelegate onEndGrantRolePermissionDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRolePermissionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRolePermissionByIdDelegate;
        
        private EndOperationDelegate onEndGrantRolePermissionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRolePermissionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRolePermissionsDelegate;
        
        private EndOperationDelegate onEndRevokeRolePermissionsDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRolePermissionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRolePermissionDelegate;
        
        private EndOperationDelegate onEndRevokeRolePermissionDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRolePermissionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRolePermissionByIdDelegate;
        
        private EndOperationDelegate onEndRevokeRolePermissionByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRolePermissionByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeUserIdsByRoleIdDelegate;
        
        private EndOperationDelegate onEndGetScopeUserIdsByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeUserIdsByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeRoleIdsByRoleIdDelegate;
        
        private EndOperationDelegate onEndGetScopeRoleIdsByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeRoleIdsByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopeOrganizeIdsByRoleIdDelegate;
        
        private EndOperationDelegate onEndGetScopeOrganizeIdsByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopeOrganizeIdsByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRoleUserScopeDelegate;
        
        private EndOperationDelegate onEndGrantRoleUserScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRoleUserScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRoleUserScopeDelegate;
        
        private EndOperationDelegate onEndRevokeRoleUserScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRoleUserScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRoleRoleScopeDelegate;
        
        private EndOperationDelegate onEndGrantRoleRoleScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRoleRoleScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRoleRoleScopeDelegate;
        
        private EndOperationDelegate onEndRevokeRoleRoleScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRoleRoleScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRoleOrganizeScopeDelegate;
        
        private EndOperationDelegate onEndGrantRoleOrganizeScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRoleOrganizeScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRoleOrganizeScopeDelegate;
        
        private EndOperationDelegate onEndRevokeRoleOrganizeScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRoleOrganizeScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScopePermissionItemIdsByRoleIdDelegate;
        
        private EndOperationDelegate onEndGetScopePermissionItemIdsByRoleIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetScopePermissionItemIdsByRoleIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGrantRolePermissionItemScopeDelegate;
        
        private EndOperationDelegate onEndGrantRolePermissionItemScopeDelegate;
        
        private System.Threading.SendOrPostCallback onGrantRolePermissionItemScopeCompletedDelegate;
        
        private BeginOperationDelegate onBeginRevokeRolePermissionItemScopeDelegate;
        
        private EndOperationDelegate onEndRevokeRolePermissionItemScopeDelegate;
        
        private System.Threading.SendOrPostCallback onRevokeRolePermissionItemScopeCompletedDelegate;
        
        public PermissionServiceClient() {
        }
        
        public PermissionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PermissionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PermissionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<IsModuleAuthorizedByUserIdCompletedEventArgs> IsModuleAuthorizedByUserIdCompleted;
        
        public event System.EventHandler<GetPermissionScopeByUserIdCompletedEventArgs> GetPermissionScopeByUserIdCompleted;
        
        public event System.EventHandler<GetResourcePermissionItemIdsCompletedEventArgs> GetResourcePermissionItemIdsCompleted;
        
        public event System.EventHandler<GrantResourcePermissionCompletedEventArgs> GrantResourcePermissionCompleted;
        
        public event System.EventHandler<RevokeResourcePermissionCompletedEventArgs> RevokeResourcePermissionCompleted;
        
        public event System.EventHandler<GetPermissionScopeTargetIdsCompletedEventArgs> GetPermissionScopeTargetIdsCompleted;
        
        public event System.EventHandler<GetPermissionScopeResourceIdsCompletedEventArgs> GetPermissionScopeResourceIdsCompleted;
        
        public event System.EventHandler<GrantPermissionScopeTargetsCompletedEventArgs> GrantPermissionScopeTargetsCompleted;
        
        public event System.EventHandler<GrantPermissionScopeTargetCompletedEventArgs> GrantPermissionScopeTargetCompleted;
        
        public event System.EventHandler<RevokePermissionScopeTargetsCompletedEventArgs> RevokePermissionScopeTargetsCompleted;
        
        public event System.EventHandler<RevokePermissionScopeTargetCompletedEventArgs> RevokePermissionScopeTargetCompleted;
        
        public event System.EventHandler<ClearPermissionScopeTargetCompletedEventArgs> ClearPermissionScopeTargetCompleted;
        
        public event System.EventHandler<GetResourceScopeIdsCompletedEventArgs> GetResourceScopeIdsCompleted;
        
        public event System.EventHandler<GetTreeResourceScopeIdsCompletedEventArgs> GetTreeResourceScopeIdsCompleted;
        
        public event System.EventHandler<GetModuleIdsByUserIdCompletedEventArgs> GetModuleIdsByUserIdCompleted;
        
        public event System.EventHandler<GetModuleDTByUserIdCompletedEventArgs> GetModuleDTByUserIdCompleted;
        
        public event System.EventHandler<GetScopeModuleIdsByUserIdCompletedEventArgs> GetScopeModuleIdsByUserIdCompleted;
        
        public event System.EventHandler<GrantUserModuleScope1CompletedEventArgs> GrantUserModuleScope1Completed;
        
        public event System.EventHandler<GrantUserModuleScope2CompletedEventArgs> GrantUserModuleScope2Completed;
        
        public event System.EventHandler<RevokeUserModuleScope1CompletedEventArgs> RevokeUserModuleScope1Completed;
        
        public event System.EventHandler<RevokeUserModuleScope2CompletedEventArgs> RevokeUserModuleScope2Completed;
        
        public event System.EventHandler<GetScopeModuleIdsByOrganizeIdCompletedEventArgs> GetScopeModuleIdsByOrganizeIdCompleted;
        
        public event System.EventHandler<GrantOrganizeModuleScope2CompletedEventArgs> GrantOrganizeModuleScope2Completed;
        
        public event System.EventHandler<GrantOrganizeModuleScope1CompletedEventArgs> GrantOrganizeModuleScope1Completed;
        
        public event System.EventHandler<RevokeOrganizeModuleScope2CompletedEventArgs> RevokeOrganizeModuleScope2Completed;
        
        public event System.EventHandler<RevokeOrganizeModuleScope1CompletedEventArgs> RevokeOrganizeModuleScope1Completed;
        
        public event System.EventHandler<GetOrganizePermissionItemIdsCompletedEventArgs> GetOrganizePermissionItemIdsCompleted;
        
        public event System.EventHandler<GetOrganizeIdsByPermissionItemIdCompletedEventArgs> GetOrganizeIdsByPermissionItemIdCompleted;
        
        public event System.EventHandler<GrantOrganizePermissionByIdCompletedEventArgs> GrantOrganizePermissionByIdCompleted;
        
        public event System.EventHandler<GrantOrganizePermissionsCompletedEventArgs> GrantOrganizePermissionsCompleted;
        
        public event System.EventHandler<RevokeOrganizePermissionsCompletedEventArgs> RevokeOrganizePermissionsCompleted;
        
        public event System.EventHandler<RevokeOrganizePermissionByIdCompletedEventArgs> RevokeOrganizePermissionByIdCompleted;
        
        public event System.EventHandler<ClearOrganizePermissionCompletedEventArgs> ClearOrganizePermissionCompleted;
        
        public event System.EventHandler<IsInRoleCompletedEventArgs> IsInRoleCompleted;
        
        public event System.EventHandler<IsAuthorizedCompletedEventArgs> IsAuthorizedCompleted;
        
        public event System.EventHandler<IsAuthorizedByUserIdCompletedEventArgs> IsAuthorizedByUserIdCompleted;
        
        public event System.EventHandler<IsAuthorizedByRoleIdCompletedEventArgs> IsAuthorizedByRoleIdCompleted;
        
        public event System.EventHandler<IsAdministratorCompletedEventArgs> IsAdministratorCompleted;
        
        public event System.EventHandler<IsAdministratorByUserIdCompletedEventArgs> IsAdministratorByUserIdCompleted;
        
        public event System.EventHandler<GetPermissionDTCompletedEventArgs> GetPermissionDTCompleted;
        
        public event System.EventHandler<GetPermissionDTByUserIdCompletedEventArgs> GetPermissionDTByUserIdCompleted;
        
        public event System.EventHandler<IsModuleAuthorizedCompletedEventArgs> IsModuleAuthorizedCompleted;
        
        public event System.EventHandler<ClearRolePermissionByRoleIdCompletedEventArgs> ClearRolePermissionByRoleIdCompleted;
        
        public event System.EventHandler<ClearRolePermissionScopeCompletedEventArgs> ClearRolePermissionScopeCompleted;
        
        public event System.EventHandler<GetScopeModuleIdsByRoleIdCompletedEventArgs> GetScopeModuleIdsByRoleIdCompleted;
        
        public event System.EventHandler<GrantRoleModuleScope2CompletedEventArgs> GrantRoleModuleScope2Completed;
        
        public event System.EventHandler<GrantRoleModuleScope1CompletedEventArgs> GrantRoleModuleScope1Completed;
        
        public event System.EventHandler<RevokeRoleModuleScope2CompletedEventArgs> RevokeRoleModuleScope2Completed;
        
        public event System.EventHandler<RevokeRoleModuleScope1CompletedEventArgs> RevokeRoleModuleScope1Completed;
        
        public event System.EventHandler<GetUserPermissionItemIdsCompletedEventArgs> GetUserPermissionItemIdsCompleted;
        
        public event System.EventHandler<GetUserIdsByPermissionItemIdCompletedEventArgs> GetUserIdsByPermissionItemIdCompleted;
        
        public event System.EventHandler<GrantUserPermissionsCompletedEventArgs> GrantUserPermissionsCompleted;
        
        public event System.EventHandler<GrantUserPermissionByIdCompletedEventArgs> GrantUserPermissionByIdCompleted;
        
        public event System.EventHandler<RevokeUserPermissionsCompletedEventArgs> RevokeUserPermissionsCompleted;
        
        public event System.EventHandler<RevokeUserPermissionByIdCompletedEventArgs> RevokeUserPermissionByIdCompleted;
        
        public event System.EventHandler<GetScopeOrganizeIdsByUserIdCompletedEventArgs> GetScopeOrganizeIdsByUserIdCompleted;
        
        public event System.EventHandler<GrantUserOrganizeScopeCompletedEventArgs> GrantUserOrganizeScopeCompleted;
        
        public event System.EventHandler<RevokeUserOrganizeScopeCompletedEventArgs> RevokeUserOrganizeScopeCompleted;
        
        public event System.EventHandler<GetScopeUserIdsByUserIdCompletedEventArgs> GetScopeUserIdsByUserIdCompleted;
        
        public event System.EventHandler<GrantUserUserScopeCompletedEventArgs> GrantUserUserScopeCompleted;
        
        public event System.EventHandler<RevokeUserUserScopeCompletedEventArgs> RevokeUserUserScopeCompleted;
        
        public event System.EventHandler<GetScopeRoleIdsByUserIdCompletedEventArgs> GetScopeRoleIdsByUserIdCompleted;
        
        public event System.EventHandler<GrantUserRoleScopeCompletedEventArgs> GrantUserRoleScopeCompleted;
        
        public event System.EventHandler<RevokeUserRoleScopeCompletedEventArgs> RevokeUserRoleScopeCompleted;
        
        public event System.EventHandler<GetScopePermissionItemIdsByUserIdCompletedEventArgs> GetScopePermissionItemIdsByUserIdCompleted;
        
        public event System.EventHandler<GrantUserPermissionItemScopeCompletedEventArgs> GrantUserPermissionItemScopeCompleted;
        
        public event System.EventHandler<RevokeUserPermissionItemScopeCompletedEventArgs> RevokeUserPermissionItemScopeCompleted;
        
        public event System.EventHandler<ClearUserPermissionByUserIdCompletedEventArgs> ClearUserPermissionByUserIdCompleted;
        
        public event System.EventHandler<ClearUserPermissionScopeCompletedEventArgs> ClearUserPermissionScopeCompleted;
        
        public event System.EventHandler<GetModuleDTCompletedEventArgs> GetModuleDTCompleted;
        
        public event System.EventHandler<GetUserDTByPermissionScopeCompletedEventArgs> GetUserDTByPermissionScopeCompleted;
        
        public event System.EventHandler<GetUserIdsByPermissionScopeCompletedEventArgs> GetUserIdsByPermissionScopeCompleted;
        
        public event System.EventHandler<GetRoleDTByPermissionScopeCompletedEventArgs> GetRoleDTByPermissionScopeCompleted;
        
        public event System.EventHandler<GetRoleIdsByPermissionScopeCompletedEventArgs> GetRoleIdsByPermissionScopeCompleted;
        
        public event System.EventHandler<GetModuleDTByPermissionScopeCompletedEventArgs> GetModuleDTByPermissionScopeCompleted;
        
        public event System.EventHandler<GetPermissionItemDTByPermissionScopeCompletedEventArgs> GetPermissionItemDTByPermissionScopeCompleted;
        
        public event System.EventHandler<GetOrganizeDTByPermissionScopeCompletedEventArgs> GetOrganizeDTByPermissionScopeCompleted;
        
        public event System.EventHandler<GetOrganizeIdsByPermissionScopeCompletedEventArgs> GetOrganizeIdsByPermissionScopeCompleted;
        
        public event System.EventHandler<GetRolePermissionItemIdsCompletedEventArgs> GetRolePermissionItemIdsCompleted;
        
        public event System.EventHandler<GetRoleIdsByPermissionItemIdCompletedEventArgs> GetRoleIdsByPermissionItemIdCompleted;
        
        public event System.EventHandler<GrantRolePermissionsCompletedEventArgs> GrantRolePermissionsCompleted;
        
        public event System.EventHandler<GrantRolePermissionCompletedEventArgs> GrantRolePermissionCompleted;
        
        public event System.EventHandler<GrantRolePermissionByIdCompletedEventArgs> GrantRolePermissionByIdCompleted;
        
        public event System.EventHandler<RevokeRolePermissionsCompletedEventArgs> RevokeRolePermissionsCompleted;
        
        public event System.EventHandler<RevokeRolePermissionCompletedEventArgs> RevokeRolePermissionCompleted;
        
        public event System.EventHandler<RevokeRolePermissionByIdCompletedEventArgs> RevokeRolePermissionByIdCompleted;
        
        public event System.EventHandler<GetScopeUserIdsByRoleIdCompletedEventArgs> GetScopeUserIdsByRoleIdCompleted;
        
        public event System.EventHandler<GetScopeRoleIdsByRoleIdCompletedEventArgs> GetScopeRoleIdsByRoleIdCompleted;
        
        public event System.EventHandler<GetScopeOrganizeIdsByRoleIdCompletedEventArgs> GetScopeOrganizeIdsByRoleIdCompleted;
        
        public event System.EventHandler<GrantRoleUserScopeCompletedEventArgs> GrantRoleUserScopeCompleted;
        
        public event System.EventHandler<RevokeRoleUserScopeCompletedEventArgs> RevokeRoleUserScopeCompleted;
        
        public event System.EventHandler<GrantRoleRoleScopeCompletedEventArgs> GrantRoleRoleScopeCompleted;
        
        public event System.EventHandler<RevokeRoleRoleScopeCompletedEventArgs> RevokeRoleRoleScopeCompleted;
        
        public event System.EventHandler<GrantRoleOrganizeScopeCompletedEventArgs> GrantRoleOrganizeScopeCompleted;
        
        public event System.EventHandler<RevokeRoleOrganizeScopeCompletedEventArgs> RevokeRoleOrganizeScopeCompleted;
        
        public event System.EventHandler<GetScopePermissionItemIdsByRoleIdCompletedEventArgs> GetScopePermissionItemIdsByRoleIdCompleted;
        
        public event System.EventHandler<GrantRolePermissionItemScopeCompletedEventArgs> GrantRolePermissionItemScopeCompleted;
        
        public event System.EventHandler<RevokeRolePermissionItemScopeCompletedEventArgs> RevokeRolePermissionItemScopeCompleted;
        
        public bool IsModuleAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string moduleCode) {
            return base.Channel.IsModuleAuthorizedByUserId(userInfo, userId, moduleCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsModuleAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string moduleCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsModuleAuthorizedByUserId(userInfo, userId, moduleCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsModuleAuthorizedByUserId(System.IAsyncResult result) {
            return base.Channel.EndIsModuleAuthorizedByUserId(result);
        }
        
        private System.IAsyncResult OnBeginIsModuleAuthorizedByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string moduleCode = ((string)(inValues[2]));
            return this.BeginIsModuleAuthorizedByUserId(userInfo, userId, moduleCode, callback, asyncState);
        }
        
        private object[] OnEndIsModuleAuthorizedByUserId(System.IAsyncResult result) {
            bool retVal = this.EndIsModuleAuthorizedByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsModuleAuthorizedByUserIdCompleted(object state) {
            if ((this.IsModuleAuthorizedByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsModuleAuthorizedByUserIdCompleted(this, new IsModuleAuthorizedByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsModuleAuthorizedByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string moduleCode) {
            this.IsModuleAuthorizedByUserIdAsync(userInfo, userId, moduleCode, null);
        }
        
        public void IsModuleAuthorizedByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string moduleCode, object userState) {
            if ((this.onBeginIsModuleAuthorizedByUserIdDelegate == null)) {
                this.onBeginIsModuleAuthorizedByUserIdDelegate = new BeginOperationDelegate(this.OnBeginIsModuleAuthorizedByUserId);
            }
            if ((this.onEndIsModuleAuthorizedByUserIdDelegate == null)) {
                this.onEndIsModuleAuthorizedByUserIdDelegate = new EndOperationDelegate(this.OnEndIsModuleAuthorizedByUserId);
            }
            if ((this.onIsModuleAuthorizedByUserIdCompletedDelegate == null)) {
                this.onIsModuleAuthorizedByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsModuleAuthorizedByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginIsModuleAuthorizedByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        moduleCode}, this.onEndIsModuleAuthorizedByUserIdDelegate, this.onIsModuleAuthorizedByUserIdCompletedDelegate, userState);
        }
        
        public RDIFramework.Utilities.PermissionScope GetPermissionScopeByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetPermissionScopeByUserId(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermissionScopeByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermissionScopeByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public RDIFramework.Utilities.PermissionScope EndGetPermissionScopeByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetPermissionScopeByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetPermissionScopeByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetPermissionScopeByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetPermissionScopeByUserId(System.IAsyncResult result) {
            RDIFramework.Utilities.PermissionScope retVal = this.EndGetPermissionScopeByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionScopeByUserIdCompleted(object state) {
            if ((this.GetPermissionScopeByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionScopeByUserIdCompleted(this, new GetPermissionScopeByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionScopeByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetPermissionScopeByUserIdAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetPermissionScopeByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetPermissionScopeByUserIdDelegate == null)) {
                this.onBeginGetPermissionScopeByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetPermissionScopeByUserId);
            }
            if ((this.onEndGetPermissionScopeByUserIdDelegate == null)) {
                this.onEndGetPermissionScopeByUserIdDelegate = new EndOperationDelegate(this.OnEndGetPermissionScopeByUserId);
            }
            if ((this.onGetPermissionScopeByUserIdCompletedDelegate == null)) {
                this.onGetPermissionScopeByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionScopeByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionScopeByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetPermissionScopeByUserIdDelegate, this.onGetPermissionScopeByUserIdCompletedDelegate, userState);
        }
        
        public string[] GetResourcePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId) {
            return base.Channel.GetResourcePermissionItemIds(userInfo, resourceCategory, resourceId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetResourcePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetResourcePermissionItemIds(userInfo, resourceCategory, resourceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetResourcePermissionItemIds(System.IAsyncResult result) {
            return base.Channel.EndGetResourcePermissionItemIds(result);
        }
        
        private System.IAsyncResult OnBeginGetResourcePermissionItemIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            return this.BeginGetResourcePermissionItemIds(userInfo, resourceCategory, resourceId, callback, asyncState);
        }
        
        private object[] OnEndGetResourcePermissionItemIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetResourcePermissionItemIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetResourcePermissionItemIdsCompleted(object state) {
            if ((this.GetResourcePermissionItemIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetResourcePermissionItemIdsCompleted(this, new GetResourcePermissionItemIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetResourcePermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId) {
            this.GetResourcePermissionItemIdsAsync(userInfo, resourceCategory, resourceId, null);
        }
        
        public void GetResourcePermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, object userState) {
            if ((this.onBeginGetResourcePermissionItemIdsDelegate == null)) {
                this.onBeginGetResourcePermissionItemIdsDelegate = new BeginOperationDelegate(this.OnBeginGetResourcePermissionItemIds);
            }
            if ((this.onEndGetResourcePermissionItemIdsDelegate == null)) {
                this.onEndGetResourcePermissionItemIdsDelegate = new EndOperationDelegate(this.OnEndGetResourcePermissionItemIds);
            }
            if ((this.onGetResourcePermissionItemIdsCompletedDelegate == null)) {
                this.onGetResourcePermissionItemIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetResourcePermissionItemIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetResourcePermissionItemIdsDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId}, this.onEndGetResourcePermissionItemIdsDelegate, this.onGetResourcePermissionItemIdsCompletedDelegate, userState);
        }
        
        public int GrantResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] grantPermissionItemIds) {
            return base.Channel.GrantResourcePermission(userInfo, resourceCategory, resourceId, grantPermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantResourcePermission(userInfo, resourceCategory, resourceId, grantPermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantResourcePermission(System.IAsyncResult result) {
            return base.Channel.EndGrantResourcePermission(result);
        }
        
        private System.IAsyncResult OnBeginGrantResourcePermission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            string[] grantPermissionItemIds = ((string[])(inValues[3]));
            return this.BeginGrantResourcePermission(userInfo, resourceCategory, resourceId, grantPermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndGrantResourcePermission(System.IAsyncResult result) {
            int retVal = this.EndGrantResourcePermission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantResourcePermissionCompleted(object state) {
            if ((this.GrantResourcePermissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantResourcePermissionCompleted(this, new GrantResourcePermissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantResourcePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] grantPermissionItemIds) {
            this.GrantResourcePermissionAsync(userInfo, resourceCategory, resourceId, grantPermissionItemIds, null);
        }
        
        public void GrantResourcePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] grantPermissionItemIds, object userState) {
            if ((this.onBeginGrantResourcePermissionDelegate == null)) {
                this.onBeginGrantResourcePermissionDelegate = new BeginOperationDelegate(this.OnBeginGrantResourcePermission);
            }
            if ((this.onEndGrantResourcePermissionDelegate == null)) {
                this.onEndGrantResourcePermissionDelegate = new EndOperationDelegate(this.OnEndGrantResourcePermission);
            }
            if ((this.onGrantResourcePermissionCompletedDelegate == null)) {
                this.onGrantResourcePermissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantResourcePermissionCompleted);
            }
            base.InvokeAsync(this.onBeginGrantResourcePermissionDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId,
                        grantPermissionItemIds}, this.onEndGrantResourcePermissionDelegate, this.onGrantResourcePermissionCompletedDelegate, userState);
        }
        
        public int RevokeResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] revokePermissionItemIds) {
            return base.Channel.RevokeResourcePermission(userInfo, resourceCategory, resourceId, revokePermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeResourcePermission(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeResourcePermission(userInfo, resourceCategory, resourceId, revokePermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeResourcePermission(System.IAsyncResult result) {
            return base.Channel.EndRevokeResourcePermission(result);
        }
        
        private System.IAsyncResult OnBeginRevokeResourcePermission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            string[] revokePermissionItemIds = ((string[])(inValues[3]));
            return this.BeginRevokeResourcePermission(userInfo, resourceCategory, resourceId, revokePermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeResourcePermission(System.IAsyncResult result) {
            int retVal = this.EndRevokeResourcePermission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeResourcePermissionCompleted(object state) {
            if ((this.RevokeResourcePermissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeResourcePermissionCompleted(this, new RevokeResourcePermissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeResourcePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] revokePermissionItemIds) {
            this.RevokeResourcePermissionAsync(userInfo, resourceCategory, resourceId, revokePermissionItemIds, null);
        }
        
        public void RevokeResourcePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string[] revokePermissionItemIds, object userState) {
            if ((this.onBeginRevokeResourcePermissionDelegate == null)) {
                this.onBeginRevokeResourcePermissionDelegate = new BeginOperationDelegate(this.OnBeginRevokeResourcePermission);
            }
            if ((this.onEndRevokeResourcePermissionDelegate == null)) {
                this.onEndRevokeResourcePermissionDelegate = new EndOperationDelegate(this.OnEndRevokeResourcePermission);
            }
            if ((this.onRevokeResourcePermissionCompletedDelegate == null)) {
                this.onRevokeResourcePermissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeResourcePermissionCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeResourcePermissionDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId,
                        revokePermissionItemIds}, this.onEndRevokeResourcePermissionDelegate, this.onRevokeResourcePermissionCompletedDelegate, userState);
        }
        
        public string[] GetPermissionScopeTargetIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemCode) {
            return base.Channel.GetPermissionScopeTargetIds(userInfo, resourceCategory, resourceId, targetCategory, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermissionScopeTargetIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermissionScopeTargetIds(userInfo, resourceCategory, resourceId, targetCategory, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetPermissionScopeTargetIds(System.IAsyncResult result) {
            return base.Channel.EndGetPermissionScopeTargetIds(result);
        }
        
        private System.IAsyncResult OnBeginGetPermissionScopeTargetIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            string targetCategory = ((string)(inValues[3]));
            string permissionItemCode = ((string)(inValues[4]));
            return this.BeginGetPermissionScopeTargetIds(userInfo, resourceCategory, resourceId, targetCategory, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetPermissionScopeTargetIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetPermissionScopeTargetIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionScopeTargetIdsCompleted(object state) {
            if ((this.GetPermissionScopeTargetIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionScopeTargetIdsCompleted(this, new GetPermissionScopeTargetIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionScopeTargetIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemCode) {
            this.GetPermissionScopeTargetIdsAsync(userInfo, resourceCategory, resourceId, targetCategory, permissionItemCode, null);
        }
        
        public void GetPermissionScopeTargetIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemCode, object userState) {
            if ((this.onBeginGetPermissionScopeTargetIdsDelegate == null)) {
                this.onBeginGetPermissionScopeTargetIdsDelegate = new BeginOperationDelegate(this.OnBeginGetPermissionScopeTargetIds);
            }
            if ((this.onEndGetPermissionScopeTargetIdsDelegate == null)) {
                this.onEndGetPermissionScopeTargetIdsDelegate = new EndOperationDelegate(this.OnEndGetPermissionScopeTargetIds);
            }
            if ((this.onGetPermissionScopeTargetIdsCompletedDelegate == null)) {
                this.onGetPermissionScopeTargetIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionScopeTargetIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionScopeTargetIdsDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId,
                        targetCategory,
                        permissionItemCode}, this.onEndGetPermissionScopeTargetIdsDelegate, this.onGetPermissionScopeTargetIdsCompletedDelegate, userState);
        }
        
        public string[] GetPermissionScopeResourceIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string targetResourceId, string targetResourceCategory, string permissionItemCode) {
            return base.Channel.GetPermissionScopeResourceIds(userInfo, resourceCategory, targetResourceId, targetResourceCategory, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermissionScopeResourceIds(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string targetResourceId, string targetResourceCategory, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermissionScopeResourceIds(userInfo, resourceCategory, targetResourceId, targetResourceCategory, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetPermissionScopeResourceIds(System.IAsyncResult result) {
            return base.Channel.EndGetPermissionScopeResourceIds(result);
        }
        
        private System.IAsyncResult OnBeginGetPermissionScopeResourceIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string targetResourceId = ((string)(inValues[2]));
            string targetResourceCategory = ((string)(inValues[3]));
            string permissionItemCode = ((string)(inValues[4]));
            return this.BeginGetPermissionScopeResourceIds(userInfo, resourceCategory, targetResourceId, targetResourceCategory, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetPermissionScopeResourceIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetPermissionScopeResourceIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionScopeResourceIdsCompleted(object state) {
            if ((this.GetPermissionScopeResourceIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionScopeResourceIdsCompleted(this, new GetPermissionScopeResourceIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionScopeResourceIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string targetResourceId, string targetResourceCategory, string permissionItemCode) {
            this.GetPermissionScopeResourceIdsAsync(userInfo, resourceCategory, targetResourceId, targetResourceCategory, permissionItemCode, null);
        }
        
        public void GetPermissionScopeResourceIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string targetResourceId, string targetResourceCategory, string permissionItemCode, object userState) {
            if ((this.onBeginGetPermissionScopeResourceIdsDelegate == null)) {
                this.onBeginGetPermissionScopeResourceIdsDelegate = new BeginOperationDelegate(this.OnBeginGetPermissionScopeResourceIds);
            }
            if ((this.onEndGetPermissionScopeResourceIdsDelegate == null)) {
                this.onEndGetPermissionScopeResourceIdsDelegate = new EndOperationDelegate(this.OnEndGetPermissionScopeResourceIds);
            }
            if ((this.onGetPermissionScopeResourceIdsCompletedDelegate == null)) {
                this.onGetPermissionScopeResourceIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionScopeResourceIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionScopeResourceIdsDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        targetResourceId,
                        targetResourceCategory,
                        permissionItemCode}, this.onEndGetPermissionScopeResourceIdsDelegate, this.onGetPermissionScopeResourceIdsCompletedDelegate, userState);
        }
        
        public int GrantPermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] grantTargetIds, string permissionItemId) {
            return base.Channel.GrantPermissionScopeTargets(userInfo, resourceCategory, resourceId, targetCategory, grantTargetIds, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantPermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] grantTargetIds, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantPermissionScopeTargets(userInfo, resourceCategory, resourceId, targetCategory, grantTargetIds, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantPermissionScopeTargets(System.IAsyncResult result) {
            return base.Channel.EndGrantPermissionScopeTargets(result);
        }
        
        private System.IAsyncResult OnBeginGrantPermissionScopeTargets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            string targetCategory = ((string)(inValues[3]));
            string[] grantTargetIds = ((string[])(inValues[4]));
            string permissionItemId = ((string)(inValues[5]));
            return this.BeginGrantPermissionScopeTargets(userInfo, resourceCategory, resourceId, targetCategory, grantTargetIds, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGrantPermissionScopeTargets(System.IAsyncResult result) {
            int retVal = this.EndGrantPermissionScopeTargets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantPermissionScopeTargetsCompleted(object state) {
            if ((this.GrantPermissionScopeTargetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantPermissionScopeTargetsCompleted(this, new GrantPermissionScopeTargetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantPermissionScopeTargetsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] grantTargetIds, string permissionItemId) {
            this.GrantPermissionScopeTargetsAsync(userInfo, resourceCategory, resourceId, targetCategory, grantTargetIds, permissionItemId, null);
        }
        
        public void GrantPermissionScopeTargetsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] grantTargetIds, string permissionItemId, object userState) {
            if ((this.onBeginGrantPermissionScopeTargetsDelegate == null)) {
                this.onBeginGrantPermissionScopeTargetsDelegate = new BeginOperationDelegate(this.OnBeginGrantPermissionScopeTargets);
            }
            if ((this.onEndGrantPermissionScopeTargetsDelegate == null)) {
                this.onEndGrantPermissionScopeTargetsDelegate = new EndOperationDelegate(this.OnEndGrantPermissionScopeTargets);
            }
            if ((this.onGrantPermissionScopeTargetsCompletedDelegate == null)) {
                this.onGrantPermissionScopeTargetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantPermissionScopeTargetsCompleted);
            }
            base.InvokeAsync(this.onBeginGrantPermissionScopeTargetsDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId,
                        targetCategory,
                        grantTargetIds,
                        permissionItemId}, this.onEndGrantPermissionScopeTargetsDelegate, this.onGrantPermissionScopeTargetsCompletedDelegate, userState);
        }
        
        public int GrantPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string grantTargetId, string permissionItemId) {
            return base.Channel.GrantPermissionScopeTarget(userInfo, resourceCategory, resourceIds, targetCategory, grantTargetId, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string grantTargetId, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantPermissionScopeTarget(userInfo, resourceCategory, resourceIds, targetCategory, grantTargetId, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantPermissionScopeTarget(System.IAsyncResult result) {
            return base.Channel.EndGrantPermissionScopeTarget(result);
        }
        
        private System.IAsyncResult OnBeginGrantPermissionScopeTarget(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string[] resourceIds = ((string[])(inValues[2]));
            string targetCategory = ((string)(inValues[3]));
            string grantTargetId = ((string)(inValues[4]));
            string permissionItemId = ((string)(inValues[5]));
            return this.BeginGrantPermissionScopeTarget(userInfo, resourceCategory, resourceIds, targetCategory, grantTargetId, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGrantPermissionScopeTarget(System.IAsyncResult result) {
            int retVal = this.EndGrantPermissionScopeTarget(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantPermissionScopeTargetCompleted(object state) {
            if ((this.GrantPermissionScopeTargetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantPermissionScopeTargetCompleted(this, new GrantPermissionScopeTargetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantPermissionScopeTargetAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string grantTargetId, string permissionItemId) {
            this.GrantPermissionScopeTargetAsync(userInfo, resourceCategory, resourceIds, targetCategory, grantTargetId, permissionItemId, null);
        }
        
        public void GrantPermissionScopeTargetAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string grantTargetId, string permissionItemId, object userState) {
            if ((this.onBeginGrantPermissionScopeTargetDelegate == null)) {
                this.onBeginGrantPermissionScopeTargetDelegate = new BeginOperationDelegate(this.OnBeginGrantPermissionScopeTarget);
            }
            if ((this.onEndGrantPermissionScopeTargetDelegate == null)) {
                this.onEndGrantPermissionScopeTargetDelegate = new EndOperationDelegate(this.OnEndGrantPermissionScopeTarget);
            }
            if ((this.onGrantPermissionScopeTargetCompletedDelegate == null)) {
                this.onGrantPermissionScopeTargetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantPermissionScopeTargetCompleted);
            }
            base.InvokeAsync(this.onBeginGrantPermissionScopeTargetDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceIds,
                        targetCategory,
                        grantTargetId,
                        permissionItemId}, this.onEndGrantPermissionScopeTargetDelegate, this.onGrantPermissionScopeTargetCompletedDelegate, userState);
        }
        
        public int RevokePermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] revokeTargetIds, string permissionItemId) {
            return base.Channel.RevokePermissionScopeTargets(userInfo, resourceCategory, resourceId, targetCategory, revokeTargetIds, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokePermissionScopeTargets(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] revokeTargetIds, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokePermissionScopeTargets(userInfo, resourceCategory, resourceId, targetCategory, revokeTargetIds, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokePermissionScopeTargets(System.IAsyncResult result) {
            return base.Channel.EndRevokePermissionScopeTargets(result);
        }
        
        private System.IAsyncResult OnBeginRevokePermissionScopeTargets(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            string targetCategory = ((string)(inValues[3]));
            string[] revokeTargetIds = ((string[])(inValues[4]));
            string permissionItemId = ((string)(inValues[5]));
            return this.BeginRevokePermissionScopeTargets(userInfo, resourceCategory, resourceId, targetCategory, revokeTargetIds, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndRevokePermissionScopeTargets(System.IAsyncResult result) {
            int retVal = this.EndRevokePermissionScopeTargets(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokePermissionScopeTargetsCompleted(object state) {
            if ((this.RevokePermissionScopeTargetsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokePermissionScopeTargetsCompleted(this, new RevokePermissionScopeTargetsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokePermissionScopeTargetsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] revokeTargetIds, string permissionItemId) {
            this.RevokePermissionScopeTargetsAsync(userInfo, resourceCategory, resourceId, targetCategory, revokeTargetIds, permissionItemId, null);
        }
        
        public void RevokePermissionScopeTargetsAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string[] revokeTargetIds, string permissionItemId, object userState) {
            if ((this.onBeginRevokePermissionScopeTargetsDelegate == null)) {
                this.onBeginRevokePermissionScopeTargetsDelegate = new BeginOperationDelegate(this.OnBeginRevokePermissionScopeTargets);
            }
            if ((this.onEndRevokePermissionScopeTargetsDelegate == null)) {
                this.onEndRevokePermissionScopeTargetsDelegate = new EndOperationDelegate(this.OnEndRevokePermissionScopeTargets);
            }
            if ((this.onRevokePermissionScopeTargetsCompletedDelegate == null)) {
                this.onRevokePermissionScopeTargetsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokePermissionScopeTargetsCompleted);
            }
            base.InvokeAsync(this.onBeginRevokePermissionScopeTargetsDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId,
                        targetCategory,
                        revokeTargetIds,
                        permissionItemId}, this.onEndRevokePermissionScopeTargetsDelegate, this.onRevokePermissionScopeTargetsCompletedDelegate, userState);
        }
        
        public int RevokePermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string revokeTargetId, string permissionItemId) {
            return base.Channel.RevokePermissionScopeTarget(userInfo, resourceCategory, resourceIds, targetCategory, revokeTargetId, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokePermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string revokeTargetId, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokePermissionScopeTarget(userInfo, resourceCategory, resourceIds, targetCategory, revokeTargetId, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokePermissionScopeTarget(System.IAsyncResult result) {
            return base.Channel.EndRevokePermissionScopeTarget(result);
        }
        
        private System.IAsyncResult OnBeginRevokePermissionScopeTarget(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string[] resourceIds = ((string[])(inValues[2]));
            string targetCategory = ((string)(inValues[3]));
            string revokeTargetId = ((string)(inValues[4]));
            string permissionItemId = ((string)(inValues[5]));
            return this.BeginRevokePermissionScopeTarget(userInfo, resourceCategory, resourceIds, targetCategory, revokeTargetId, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndRevokePermissionScopeTarget(System.IAsyncResult result) {
            int retVal = this.EndRevokePermissionScopeTarget(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokePermissionScopeTargetCompleted(object state) {
            if ((this.RevokePermissionScopeTargetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokePermissionScopeTargetCompleted(this, new RevokePermissionScopeTargetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokePermissionScopeTargetAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string revokeTargetId, string permissionItemId) {
            this.RevokePermissionScopeTargetAsync(userInfo, resourceCategory, resourceIds, targetCategory, revokeTargetId, permissionItemId, null);
        }
        
        public void RevokePermissionScopeTargetAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string[] resourceIds, string targetCategory, string revokeTargetId, string permissionItemId, object userState) {
            if ((this.onBeginRevokePermissionScopeTargetDelegate == null)) {
                this.onBeginRevokePermissionScopeTargetDelegate = new BeginOperationDelegate(this.OnBeginRevokePermissionScopeTarget);
            }
            if ((this.onEndRevokePermissionScopeTargetDelegate == null)) {
                this.onEndRevokePermissionScopeTargetDelegate = new EndOperationDelegate(this.OnEndRevokePermissionScopeTarget);
            }
            if ((this.onRevokePermissionScopeTargetCompletedDelegate == null)) {
                this.onRevokePermissionScopeTargetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokePermissionScopeTargetCompleted);
            }
            base.InvokeAsync(this.onBeginRevokePermissionScopeTargetDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceIds,
                        targetCategory,
                        revokeTargetId,
                        permissionItemId}, this.onEndRevokePermissionScopeTargetDelegate, this.onRevokePermissionScopeTargetCompletedDelegate, userState);
        }
        
        public int ClearPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemId) {
            return base.Channel.ClearPermissionScopeTarget(userInfo, resourceCategory, resourceId, targetCategory, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearPermissionScopeTarget(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearPermissionScopeTarget(userInfo, resourceCategory, resourceId, targetCategory, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndClearPermissionScopeTarget(System.IAsyncResult result) {
            return base.Channel.EndClearPermissionScopeTarget(result);
        }
        
        private System.IAsyncResult OnBeginClearPermissionScopeTarget(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string resourceCategory = ((string)(inValues[1]));
            string resourceId = ((string)(inValues[2]));
            string targetCategory = ((string)(inValues[3]));
            string permissionItemId = ((string)(inValues[4]));
            return this.BeginClearPermissionScopeTarget(userInfo, resourceCategory, resourceId, targetCategory, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndClearPermissionScopeTarget(System.IAsyncResult result) {
            int retVal = this.EndClearPermissionScopeTarget(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearPermissionScopeTargetCompleted(object state) {
            if ((this.ClearPermissionScopeTargetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearPermissionScopeTargetCompleted(this, new ClearPermissionScopeTargetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearPermissionScopeTargetAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemId) {
            this.ClearPermissionScopeTargetAsync(userInfo, resourceCategory, resourceId, targetCategory, permissionItemId, null);
        }
        
        public void ClearPermissionScopeTargetAsync(RDIFramework.Utilities.UserInfo userInfo, string resourceCategory, string resourceId, string targetCategory, string permissionItemId, object userState) {
            if ((this.onBeginClearPermissionScopeTargetDelegate == null)) {
                this.onBeginClearPermissionScopeTargetDelegate = new BeginOperationDelegate(this.OnBeginClearPermissionScopeTarget);
            }
            if ((this.onEndClearPermissionScopeTargetDelegate == null)) {
                this.onEndClearPermissionScopeTargetDelegate = new EndOperationDelegate(this.OnEndClearPermissionScopeTarget);
            }
            if ((this.onClearPermissionScopeTargetCompletedDelegate == null)) {
                this.onClearPermissionScopeTargetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearPermissionScopeTargetCompleted);
            }
            base.InvokeAsync(this.onBeginClearPermissionScopeTargetDelegate, new object[] {
                        userInfo,
                        resourceCategory,
                        resourceId,
                        targetCategory,
                        permissionItemId}, this.onEndClearPermissionScopeTargetDelegate, this.onClearPermissionScopeTargetCompletedDelegate, userState);
        }
        
        public string[] GetResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode) {
            return base.Channel.GetResourceScopeIds(userInfo, userId, targetCategory, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetResourceScopeIds(userInfo, userId, targetCategory, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetResourceScopeIds(System.IAsyncResult result) {
            return base.Channel.EndGetResourceScopeIds(result);
        }
        
        private System.IAsyncResult OnBeginGetResourceScopeIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string targetCategory = ((string)(inValues[2]));
            string permissionItemCode = ((string)(inValues[3]));
            return this.BeginGetResourceScopeIds(userInfo, userId, targetCategory, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetResourceScopeIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetResourceScopeIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetResourceScopeIdsCompleted(object state) {
            if ((this.GetResourceScopeIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetResourceScopeIdsCompleted(this, new GetResourceScopeIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetResourceScopeIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode) {
            this.GetResourceScopeIdsAsync(userInfo, userId, targetCategory, permissionItemCode, null);
        }
        
        public void GetResourceScopeIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, object userState) {
            if ((this.onBeginGetResourceScopeIdsDelegate == null)) {
                this.onBeginGetResourceScopeIdsDelegate = new BeginOperationDelegate(this.OnBeginGetResourceScopeIds);
            }
            if ((this.onEndGetResourceScopeIdsDelegate == null)) {
                this.onEndGetResourceScopeIdsDelegate = new EndOperationDelegate(this.OnEndGetResourceScopeIds);
            }
            if ((this.onGetResourceScopeIdsCompletedDelegate == null)) {
                this.onGetResourceScopeIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetResourceScopeIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetResourceScopeIdsDelegate, new object[] {
                        userInfo,
                        userId,
                        targetCategory,
                        permissionItemCode}, this.onEndGetResourceScopeIdsDelegate, this.onGetResourceScopeIdsCompletedDelegate, userState);
        }
        
        public string[] GetTreeResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, bool childrens) {
            return base.Channel.GetTreeResourceScopeIds(userInfo, userId, targetCategory, permissionItemCode, childrens);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTreeResourceScopeIds(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, bool childrens, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTreeResourceScopeIds(userInfo, userId, targetCategory, permissionItemCode, childrens, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetTreeResourceScopeIds(System.IAsyncResult result) {
            return base.Channel.EndGetTreeResourceScopeIds(result);
        }
        
        private System.IAsyncResult OnBeginGetTreeResourceScopeIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string targetCategory = ((string)(inValues[2]));
            string permissionItemCode = ((string)(inValues[3]));
            bool childrens = ((bool)(inValues[4]));
            return this.BeginGetTreeResourceScopeIds(userInfo, userId, targetCategory, permissionItemCode, childrens, callback, asyncState);
        }
        
        private object[] OnEndGetTreeResourceScopeIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetTreeResourceScopeIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTreeResourceScopeIdsCompleted(object state) {
            if ((this.GetTreeResourceScopeIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTreeResourceScopeIdsCompleted(this, new GetTreeResourceScopeIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTreeResourceScopeIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, bool childrens) {
            this.GetTreeResourceScopeIdsAsync(userInfo, userId, targetCategory, permissionItemCode, childrens, null);
        }
        
        public void GetTreeResourceScopeIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string targetCategory, string permissionItemCode, bool childrens, object userState) {
            if ((this.onBeginGetTreeResourceScopeIdsDelegate == null)) {
                this.onBeginGetTreeResourceScopeIdsDelegate = new BeginOperationDelegate(this.OnBeginGetTreeResourceScopeIds);
            }
            if ((this.onEndGetTreeResourceScopeIdsDelegate == null)) {
                this.onEndGetTreeResourceScopeIdsDelegate = new EndOperationDelegate(this.OnEndGetTreeResourceScopeIds);
            }
            if ((this.onGetTreeResourceScopeIdsCompletedDelegate == null)) {
                this.onGetTreeResourceScopeIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTreeResourceScopeIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTreeResourceScopeIdsDelegate, new object[] {
                        userInfo,
                        userId,
                        targetCategory,
                        permissionItemCode,
                        childrens}, this.onEndGetTreeResourceScopeIdsDelegate, this.onGetTreeResourceScopeIdsCompletedDelegate, userState);
        }
        
        public string[] GetModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            return base.Channel.GetModuleIdsByUserId(userInfo, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetModuleIdsByUserId(userInfo, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetModuleIdsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetModuleIdsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetModuleIdsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            return this.BeginGetModuleIdsByUserId(userInfo, userId, callback, asyncState);
        }
        
        private object[] OnEndGetModuleIdsByUserId(System.IAsyncResult result) {
            string[] retVal = this.EndGetModuleIdsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetModuleIdsByUserIdCompleted(object state) {
            if ((this.GetModuleIdsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetModuleIdsByUserIdCompleted(this, new GetModuleIdsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetModuleIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            this.GetModuleIdsByUserIdAsync(userInfo, userId, null);
        }
        
        public void GetModuleIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, object userState) {
            if ((this.onBeginGetModuleIdsByUserIdDelegate == null)) {
                this.onBeginGetModuleIdsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetModuleIdsByUserId);
            }
            if ((this.onEndGetModuleIdsByUserIdDelegate == null)) {
                this.onEndGetModuleIdsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetModuleIdsByUserId);
            }
            if ((this.onGetModuleIdsByUserIdCompletedDelegate == null)) {
                this.onGetModuleIdsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetModuleIdsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetModuleIdsByUserIdDelegate, new object[] {
                        userInfo,
                        userId}, this.onEndGetModuleIdsByUserIdDelegate, this.onGetModuleIdsByUserIdCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetModuleDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            return base.Channel.GetModuleDTByUserId(userInfo, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetModuleDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetModuleDTByUserId(userInfo, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetModuleDTByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetModuleDTByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetModuleDTByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            return this.BeginGetModuleDTByUserId(userInfo, userId, callback, asyncState);
        }
        
        private object[] OnEndGetModuleDTByUserId(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetModuleDTByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetModuleDTByUserIdCompleted(object state) {
            if ((this.GetModuleDTByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetModuleDTByUserIdCompleted(this, new GetModuleDTByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetModuleDTByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            this.GetModuleDTByUserIdAsync(userInfo, userId, null);
        }
        
        public void GetModuleDTByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, object userState) {
            if ((this.onBeginGetModuleDTByUserIdDelegate == null)) {
                this.onBeginGetModuleDTByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetModuleDTByUserId);
            }
            if ((this.onEndGetModuleDTByUserIdDelegate == null)) {
                this.onEndGetModuleDTByUserIdDelegate = new EndOperationDelegate(this.OnEndGetModuleDTByUserId);
            }
            if ((this.onGetModuleDTByUserIdCompletedDelegate == null)) {
                this.onGetModuleDTByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetModuleDTByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetModuleDTByUserIdDelegate, new object[] {
                        userInfo,
                        userId}, this.onEndGetModuleDTByUserIdDelegate, this.onGetModuleDTByUserIdCompletedDelegate, userState);
        }
        
        public string[] GetScopeModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetScopeModuleIdsByUserId(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeModuleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeModuleIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeModuleIdsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeModuleIdsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeModuleIdsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeModuleIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeModuleIdsByUserId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeModuleIdsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeModuleIdsByUserIdCompleted(object state) {
            if ((this.GetScopeModuleIdsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeModuleIdsByUserIdCompleted(this, new GetScopeModuleIdsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeModuleIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetScopeModuleIdsByUserIdAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetScopeModuleIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeModuleIdsByUserIdDelegate == null)) {
                this.onBeginGetScopeModuleIdsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeModuleIdsByUserId);
            }
            if ((this.onEndGetScopeModuleIdsByUserIdDelegate == null)) {
                this.onEndGetScopeModuleIdsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetScopeModuleIdsByUserId);
            }
            if ((this.onGetScopeModuleIdsByUserIdCompletedDelegate == null)) {
                this.onGetScopeModuleIdsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeModuleIdsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeModuleIdsByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetScopeModuleIdsByUserIdDelegate, this.onGetScopeModuleIdsByUserIdCompletedDelegate, userState);
        }
        
        public string GrantUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string grantModuleId) {
            return base.Channel.GrantUserModuleScope1(userInfo, userId, permissionScopeItemCode, grantModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string grantModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserModuleScope1(userInfo, userId, permissionScopeItemCode, grantModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantUserModuleScope1(System.IAsyncResult result) {
            return base.Channel.EndGrantUserModuleScope1(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserModuleScope1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionScopeItemCode = ((string)(inValues[2]));
            string grantModuleId = ((string)(inValues[3]));
            return this.BeginGrantUserModuleScope1(userInfo, userId, permissionScopeItemCode, grantModuleId, callback, asyncState);
        }
        
        private object[] OnEndGrantUserModuleScope1(System.IAsyncResult result) {
            string retVal = this.EndGrantUserModuleScope1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserModuleScope1Completed(object state) {
            if ((this.GrantUserModuleScope1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserModuleScope1Completed(this, new GrantUserModuleScope1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string grantModuleId) {
            this.GrantUserModuleScope1Async(userInfo, userId, permissionScopeItemCode, grantModuleId, null);
        }
        
        public void GrantUserModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string grantModuleId, object userState) {
            if ((this.onBeginGrantUserModuleScope1Delegate == null)) {
                this.onBeginGrantUserModuleScope1Delegate = new BeginOperationDelegate(this.OnBeginGrantUserModuleScope1);
            }
            if ((this.onEndGrantUserModuleScope1Delegate == null)) {
                this.onEndGrantUserModuleScope1Delegate = new EndOperationDelegate(this.OnEndGrantUserModuleScope1);
            }
            if ((this.onGrantUserModuleScope1CompletedDelegate == null)) {
                this.onGrantUserModuleScope1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserModuleScope1Completed);
            }
            base.InvokeAsync(this.onBeginGrantUserModuleScope1Delegate, new object[] {
                        userInfo,
                        userId,
                        permissionScopeItemCode,
                        grantModuleId}, this.onEndGrantUserModuleScope1Delegate, this.onGrantUserModuleScope1CompletedDelegate, userState);
        }
        
        public int GrantUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] grantModuleIds) {
            return base.Channel.GrantUserModuleScope2(userInfo, userId, permissionScopeItemCode, grantModuleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] grantModuleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserModuleScope2(userInfo, userId, permissionScopeItemCode, grantModuleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantUserModuleScope2(System.IAsyncResult result) {
            return base.Channel.EndGrantUserModuleScope2(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserModuleScope2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionScopeItemCode = ((string)(inValues[2]));
            string[] grantModuleIds = ((string[])(inValues[3]));
            return this.BeginGrantUserModuleScope2(userInfo, userId, permissionScopeItemCode, grantModuleIds, callback, asyncState);
        }
        
        private object[] OnEndGrantUserModuleScope2(System.IAsyncResult result) {
            int retVal = this.EndGrantUserModuleScope2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserModuleScope2Completed(object state) {
            if ((this.GrantUserModuleScope2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserModuleScope2Completed(this, new GrantUserModuleScope2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] grantModuleIds) {
            this.GrantUserModuleScope2Async(userInfo, userId, permissionScopeItemCode, grantModuleIds, null);
        }
        
        public void GrantUserModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] grantModuleIds, object userState) {
            if ((this.onBeginGrantUserModuleScope2Delegate == null)) {
                this.onBeginGrantUserModuleScope2Delegate = new BeginOperationDelegate(this.OnBeginGrantUserModuleScope2);
            }
            if ((this.onEndGrantUserModuleScope2Delegate == null)) {
                this.onEndGrantUserModuleScope2Delegate = new EndOperationDelegate(this.OnEndGrantUserModuleScope2);
            }
            if ((this.onGrantUserModuleScope2CompletedDelegate == null)) {
                this.onGrantUserModuleScope2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserModuleScope2Completed);
            }
            base.InvokeAsync(this.onBeginGrantUserModuleScope2Delegate, new object[] {
                        userInfo,
                        userId,
                        permissionScopeItemCode,
                        grantModuleIds}, this.onEndGrantUserModuleScope2Delegate, this.onGrantUserModuleScope2CompletedDelegate, userState);
        }
        
        public int RevokeUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string revokeModuleId) {
            return base.Channel.RevokeUserModuleScope1(userInfo, userId, permissionScopeItemCode, revokeModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string revokeModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserModuleScope1(userInfo, userId, permissionScopeItemCode, revokeModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserModuleScope1(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserModuleScope1(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserModuleScope1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionScopeItemCode = ((string)(inValues[2]));
            string revokeModuleId = ((string)(inValues[3]));
            return this.BeginRevokeUserModuleScope1(userInfo, userId, permissionScopeItemCode, revokeModuleId, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserModuleScope1(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserModuleScope1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserModuleScope1Completed(object state) {
            if ((this.RevokeUserModuleScope1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserModuleScope1Completed(this, new RevokeUserModuleScope1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string revokeModuleId) {
            this.RevokeUserModuleScope1Async(userInfo, userId, permissionScopeItemCode, revokeModuleId, null);
        }
        
        public void RevokeUserModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string revokeModuleId, object userState) {
            if ((this.onBeginRevokeUserModuleScope1Delegate == null)) {
                this.onBeginRevokeUserModuleScope1Delegate = new BeginOperationDelegate(this.OnBeginRevokeUserModuleScope1);
            }
            if ((this.onEndRevokeUserModuleScope1Delegate == null)) {
                this.onEndRevokeUserModuleScope1Delegate = new EndOperationDelegate(this.OnEndRevokeUserModuleScope1);
            }
            if ((this.onRevokeUserModuleScope1CompletedDelegate == null)) {
                this.onRevokeUserModuleScope1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserModuleScope1Completed);
            }
            base.InvokeAsync(this.onBeginRevokeUserModuleScope1Delegate, new object[] {
                        userInfo,
                        userId,
                        permissionScopeItemCode,
                        revokeModuleId}, this.onEndRevokeUserModuleScope1Delegate, this.onRevokeUserModuleScope1CompletedDelegate, userState);
        }
        
        public int RevokeUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] revokeModuleIds) {
            return base.Channel.RevokeUserModuleScope2(userInfo, userId, permissionScopeItemCode, revokeModuleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] revokeModuleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserModuleScope2(userInfo, userId, permissionScopeItemCode, revokeModuleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserModuleScope2(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserModuleScope2(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserModuleScope2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionScopeItemCode = ((string)(inValues[2]));
            string[] revokeModuleIds = ((string[])(inValues[3]));
            return this.BeginRevokeUserModuleScope2(userInfo, userId, permissionScopeItemCode, revokeModuleIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserModuleScope2(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserModuleScope2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserModuleScope2Completed(object state) {
            if ((this.RevokeUserModuleScope2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserModuleScope2Completed(this, new RevokeUserModuleScope2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] revokeModuleIds) {
            this.RevokeUserModuleScope2Async(userInfo, userId, permissionScopeItemCode, revokeModuleIds, null);
        }
        
        public void RevokeUserModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionScopeItemCode, string[] revokeModuleIds, object userState) {
            if ((this.onBeginRevokeUserModuleScope2Delegate == null)) {
                this.onBeginRevokeUserModuleScope2Delegate = new BeginOperationDelegate(this.OnBeginRevokeUserModuleScope2);
            }
            if ((this.onEndRevokeUserModuleScope2Delegate == null)) {
                this.onEndRevokeUserModuleScope2Delegate = new EndOperationDelegate(this.OnEndRevokeUserModuleScope2);
            }
            if ((this.onRevokeUserModuleScope2CompletedDelegate == null)) {
                this.onRevokeUserModuleScope2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserModuleScope2Completed);
            }
            base.InvokeAsync(this.onBeginRevokeUserModuleScope2Delegate, new object[] {
                        userInfo,
                        userId,
                        permissionScopeItemCode,
                        revokeModuleIds}, this.onEndRevokeUserModuleScope2Delegate, this.onRevokeUserModuleScope2CompletedDelegate, userState);
        }
        
        public string[] GetScopeModuleIdsByOrganizeId(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode) {
            return base.Channel.GetScopeModuleIdsByOrganizeId(userInfo, organizeId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeModuleIdsByOrganizeId(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeModuleIdsByOrganizeId(userInfo, organizeId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeModuleIdsByOrganizeId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeModuleIdsByOrganizeId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeModuleIdsByOrganizeId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeModuleIdsByOrganizeId(userInfo, organizeId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeModuleIdsByOrganizeId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeModuleIdsByOrganizeId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeModuleIdsByOrganizeIdCompleted(object state) {
            if ((this.GetScopeModuleIdsByOrganizeIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeModuleIdsByOrganizeIdCompleted(this, new GetScopeModuleIdsByOrganizeIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeModuleIdsByOrganizeIdAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode) {
            this.GetScopeModuleIdsByOrganizeIdAsync(userInfo, organizeId, permissionItemCode, null);
        }
        
        public void GetScopeModuleIdsByOrganizeIdAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeModuleIdsByOrganizeIdDelegate == null)) {
                this.onBeginGetScopeModuleIdsByOrganizeIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeModuleIdsByOrganizeId);
            }
            if ((this.onEndGetScopeModuleIdsByOrganizeIdDelegate == null)) {
                this.onEndGetScopeModuleIdsByOrganizeIdDelegate = new EndOperationDelegate(this.OnEndGetScopeModuleIdsByOrganizeId);
            }
            if ((this.onGetScopeModuleIdsByOrganizeIdCompletedDelegate == null)) {
                this.onGetScopeModuleIdsByOrganizeIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeModuleIdsByOrganizeIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeModuleIdsByOrganizeIdDelegate, new object[] {
                        userInfo,
                        organizeId,
                        permissionItemCode}, this.onEndGetScopeModuleIdsByOrganizeIdDelegate, this.onGetScopeModuleIdsByOrganizeIdCompletedDelegate, userState);
        }
        
        public int GrantOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] grantModuleIds) {
            return base.Channel.GrantOrganizeModuleScope2(userInfo, organizeId, permissionItemCode, grantModuleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] grantModuleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantOrganizeModuleScope2(userInfo, organizeId, permissionItemCode, grantModuleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantOrganizeModuleScope2(System.IAsyncResult result) {
            return base.Channel.EndGrantOrganizeModuleScope2(result);
        }
        
        private System.IAsyncResult OnBeginGrantOrganizeModuleScope2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantModuleIds = ((string[])(inValues[3]));
            return this.BeginGrantOrganizeModuleScope2(userInfo, organizeId, permissionItemCode, grantModuleIds, callback, asyncState);
        }
        
        private object[] OnEndGrantOrganizeModuleScope2(System.IAsyncResult result) {
            int retVal = this.EndGrantOrganizeModuleScope2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantOrganizeModuleScope2Completed(object state) {
            if ((this.GrantOrganizeModuleScope2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantOrganizeModuleScope2Completed(this, new GrantOrganizeModuleScope2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantOrganizeModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] grantModuleIds) {
            this.GrantOrganizeModuleScope2Async(userInfo, organizeId, permissionItemCode, grantModuleIds, null);
        }
        
        public void GrantOrganizeModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] grantModuleIds, object userState) {
            if ((this.onBeginGrantOrganizeModuleScope2Delegate == null)) {
                this.onBeginGrantOrganizeModuleScope2Delegate = new BeginOperationDelegate(this.OnBeginGrantOrganizeModuleScope2);
            }
            if ((this.onEndGrantOrganizeModuleScope2Delegate == null)) {
                this.onEndGrantOrganizeModuleScope2Delegate = new EndOperationDelegate(this.OnEndGrantOrganizeModuleScope2);
            }
            if ((this.onGrantOrganizeModuleScope2CompletedDelegate == null)) {
                this.onGrantOrganizeModuleScope2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantOrganizeModuleScope2Completed);
            }
            base.InvokeAsync(this.onBeginGrantOrganizeModuleScope2Delegate, new object[] {
                        userInfo,
                        organizeId,
                        permissionItemCode,
                        grantModuleIds}, this.onEndGrantOrganizeModuleScope2Delegate, this.onGrantOrganizeModuleScope2CompletedDelegate, userState);
        }
        
        public string GrantOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string grantModuleId) {
            return base.Channel.GrantOrganizeModuleScope1(userInfo, organizeId, permissionItemCode, grantModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string grantModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantOrganizeModuleScope1(userInfo, organizeId, permissionItemCode, grantModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantOrganizeModuleScope1(System.IAsyncResult result) {
            return base.Channel.EndGrantOrganizeModuleScope1(result);
        }
        
        private System.IAsyncResult OnBeginGrantOrganizeModuleScope1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string grantModuleId = ((string)(inValues[3]));
            return this.BeginGrantOrganizeModuleScope1(userInfo, organizeId, permissionItemCode, grantModuleId, callback, asyncState);
        }
        
        private object[] OnEndGrantOrganizeModuleScope1(System.IAsyncResult result) {
            string retVal = this.EndGrantOrganizeModuleScope1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantOrganizeModuleScope1Completed(object state) {
            if ((this.GrantOrganizeModuleScope1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantOrganizeModuleScope1Completed(this, new GrantOrganizeModuleScope1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantOrganizeModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string grantModuleId) {
            this.GrantOrganizeModuleScope1Async(userInfo, organizeId, permissionItemCode, grantModuleId, null);
        }
        
        public void GrantOrganizeModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string grantModuleId, object userState) {
            if ((this.onBeginGrantOrganizeModuleScope1Delegate == null)) {
                this.onBeginGrantOrganizeModuleScope1Delegate = new BeginOperationDelegate(this.OnBeginGrantOrganizeModuleScope1);
            }
            if ((this.onEndGrantOrganizeModuleScope1Delegate == null)) {
                this.onEndGrantOrganizeModuleScope1Delegate = new EndOperationDelegate(this.OnEndGrantOrganizeModuleScope1);
            }
            if ((this.onGrantOrganizeModuleScope1CompletedDelegate == null)) {
                this.onGrantOrganizeModuleScope1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantOrganizeModuleScope1Completed);
            }
            base.InvokeAsync(this.onBeginGrantOrganizeModuleScope1Delegate, new object[] {
                        userInfo,
                        organizeId,
                        permissionItemCode,
                        grantModuleId}, this.onEndGrantOrganizeModuleScope1Delegate, this.onGrantOrganizeModuleScope1CompletedDelegate, userState);
        }
        
        public int RevokeOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] revokeModuleIds) {
            return base.Channel.RevokeOrganizeModuleScope2(userInfo, organizeId, permissionItemCode, revokeModuleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeOrganizeModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] revokeModuleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeOrganizeModuleScope2(userInfo, organizeId, permissionItemCode, revokeModuleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeOrganizeModuleScope2(System.IAsyncResult result) {
            return base.Channel.EndRevokeOrganizeModuleScope2(result);
        }
        
        private System.IAsyncResult OnBeginRevokeOrganizeModuleScope2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeModuleIds = ((string[])(inValues[3]));
            return this.BeginRevokeOrganizeModuleScope2(userInfo, organizeId, permissionItemCode, revokeModuleIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeOrganizeModuleScope2(System.IAsyncResult result) {
            int retVal = this.EndRevokeOrganizeModuleScope2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeOrganizeModuleScope2Completed(object state) {
            if ((this.RevokeOrganizeModuleScope2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeOrganizeModuleScope2Completed(this, new RevokeOrganizeModuleScope2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeOrganizeModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] revokeModuleIds) {
            this.RevokeOrganizeModuleScope2Async(userInfo, organizeId, permissionItemCode, revokeModuleIds, null);
        }
        
        public void RevokeOrganizeModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string[] revokeModuleIds, object userState) {
            if ((this.onBeginRevokeOrganizeModuleScope2Delegate == null)) {
                this.onBeginRevokeOrganizeModuleScope2Delegate = new BeginOperationDelegate(this.OnBeginRevokeOrganizeModuleScope2);
            }
            if ((this.onEndRevokeOrganizeModuleScope2Delegate == null)) {
                this.onEndRevokeOrganizeModuleScope2Delegate = new EndOperationDelegate(this.OnEndRevokeOrganizeModuleScope2);
            }
            if ((this.onRevokeOrganizeModuleScope2CompletedDelegate == null)) {
                this.onRevokeOrganizeModuleScope2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeOrganizeModuleScope2Completed);
            }
            base.InvokeAsync(this.onBeginRevokeOrganizeModuleScope2Delegate, new object[] {
                        userInfo,
                        organizeId,
                        permissionItemCode,
                        revokeModuleIds}, this.onEndRevokeOrganizeModuleScope2Delegate, this.onRevokeOrganizeModuleScope2CompletedDelegate, userState);
        }
        
        public int RevokeOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string revokeModuleId) {
            return base.Channel.RevokeOrganizeModuleScope1(userInfo, organizeId, permissionItemCode, revokeModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeOrganizeModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string revokeModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeOrganizeModuleScope1(userInfo, organizeId, permissionItemCode, revokeModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeOrganizeModuleScope1(System.IAsyncResult result) {
            return base.Channel.EndRevokeOrganizeModuleScope1(result);
        }
        
        private System.IAsyncResult OnBeginRevokeOrganizeModuleScope1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string revokeModuleId = ((string)(inValues[3]));
            return this.BeginRevokeOrganizeModuleScope1(userInfo, organizeId, permissionItemCode, revokeModuleId, callback, asyncState);
        }
        
        private object[] OnEndRevokeOrganizeModuleScope1(System.IAsyncResult result) {
            int retVal = this.EndRevokeOrganizeModuleScope1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeOrganizeModuleScope1Completed(object state) {
            if ((this.RevokeOrganizeModuleScope1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeOrganizeModuleScope1Completed(this, new RevokeOrganizeModuleScope1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeOrganizeModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string revokeModuleId) {
            this.RevokeOrganizeModuleScope1Async(userInfo, organizeId, permissionItemCode, revokeModuleId, null);
        }
        
        public void RevokeOrganizeModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string permissionItemCode, string revokeModuleId, object userState) {
            if ((this.onBeginRevokeOrganizeModuleScope1Delegate == null)) {
                this.onBeginRevokeOrganizeModuleScope1Delegate = new BeginOperationDelegate(this.OnBeginRevokeOrganizeModuleScope1);
            }
            if ((this.onEndRevokeOrganizeModuleScope1Delegate == null)) {
                this.onEndRevokeOrganizeModuleScope1Delegate = new EndOperationDelegate(this.OnEndRevokeOrganizeModuleScope1);
            }
            if ((this.onRevokeOrganizeModuleScope1CompletedDelegate == null)) {
                this.onRevokeOrganizeModuleScope1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeOrganizeModuleScope1Completed);
            }
            base.InvokeAsync(this.onBeginRevokeOrganizeModuleScope1Delegate, new object[] {
                        userInfo,
                        organizeId,
                        permissionItemCode,
                        revokeModuleId}, this.onEndRevokeOrganizeModuleScope1Delegate, this.onRevokeOrganizeModuleScope1CompletedDelegate, userState);
        }
        
        public string[] GetOrganizePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string organizeId) {
            return base.Channel.GetOrganizePermissionItemIds(userInfo, organizeId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string organizeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizePermissionItemIds(userInfo, organizeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetOrganizePermissionItemIds(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizePermissionItemIds(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizePermissionItemIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            return this.BeginGetOrganizePermissionItemIds(userInfo, organizeId, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizePermissionItemIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetOrganizePermissionItemIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizePermissionItemIdsCompleted(object state) {
            if ((this.GetOrganizePermissionItemIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizePermissionItemIdsCompleted(this, new GetOrganizePermissionItemIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizePermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId) {
            this.GetOrganizePermissionItemIdsAsync(userInfo, organizeId, null);
        }
        
        public void GetOrganizePermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, object userState) {
            if ((this.onBeginGetOrganizePermissionItemIdsDelegate == null)) {
                this.onBeginGetOrganizePermissionItemIdsDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizePermissionItemIds);
            }
            if ((this.onEndGetOrganizePermissionItemIdsDelegate == null)) {
                this.onEndGetOrganizePermissionItemIdsDelegate = new EndOperationDelegate(this.OnEndGetOrganizePermissionItemIds);
            }
            if ((this.onGetOrganizePermissionItemIdsCompletedDelegate == null)) {
                this.onGetOrganizePermissionItemIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizePermissionItemIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizePermissionItemIdsDelegate, new object[] {
                        userInfo,
                        organizeId}, this.onEndGetOrganizePermissionItemIdsDelegate, this.onGetOrganizePermissionItemIdsCompletedDelegate, userState);
        }
        
        public string[] GetOrganizeIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId) {
            return base.Channel.GetOrganizeIdsByPermissionItemId(userInfo, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizeIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizeIdsByPermissionItemId(userInfo, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetOrganizeIdsByPermissionItemId(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizeIdsByPermissionItemId(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizeIdsByPermissionItemId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string permissionItemId = ((string)(inValues[1]));
            return this.BeginGetOrganizeIdsByPermissionItemId(userInfo, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizeIdsByPermissionItemId(System.IAsyncResult result) {
            string[] retVal = this.EndGetOrganizeIdsByPermissionItemId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizeIdsByPermissionItemIdCompleted(object state) {
            if ((this.GetOrganizeIdsByPermissionItemIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizeIdsByPermissionItemIdCompleted(this, new GetOrganizeIdsByPermissionItemIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizeIdsByPermissionItemIdAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId) {
            this.GetOrganizeIdsByPermissionItemIdAsync(userInfo, permissionItemId, null);
        }
        
        public void GetOrganizeIdsByPermissionItemIdAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, object userState) {
            if ((this.onBeginGetOrganizeIdsByPermissionItemIdDelegate == null)) {
                this.onBeginGetOrganizeIdsByPermissionItemIdDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizeIdsByPermissionItemId);
            }
            if ((this.onEndGetOrganizeIdsByPermissionItemIdDelegate == null)) {
                this.onEndGetOrganizeIdsByPermissionItemIdDelegate = new EndOperationDelegate(this.OnEndGetOrganizeIdsByPermissionItemId);
            }
            if ((this.onGetOrganizeIdsByPermissionItemIdCompletedDelegate == null)) {
                this.onGetOrganizeIdsByPermissionItemIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizeIdsByPermissionItemIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizeIdsByPermissionItemIdDelegate, new object[] {
                        userInfo,
                        permissionItemId}, this.onEndGetOrganizeIdsByPermissionItemIdDelegate, this.onGetOrganizeIdsByPermissionItemIdCompletedDelegate, userState);
        }
        
        public string GrantOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string grantPermissionItemId) {
            return base.Channel.GrantOrganizePermissionById(userInfo, organizeId, grantPermissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string grantPermissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantOrganizePermissionById(userInfo, organizeId, grantPermissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantOrganizePermissionById(System.IAsyncResult result) {
            return base.Channel.EndGrantOrganizePermissionById(result);
        }
        
        private System.IAsyncResult OnBeginGrantOrganizePermissionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string grantPermissionItemId = ((string)(inValues[2]));
            return this.BeginGrantOrganizePermissionById(userInfo, organizeId, grantPermissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGrantOrganizePermissionById(System.IAsyncResult result) {
            string retVal = this.EndGrantOrganizePermissionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantOrganizePermissionByIdCompleted(object state) {
            if ((this.GrantOrganizePermissionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantOrganizePermissionByIdCompleted(this, new GrantOrganizePermissionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantOrganizePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string grantPermissionItemId) {
            this.GrantOrganizePermissionByIdAsync(userInfo, organizeId, grantPermissionItemId, null);
        }
        
        public void GrantOrganizePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string grantPermissionItemId, object userState) {
            if ((this.onBeginGrantOrganizePermissionByIdDelegate == null)) {
                this.onBeginGrantOrganizePermissionByIdDelegate = new BeginOperationDelegate(this.OnBeginGrantOrganizePermissionById);
            }
            if ((this.onEndGrantOrganizePermissionByIdDelegate == null)) {
                this.onEndGrantOrganizePermissionByIdDelegate = new EndOperationDelegate(this.OnEndGrantOrganizePermissionById);
            }
            if ((this.onGrantOrganizePermissionByIdCompletedDelegate == null)) {
                this.onGrantOrganizePermissionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantOrganizePermissionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGrantOrganizePermissionByIdDelegate, new object[] {
                        userInfo,
                        organizeId,
                        grantPermissionItemId}, this.onEndGrantOrganizePermissionByIdDelegate, this.onGrantOrganizePermissionByIdCompletedDelegate, userState);
        }
        
        public int GrantOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] grantPermissionItemIds) {
            return base.Channel.GrantOrganizePermissions(userInfo, organizeIds, grantPermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantOrganizePermissions(userInfo, organizeIds, grantPermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantOrganizePermissions(System.IAsyncResult result) {
            return base.Channel.EndGrantOrganizePermissions(result);
        }
        
        private System.IAsyncResult OnBeginGrantOrganizePermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string[] organizeIds = ((string[])(inValues[1]));
            string[] grantPermissionItemIds = ((string[])(inValues[2]));
            return this.BeginGrantOrganizePermissions(userInfo, organizeIds, grantPermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndGrantOrganizePermissions(System.IAsyncResult result) {
            int retVal = this.EndGrantOrganizePermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantOrganizePermissionsCompleted(object state) {
            if ((this.GrantOrganizePermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantOrganizePermissionsCompleted(this, new GrantOrganizePermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantOrganizePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] grantPermissionItemIds) {
            this.GrantOrganizePermissionsAsync(userInfo, organizeIds, grantPermissionItemIds, null);
        }
        
        public void GrantOrganizePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] grantPermissionItemIds, object userState) {
            if ((this.onBeginGrantOrganizePermissionsDelegate == null)) {
                this.onBeginGrantOrganizePermissionsDelegate = new BeginOperationDelegate(this.OnBeginGrantOrganizePermissions);
            }
            if ((this.onEndGrantOrganizePermissionsDelegate == null)) {
                this.onEndGrantOrganizePermissionsDelegate = new EndOperationDelegate(this.OnEndGrantOrganizePermissions);
            }
            if ((this.onGrantOrganizePermissionsCompletedDelegate == null)) {
                this.onGrantOrganizePermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantOrganizePermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginGrantOrganizePermissionsDelegate, new object[] {
                        userInfo,
                        organizeIds,
                        grantPermissionItemIds}, this.onEndGrantOrganizePermissionsDelegate, this.onGrantOrganizePermissionsCompletedDelegate, userState);
        }
        
        public int RevokeOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] revokePermissionItemIds) {
            return base.Channel.RevokeOrganizePermissions(userInfo, organizeIds, revokePermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeOrganizePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeOrganizePermissions(userInfo, organizeIds, revokePermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeOrganizePermissions(System.IAsyncResult result) {
            return base.Channel.EndRevokeOrganizePermissions(result);
        }
        
        private System.IAsyncResult OnBeginRevokeOrganizePermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string[] organizeIds = ((string[])(inValues[1]));
            string[] revokePermissionItemIds = ((string[])(inValues[2]));
            return this.BeginRevokeOrganizePermissions(userInfo, organizeIds, revokePermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeOrganizePermissions(System.IAsyncResult result) {
            int retVal = this.EndRevokeOrganizePermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeOrganizePermissionsCompleted(object state) {
            if ((this.RevokeOrganizePermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeOrganizePermissionsCompleted(this, new RevokeOrganizePermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeOrganizePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] revokePermissionItemIds) {
            this.RevokeOrganizePermissionsAsync(userInfo, organizeIds, revokePermissionItemIds, null);
        }
        
        public void RevokeOrganizePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] organizeIds, string[] revokePermissionItemIds, object userState) {
            if ((this.onBeginRevokeOrganizePermissionsDelegate == null)) {
                this.onBeginRevokeOrganizePermissionsDelegate = new BeginOperationDelegate(this.OnBeginRevokeOrganizePermissions);
            }
            if ((this.onEndRevokeOrganizePermissionsDelegate == null)) {
                this.onEndRevokeOrganizePermissionsDelegate = new EndOperationDelegate(this.OnEndRevokeOrganizePermissions);
            }
            if ((this.onRevokeOrganizePermissionsCompletedDelegate == null)) {
                this.onRevokeOrganizePermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeOrganizePermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeOrganizePermissionsDelegate, new object[] {
                        userInfo,
                        organizeIds,
                        revokePermissionItemIds}, this.onEndRevokeOrganizePermissionsDelegate, this.onRevokeOrganizePermissionsCompletedDelegate, userState);
        }
        
        public int RevokeOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string revokePermissionItemId) {
            return base.Channel.RevokeOrganizePermissionById(userInfo, organizeId, revokePermissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeOrganizePermissionById(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string revokePermissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeOrganizePermissionById(userInfo, organizeId, revokePermissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeOrganizePermissionById(System.IAsyncResult result) {
            return base.Channel.EndRevokeOrganizePermissionById(result);
        }
        
        private System.IAsyncResult OnBeginRevokeOrganizePermissionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            string revokePermissionItemId = ((string)(inValues[2]));
            return this.BeginRevokeOrganizePermissionById(userInfo, organizeId, revokePermissionItemId, callback, asyncState);
        }
        
        private object[] OnEndRevokeOrganizePermissionById(System.IAsyncResult result) {
            int retVal = this.EndRevokeOrganizePermissionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeOrganizePermissionByIdCompleted(object state) {
            if ((this.RevokeOrganizePermissionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeOrganizePermissionByIdCompleted(this, new RevokeOrganizePermissionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeOrganizePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string revokePermissionItemId) {
            this.RevokeOrganizePermissionByIdAsync(userInfo, organizeId, revokePermissionItemId, null);
        }
        
        public void RevokeOrganizePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, string revokePermissionItemId, object userState) {
            if ((this.onBeginRevokeOrganizePermissionByIdDelegate == null)) {
                this.onBeginRevokeOrganizePermissionByIdDelegate = new BeginOperationDelegate(this.OnBeginRevokeOrganizePermissionById);
            }
            if ((this.onEndRevokeOrganizePermissionByIdDelegate == null)) {
                this.onEndRevokeOrganizePermissionByIdDelegate = new EndOperationDelegate(this.OnEndRevokeOrganizePermissionById);
            }
            if ((this.onRevokeOrganizePermissionByIdCompletedDelegate == null)) {
                this.onRevokeOrganizePermissionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeOrganizePermissionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeOrganizePermissionByIdDelegate, new object[] {
                        userInfo,
                        organizeId,
                        revokePermissionItemId}, this.onEndRevokeOrganizePermissionByIdDelegate, this.onRevokeOrganizePermissionByIdCompletedDelegate, userState);
        }
        
        public int ClearOrganizePermission(RDIFramework.Utilities.UserInfo userInfo, string organizeId) {
            return base.Channel.ClearOrganizePermission(userInfo, organizeId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearOrganizePermission(RDIFramework.Utilities.UserInfo userInfo, string organizeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearOrganizePermission(userInfo, organizeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndClearOrganizePermission(System.IAsyncResult result) {
            return base.Channel.EndClearOrganizePermission(result);
        }
        
        private System.IAsyncResult OnBeginClearOrganizePermission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string organizeId = ((string)(inValues[1]));
            return this.BeginClearOrganizePermission(userInfo, organizeId, callback, asyncState);
        }
        
        private object[] OnEndClearOrganizePermission(System.IAsyncResult result) {
            int retVal = this.EndClearOrganizePermission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearOrganizePermissionCompleted(object state) {
            if ((this.ClearOrganizePermissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearOrganizePermissionCompleted(this, new ClearOrganizePermissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearOrganizePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId) {
            this.ClearOrganizePermissionAsync(userInfo, organizeId, null);
        }
        
        public void ClearOrganizePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string organizeId, object userState) {
            if ((this.onBeginClearOrganizePermissionDelegate == null)) {
                this.onBeginClearOrganizePermissionDelegate = new BeginOperationDelegate(this.OnBeginClearOrganizePermission);
            }
            if ((this.onEndClearOrganizePermissionDelegate == null)) {
                this.onEndClearOrganizePermissionDelegate = new EndOperationDelegate(this.OnEndClearOrganizePermission);
            }
            if ((this.onClearOrganizePermissionCompletedDelegate == null)) {
                this.onClearOrganizePermissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearOrganizePermissionCompleted);
            }
            base.InvokeAsync(this.onBeginClearOrganizePermissionDelegate, new object[] {
                        userInfo,
                        organizeId}, this.onEndClearOrganizePermissionDelegate, this.onClearOrganizePermissionCompletedDelegate, userState);
        }
        
        public bool IsInRole(RDIFramework.Utilities.UserInfo userInfo, string userId, string roleName) {
            return base.Channel.IsInRole(userInfo, userId, roleName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsInRole(RDIFramework.Utilities.UserInfo userInfo, string userId, string roleName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsInRole(userInfo, userId, roleName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsInRole(System.IAsyncResult result) {
            return base.Channel.EndIsInRole(result);
        }
        
        private System.IAsyncResult OnBeginIsInRole(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string roleName = ((string)(inValues[2]));
            return this.BeginIsInRole(userInfo, userId, roleName, callback, asyncState);
        }
        
        private object[] OnEndIsInRole(System.IAsyncResult result) {
            bool retVal = this.EndIsInRole(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsInRoleCompleted(object state) {
            if ((this.IsInRoleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsInRoleCompleted(this, new IsInRoleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsInRoleAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string roleName) {
            this.IsInRoleAsync(userInfo, userId, roleName, null);
        }
        
        public void IsInRoleAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string roleName, object userState) {
            if ((this.onBeginIsInRoleDelegate == null)) {
                this.onBeginIsInRoleDelegate = new BeginOperationDelegate(this.OnBeginIsInRole);
            }
            if ((this.onEndIsInRoleDelegate == null)) {
                this.onEndIsInRoleDelegate = new EndOperationDelegate(this.OnEndIsInRole);
            }
            if ((this.onIsInRoleCompletedDelegate == null)) {
                this.onIsInRoleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsInRoleCompleted);
            }
            base.InvokeAsync(this.onBeginIsInRoleDelegate, new object[] {
                        userInfo,
                        userId,
                        roleName}, this.onEndIsInRoleDelegate, this.onIsInRoleCompletedDelegate, userState);
        }
        
        public bool IsAuthorized(RDIFramework.Utilities.UserInfo userInfo, string permissionItemCode, string permissionItemName) {
            return base.Channel.IsAuthorized(userInfo, permissionItemCode, permissionItemName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsAuthorized(RDIFramework.Utilities.UserInfo userInfo, string permissionItemCode, string permissionItemName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAuthorized(userInfo, permissionItemCode, permissionItemName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsAuthorized(System.IAsyncResult result) {
            return base.Channel.EndIsAuthorized(result);
        }
        
        private System.IAsyncResult OnBeginIsAuthorized(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string permissionItemCode = ((string)(inValues[1]));
            string permissionItemName = ((string)(inValues[2]));
            return this.BeginIsAuthorized(userInfo, permissionItemCode, permissionItemName, callback, asyncState);
        }
        
        private object[] OnEndIsAuthorized(System.IAsyncResult result) {
            bool retVal = this.EndIsAuthorized(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAuthorizedCompleted(object state) {
            if ((this.IsAuthorizedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAuthorizedCompleted(this, new IsAuthorizedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAuthorizedAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemCode, string permissionItemName) {
            this.IsAuthorizedAsync(userInfo, permissionItemCode, permissionItemName, null);
        }
        
        public void IsAuthorizedAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemCode, string permissionItemName, object userState) {
            if ((this.onBeginIsAuthorizedDelegate == null)) {
                this.onBeginIsAuthorizedDelegate = new BeginOperationDelegate(this.OnBeginIsAuthorized);
            }
            if ((this.onEndIsAuthorizedDelegate == null)) {
                this.onEndIsAuthorizedDelegate = new EndOperationDelegate(this.OnEndIsAuthorized);
            }
            if ((this.onIsAuthorizedCompletedDelegate == null)) {
                this.onIsAuthorizedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAuthorizedCompleted);
            }
            base.InvokeAsync(this.onBeginIsAuthorizedDelegate, new object[] {
                        userInfo,
                        permissionItemCode,
                        permissionItemName}, this.onEndIsAuthorizedDelegate, this.onIsAuthorizedCompletedDelegate, userState);
        }
        
        public bool IsAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string permissionItemName) {
            return base.Channel.IsAuthorizedByUserId(userInfo, userId, permissionItemCode, permissionItemName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsAuthorizedByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string permissionItemName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAuthorizedByUserId(userInfo, userId, permissionItemCode, permissionItemName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsAuthorizedByUserId(System.IAsyncResult result) {
            return base.Channel.EndIsAuthorizedByUserId(result);
        }
        
        private System.IAsyncResult OnBeginIsAuthorizedByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string permissionItemName = ((string)(inValues[3]));
            return this.BeginIsAuthorizedByUserId(userInfo, userId, permissionItemCode, permissionItemName, callback, asyncState);
        }
        
        private object[] OnEndIsAuthorizedByUserId(System.IAsyncResult result) {
            bool retVal = this.EndIsAuthorizedByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAuthorizedByUserIdCompleted(object state) {
            if ((this.IsAuthorizedByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAuthorizedByUserIdCompleted(this, new IsAuthorizedByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAuthorizedByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string permissionItemName) {
            this.IsAuthorizedByUserIdAsync(userInfo, userId, permissionItemCode, permissionItemName, null);
        }
        
        public void IsAuthorizedByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string permissionItemName, object userState) {
            if ((this.onBeginIsAuthorizedByUserIdDelegate == null)) {
                this.onBeginIsAuthorizedByUserIdDelegate = new BeginOperationDelegate(this.OnBeginIsAuthorizedByUserId);
            }
            if ((this.onEndIsAuthorizedByUserIdDelegate == null)) {
                this.onEndIsAuthorizedByUserIdDelegate = new EndOperationDelegate(this.OnEndIsAuthorizedByUserId);
            }
            if ((this.onIsAuthorizedByUserIdCompletedDelegate == null)) {
                this.onIsAuthorizedByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAuthorizedByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginIsAuthorizedByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        permissionItemName}, this.onEndIsAuthorizedByUserIdDelegate, this.onIsAuthorizedByUserIdCompletedDelegate, userState);
        }
        
        public bool IsAuthorizedByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.IsAuthorizedByRoleId(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsAuthorizedByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAuthorizedByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsAuthorizedByRoleId(System.IAsyncResult result) {
            return base.Channel.EndIsAuthorizedByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginIsAuthorizedByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginIsAuthorizedByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndIsAuthorizedByRoleId(System.IAsyncResult result) {
            bool retVal = this.EndIsAuthorizedByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAuthorizedByRoleIdCompleted(object state) {
            if ((this.IsAuthorizedByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAuthorizedByRoleIdCompleted(this, new IsAuthorizedByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAuthorizedByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.IsAuthorizedByRoleIdAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void IsAuthorizedByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginIsAuthorizedByRoleIdDelegate == null)) {
                this.onBeginIsAuthorizedByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginIsAuthorizedByRoleId);
            }
            if ((this.onEndIsAuthorizedByRoleIdDelegate == null)) {
                this.onEndIsAuthorizedByRoleIdDelegate = new EndOperationDelegate(this.OnEndIsAuthorizedByRoleId);
            }
            if ((this.onIsAuthorizedByRoleIdCompletedDelegate == null)) {
                this.onIsAuthorizedByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAuthorizedByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginIsAuthorizedByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndIsAuthorizedByRoleIdDelegate, this.onIsAuthorizedByRoleIdCompletedDelegate, userState);
        }
        
        public bool IsAdministrator(RDIFramework.Utilities.UserInfo userInfo) {
            return base.Channel.IsAdministrator(userInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsAdministrator(RDIFramework.Utilities.UserInfo userInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAdministrator(userInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsAdministrator(System.IAsyncResult result) {
            return base.Channel.EndIsAdministrator(result);
        }
        
        private System.IAsyncResult OnBeginIsAdministrator(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            return this.BeginIsAdministrator(userInfo, callback, asyncState);
        }
        
        private object[] OnEndIsAdministrator(System.IAsyncResult result) {
            bool retVal = this.EndIsAdministrator(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAdministratorCompleted(object state) {
            if ((this.IsAdministratorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAdministratorCompleted(this, new IsAdministratorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAdministratorAsync(RDIFramework.Utilities.UserInfo userInfo) {
            this.IsAdministratorAsync(userInfo, null);
        }
        
        public void IsAdministratorAsync(RDIFramework.Utilities.UserInfo userInfo, object userState) {
            if ((this.onBeginIsAdministratorDelegate == null)) {
                this.onBeginIsAdministratorDelegate = new BeginOperationDelegate(this.OnBeginIsAdministrator);
            }
            if ((this.onEndIsAdministratorDelegate == null)) {
                this.onEndIsAdministratorDelegate = new EndOperationDelegate(this.OnEndIsAdministrator);
            }
            if ((this.onIsAdministratorCompletedDelegate == null)) {
                this.onIsAdministratorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAdministratorCompleted);
            }
            base.InvokeAsync(this.onBeginIsAdministratorDelegate, new object[] {
                        userInfo}, this.onEndIsAdministratorDelegate, this.onIsAdministratorCompletedDelegate, userState);
        }
        
        public bool IsAdministratorByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            return base.Channel.IsAdministratorByUserId(userInfo, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsAdministratorByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsAdministratorByUserId(userInfo, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsAdministratorByUserId(System.IAsyncResult result) {
            return base.Channel.EndIsAdministratorByUserId(result);
        }
        
        private System.IAsyncResult OnBeginIsAdministratorByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            return this.BeginIsAdministratorByUserId(userInfo, userId, callback, asyncState);
        }
        
        private object[] OnEndIsAdministratorByUserId(System.IAsyncResult result) {
            bool retVal = this.EndIsAdministratorByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsAdministratorByUserIdCompleted(object state) {
            if ((this.IsAdministratorByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsAdministratorByUserIdCompleted(this, new IsAdministratorByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsAdministratorByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            this.IsAdministratorByUserIdAsync(userInfo, userId, null);
        }
        
        public void IsAdministratorByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, object userState) {
            if ((this.onBeginIsAdministratorByUserIdDelegate == null)) {
                this.onBeginIsAdministratorByUserIdDelegate = new BeginOperationDelegate(this.OnBeginIsAdministratorByUserId);
            }
            if ((this.onEndIsAdministratorByUserIdDelegate == null)) {
                this.onEndIsAdministratorByUserIdDelegate = new EndOperationDelegate(this.OnEndIsAdministratorByUserId);
            }
            if ((this.onIsAdministratorByUserIdCompletedDelegate == null)) {
                this.onIsAdministratorByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsAdministratorByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginIsAdministratorByUserIdDelegate, new object[] {
                        userInfo,
                        userId}, this.onEndIsAdministratorByUserIdDelegate, this.onIsAdministratorByUserIdCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetPermissionDT(RDIFramework.Utilities.UserInfo userInfo) {
            return base.Channel.GetPermissionDT(userInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermissionDT(RDIFramework.Utilities.UserInfo userInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermissionDT(userInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetPermissionDT(System.IAsyncResult result) {
            return base.Channel.EndGetPermissionDT(result);
        }
        
        private System.IAsyncResult OnBeginGetPermissionDT(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            return this.BeginGetPermissionDT(userInfo, callback, asyncState);
        }
        
        private object[] OnEndGetPermissionDT(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetPermissionDT(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionDTCompleted(object state) {
            if ((this.GetPermissionDTCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionDTCompleted(this, new GetPermissionDTCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionDTAsync(RDIFramework.Utilities.UserInfo userInfo) {
            this.GetPermissionDTAsync(userInfo, null);
        }
        
        public void GetPermissionDTAsync(RDIFramework.Utilities.UserInfo userInfo, object userState) {
            if ((this.onBeginGetPermissionDTDelegate == null)) {
                this.onBeginGetPermissionDTDelegate = new BeginOperationDelegate(this.OnBeginGetPermissionDT);
            }
            if ((this.onEndGetPermissionDTDelegate == null)) {
                this.onEndGetPermissionDTDelegate = new EndOperationDelegate(this.OnEndGetPermissionDT);
            }
            if ((this.onGetPermissionDTCompletedDelegate == null)) {
                this.onGetPermissionDTCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionDTCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionDTDelegate, new object[] {
                        userInfo}, this.onEndGetPermissionDTDelegate, this.onGetPermissionDTCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetPermissionDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            return base.Channel.GetPermissionDTByUserId(userInfo, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermissionDTByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermissionDTByUserId(userInfo, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetPermissionDTByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetPermissionDTByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetPermissionDTByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            return this.BeginGetPermissionDTByUserId(userInfo, userId, callback, asyncState);
        }
        
        private object[] OnEndGetPermissionDTByUserId(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetPermissionDTByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionDTByUserIdCompleted(object state) {
            if ((this.GetPermissionDTByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionDTByUserIdCompleted(this, new GetPermissionDTByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionDTByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            this.GetPermissionDTByUserIdAsync(userInfo, userId, null);
        }
        
        public void GetPermissionDTByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, object userState) {
            if ((this.onBeginGetPermissionDTByUserIdDelegate == null)) {
                this.onBeginGetPermissionDTByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetPermissionDTByUserId);
            }
            if ((this.onEndGetPermissionDTByUserIdDelegate == null)) {
                this.onEndGetPermissionDTByUserIdDelegate = new EndOperationDelegate(this.OnEndGetPermissionDTByUserId);
            }
            if ((this.onGetPermissionDTByUserIdCompletedDelegate == null)) {
                this.onGetPermissionDTByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionDTByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionDTByUserIdDelegate, new object[] {
                        userInfo,
                        userId}, this.onEndGetPermissionDTByUserIdDelegate, this.onGetPermissionDTByUserIdCompletedDelegate, userState);
        }
        
        public bool IsModuleAuthorized(RDIFramework.Utilities.UserInfo userInfo, string moduleCode) {
            return base.Channel.IsModuleAuthorized(userInfo, moduleCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsModuleAuthorized(RDIFramework.Utilities.UserInfo userInfo, string moduleCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsModuleAuthorized(userInfo, moduleCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsModuleAuthorized(System.IAsyncResult result) {
            return base.Channel.EndIsModuleAuthorized(result);
        }
        
        private System.IAsyncResult OnBeginIsModuleAuthorized(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string moduleCode = ((string)(inValues[1]));
            return this.BeginIsModuleAuthorized(userInfo, moduleCode, callback, asyncState);
        }
        
        private object[] OnEndIsModuleAuthorized(System.IAsyncResult result) {
            bool retVal = this.EndIsModuleAuthorized(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsModuleAuthorizedCompleted(object state) {
            if ((this.IsModuleAuthorizedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsModuleAuthorizedCompleted(this, new IsModuleAuthorizedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsModuleAuthorizedAsync(RDIFramework.Utilities.UserInfo userInfo, string moduleCode) {
            this.IsModuleAuthorizedAsync(userInfo, moduleCode, null);
        }
        
        public void IsModuleAuthorizedAsync(RDIFramework.Utilities.UserInfo userInfo, string moduleCode, object userState) {
            if ((this.onBeginIsModuleAuthorizedDelegate == null)) {
                this.onBeginIsModuleAuthorizedDelegate = new BeginOperationDelegate(this.OnBeginIsModuleAuthorized);
            }
            if ((this.onEndIsModuleAuthorizedDelegate == null)) {
                this.onEndIsModuleAuthorizedDelegate = new EndOperationDelegate(this.OnEndIsModuleAuthorized);
            }
            if ((this.onIsModuleAuthorizedCompletedDelegate == null)) {
                this.onIsModuleAuthorizedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsModuleAuthorizedCompleted);
            }
            base.InvokeAsync(this.onBeginIsModuleAuthorizedDelegate, new object[] {
                        userInfo,
                        moduleCode}, this.onEndIsModuleAuthorizedDelegate, this.onIsModuleAuthorizedCompletedDelegate, userState);
        }
        
        public int ClearRolePermissionByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId) {
            return base.Channel.ClearRolePermissionByRoleId(userInfo, roleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearRolePermissionByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearRolePermissionByRoleId(userInfo, roleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndClearRolePermissionByRoleId(System.IAsyncResult result) {
            return base.Channel.EndClearRolePermissionByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginClearRolePermissionByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            return this.BeginClearRolePermissionByRoleId(userInfo, roleId, callback, asyncState);
        }
        
        private object[] OnEndClearRolePermissionByRoleId(System.IAsyncResult result) {
            int retVal = this.EndClearRolePermissionByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearRolePermissionByRoleIdCompleted(object state) {
            if ((this.ClearRolePermissionByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearRolePermissionByRoleIdCompleted(this, new ClearRolePermissionByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearRolePermissionByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId) {
            this.ClearRolePermissionByRoleIdAsync(userInfo, roleId, null);
        }
        
        public void ClearRolePermissionByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, object userState) {
            if ((this.onBeginClearRolePermissionByRoleIdDelegate == null)) {
                this.onBeginClearRolePermissionByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginClearRolePermissionByRoleId);
            }
            if ((this.onEndClearRolePermissionByRoleIdDelegate == null)) {
                this.onEndClearRolePermissionByRoleIdDelegate = new EndOperationDelegate(this.OnEndClearRolePermissionByRoleId);
            }
            if ((this.onClearRolePermissionByRoleIdCompletedDelegate == null)) {
                this.onClearRolePermissionByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearRolePermissionByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginClearRolePermissionByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId}, this.onEndClearRolePermissionByRoleIdDelegate, this.onClearRolePermissionByRoleIdCompletedDelegate, userState);
        }
        
        public int ClearRolePermissionScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.ClearRolePermissionScope(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearRolePermissionScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearRolePermissionScope(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndClearRolePermissionScope(System.IAsyncResult result) {
            return base.Channel.EndClearRolePermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginClearRolePermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginClearRolePermissionScope(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndClearRolePermissionScope(System.IAsyncResult result) {
            int retVal = this.EndClearRolePermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearRolePermissionScopeCompleted(object state) {
            if ((this.ClearRolePermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearRolePermissionScopeCompleted(this, new ClearRolePermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearRolePermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.ClearRolePermissionScopeAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void ClearRolePermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginClearRolePermissionScopeDelegate == null)) {
                this.onBeginClearRolePermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginClearRolePermissionScope);
            }
            if ((this.onEndClearRolePermissionScopeDelegate == null)) {
                this.onEndClearRolePermissionScopeDelegate = new EndOperationDelegate(this.OnEndClearRolePermissionScope);
            }
            if ((this.onClearRolePermissionScopeCompletedDelegate == null)) {
                this.onClearRolePermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearRolePermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginClearRolePermissionScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndClearRolePermissionScopeDelegate, this.onClearRolePermissionScopeCompletedDelegate, userState);
        }
        
        public string[] GetScopeModuleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.GetScopeModuleIdsByRoleId(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeModuleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeModuleIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeModuleIdsByRoleId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeModuleIdsByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeModuleIdsByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeModuleIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeModuleIdsByRoleId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeModuleIdsByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeModuleIdsByRoleIdCompleted(object state) {
            if ((this.GetScopeModuleIdsByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeModuleIdsByRoleIdCompleted(this, new GetScopeModuleIdsByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeModuleIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.GetScopeModuleIdsByRoleIdAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void GetScopeModuleIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeModuleIdsByRoleIdDelegate == null)) {
                this.onBeginGetScopeModuleIdsByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeModuleIdsByRoleId);
            }
            if ((this.onEndGetScopeModuleIdsByRoleIdDelegate == null)) {
                this.onEndGetScopeModuleIdsByRoleIdDelegate = new EndOperationDelegate(this.OnEndGetScopeModuleIdsByRoleId);
            }
            if ((this.onGetScopeModuleIdsByRoleIdCompletedDelegate == null)) {
                this.onGetScopeModuleIdsByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeModuleIdsByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeModuleIdsByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndGetScopeModuleIdsByRoleIdDelegate, this.onGetScopeModuleIdsByRoleIdCompletedDelegate, userState);
        }
        
        public int GrantRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantModuleIds) {
            return base.Channel.GrantRoleModuleScope2(userInfo, roleId, permissionItemCode, grantModuleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantModuleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRoleModuleScope2(userInfo, roleId, permissionItemCode, grantModuleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantRoleModuleScope2(System.IAsyncResult result) {
            return base.Channel.EndGrantRoleModuleScope2(result);
        }
        
        private System.IAsyncResult OnBeginGrantRoleModuleScope2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantModuleIds = ((string[])(inValues[3]));
            return this.BeginGrantRoleModuleScope2(userInfo, roleId, permissionItemCode, grantModuleIds, callback, asyncState);
        }
        
        private object[] OnEndGrantRoleModuleScope2(System.IAsyncResult result) {
            int retVal = this.EndGrantRoleModuleScope2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRoleModuleScope2Completed(object state) {
            if ((this.GrantRoleModuleScope2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRoleModuleScope2Completed(this, new GrantRoleModuleScope2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRoleModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantModuleIds) {
            this.GrantRoleModuleScope2Async(userInfo, roleId, permissionItemCode, grantModuleIds, null);
        }
        
        public void GrantRoleModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantModuleIds, object userState) {
            if ((this.onBeginGrantRoleModuleScope2Delegate == null)) {
                this.onBeginGrantRoleModuleScope2Delegate = new BeginOperationDelegate(this.OnBeginGrantRoleModuleScope2);
            }
            if ((this.onEndGrantRoleModuleScope2Delegate == null)) {
                this.onEndGrantRoleModuleScope2Delegate = new EndOperationDelegate(this.OnEndGrantRoleModuleScope2);
            }
            if ((this.onGrantRoleModuleScope2CompletedDelegate == null)) {
                this.onGrantRoleModuleScope2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRoleModuleScope2Completed);
            }
            base.InvokeAsync(this.onBeginGrantRoleModuleScope2Delegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        grantModuleIds}, this.onEndGrantRoleModuleScope2Delegate, this.onGrantRoleModuleScope2CompletedDelegate, userState);
        }
        
        public string GrantRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string grantModuleId) {
            return base.Channel.GrantRoleModuleScope1(userInfo, roleId, permissionItemCode, grantModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string grantModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRoleModuleScope1(userInfo, roleId, permissionItemCode, grantModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantRoleModuleScope1(System.IAsyncResult result) {
            return base.Channel.EndGrantRoleModuleScope1(result);
        }
        
        private System.IAsyncResult OnBeginGrantRoleModuleScope1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string grantModuleId = ((string)(inValues[3]));
            return this.BeginGrantRoleModuleScope1(userInfo, roleId, permissionItemCode, grantModuleId, callback, asyncState);
        }
        
        private object[] OnEndGrantRoleModuleScope1(System.IAsyncResult result) {
            string retVal = this.EndGrantRoleModuleScope1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRoleModuleScope1Completed(object state) {
            if ((this.GrantRoleModuleScope1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRoleModuleScope1Completed(this, new GrantRoleModuleScope1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRoleModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string grantModuleId) {
            this.GrantRoleModuleScope1Async(userInfo, roleId, permissionItemCode, grantModuleId, null);
        }
        
        public void GrantRoleModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string grantModuleId, object userState) {
            if ((this.onBeginGrantRoleModuleScope1Delegate == null)) {
                this.onBeginGrantRoleModuleScope1Delegate = new BeginOperationDelegate(this.OnBeginGrantRoleModuleScope1);
            }
            if ((this.onEndGrantRoleModuleScope1Delegate == null)) {
                this.onEndGrantRoleModuleScope1Delegate = new EndOperationDelegate(this.OnEndGrantRoleModuleScope1);
            }
            if ((this.onGrantRoleModuleScope1CompletedDelegate == null)) {
                this.onGrantRoleModuleScope1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRoleModuleScope1Completed);
            }
            base.InvokeAsync(this.onBeginGrantRoleModuleScope1Delegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        grantModuleId}, this.onEndGrantRoleModuleScope1Delegate, this.onGrantRoleModuleScope1CompletedDelegate, userState);
        }
        
        public int RevokeRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeModuleIds) {
            return base.Channel.RevokeRoleModuleScope2(userInfo, roleId, permissionItemCode, revokeModuleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRoleModuleScope2(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeModuleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRoleModuleScope2(userInfo, roleId, permissionItemCode, revokeModuleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRoleModuleScope2(System.IAsyncResult result) {
            return base.Channel.EndRevokeRoleModuleScope2(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRoleModuleScope2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeModuleIds = ((string[])(inValues[3]));
            return this.BeginRevokeRoleModuleScope2(userInfo, roleId, permissionItemCode, revokeModuleIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeRoleModuleScope2(System.IAsyncResult result) {
            int retVal = this.EndRevokeRoleModuleScope2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRoleModuleScope2Completed(object state) {
            if ((this.RevokeRoleModuleScope2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRoleModuleScope2Completed(this, new RevokeRoleModuleScope2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRoleModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeModuleIds) {
            this.RevokeRoleModuleScope2Async(userInfo, roleId, permissionItemCode, revokeModuleIds, null);
        }
        
        public void RevokeRoleModuleScope2Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeModuleIds, object userState) {
            if ((this.onBeginRevokeRoleModuleScope2Delegate == null)) {
                this.onBeginRevokeRoleModuleScope2Delegate = new BeginOperationDelegate(this.OnBeginRevokeRoleModuleScope2);
            }
            if ((this.onEndRevokeRoleModuleScope2Delegate == null)) {
                this.onEndRevokeRoleModuleScope2Delegate = new EndOperationDelegate(this.OnEndRevokeRoleModuleScope2);
            }
            if ((this.onRevokeRoleModuleScope2CompletedDelegate == null)) {
                this.onRevokeRoleModuleScope2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRoleModuleScope2Completed);
            }
            base.InvokeAsync(this.onBeginRevokeRoleModuleScope2Delegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        revokeModuleIds}, this.onEndRevokeRoleModuleScope2Delegate, this.onRevokeRoleModuleScope2CompletedDelegate, userState);
        }
        
        public int RevokeRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string revokeModuleId) {
            return base.Channel.RevokeRoleModuleScope1(userInfo, roleId, permissionItemCode, revokeModuleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRoleModuleScope1(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string revokeModuleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRoleModuleScope1(userInfo, roleId, permissionItemCode, revokeModuleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRoleModuleScope1(System.IAsyncResult result) {
            return base.Channel.EndRevokeRoleModuleScope1(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRoleModuleScope1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string revokeModuleId = ((string)(inValues[3]));
            return this.BeginRevokeRoleModuleScope1(userInfo, roleId, permissionItemCode, revokeModuleId, callback, asyncState);
        }
        
        private object[] OnEndRevokeRoleModuleScope1(System.IAsyncResult result) {
            int retVal = this.EndRevokeRoleModuleScope1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRoleModuleScope1Completed(object state) {
            if ((this.RevokeRoleModuleScope1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRoleModuleScope1Completed(this, new RevokeRoleModuleScope1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRoleModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string revokeModuleId) {
            this.RevokeRoleModuleScope1Async(userInfo, roleId, permissionItemCode, revokeModuleId, null);
        }
        
        public void RevokeRoleModuleScope1Async(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string revokeModuleId, object userState) {
            if ((this.onBeginRevokeRoleModuleScope1Delegate == null)) {
                this.onBeginRevokeRoleModuleScope1Delegate = new BeginOperationDelegate(this.OnBeginRevokeRoleModuleScope1);
            }
            if ((this.onEndRevokeRoleModuleScope1Delegate == null)) {
                this.onEndRevokeRoleModuleScope1Delegate = new EndOperationDelegate(this.OnEndRevokeRoleModuleScope1);
            }
            if ((this.onRevokeRoleModuleScope1CompletedDelegate == null)) {
                this.onRevokeRoleModuleScope1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRoleModuleScope1Completed);
            }
            base.InvokeAsync(this.onBeginRevokeRoleModuleScope1Delegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        revokeModuleId}, this.onEndRevokeRoleModuleScope1Delegate, this.onRevokeRoleModuleScope1CompletedDelegate, userState);
        }
        
        public string[] GetUserPermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            return base.Channel.GetUserPermissionItemIds(userInfo, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserPermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserPermissionItemIds(userInfo, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetUserPermissionItemIds(System.IAsyncResult result) {
            return base.Channel.EndGetUserPermissionItemIds(result);
        }
        
        private System.IAsyncResult OnBeginGetUserPermissionItemIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            return this.BeginGetUserPermissionItemIds(userInfo, userId, callback, asyncState);
        }
        
        private object[] OnEndGetUserPermissionItemIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetUserPermissionItemIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserPermissionItemIdsCompleted(object state) {
            if ((this.GetUserPermissionItemIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserPermissionItemIdsCompleted(this, new GetUserPermissionItemIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserPermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            this.GetUserPermissionItemIdsAsync(userInfo, userId, null);
        }
        
        public void GetUserPermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, object userState) {
            if ((this.onBeginGetUserPermissionItemIdsDelegate == null)) {
                this.onBeginGetUserPermissionItemIdsDelegate = new BeginOperationDelegate(this.OnBeginGetUserPermissionItemIds);
            }
            if ((this.onEndGetUserPermissionItemIdsDelegate == null)) {
                this.onEndGetUserPermissionItemIdsDelegate = new EndOperationDelegate(this.OnEndGetUserPermissionItemIds);
            }
            if ((this.onGetUserPermissionItemIdsCompletedDelegate == null)) {
                this.onGetUserPermissionItemIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionItemIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserPermissionItemIdsDelegate, new object[] {
                        userInfo,
                        userId}, this.onEndGetUserPermissionItemIdsDelegate, this.onGetUserPermissionItemIdsCompletedDelegate, userState);
        }
        
        public string[] GetUserIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId) {
            return base.Channel.GetUserIdsByPermissionItemId(userInfo, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserIdsByPermissionItemId(userInfo, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetUserIdsByPermissionItemId(System.IAsyncResult result) {
            return base.Channel.EndGetUserIdsByPermissionItemId(result);
        }
        
        private System.IAsyncResult OnBeginGetUserIdsByPermissionItemId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string permissionItemId = ((string)(inValues[1]));
            return this.BeginGetUserIdsByPermissionItemId(userInfo, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGetUserIdsByPermissionItemId(System.IAsyncResult result) {
            string[] retVal = this.EndGetUserIdsByPermissionItemId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserIdsByPermissionItemIdCompleted(object state) {
            if ((this.GetUserIdsByPermissionItemIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserIdsByPermissionItemIdCompleted(this, new GetUserIdsByPermissionItemIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserIdsByPermissionItemIdAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId) {
            this.GetUserIdsByPermissionItemIdAsync(userInfo, permissionItemId, null);
        }
        
        public void GetUserIdsByPermissionItemIdAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, object userState) {
            if ((this.onBeginGetUserIdsByPermissionItemIdDelegate == null)) {
                this.onBeginGetUserIdsByPermissionItemIdDelegate = new BeginOperationDelegate(this.OnBeginGetUserIdsByPermissionItemId);
            }
            if ((this.onEndGetUserIdsByPermissionItemIdDelegate == null)) {
                this.onEndGetUserIdsByPermissionItemIdDelegate = new EndOperationDelegate(this.OnEndGetUserIdsByPermissionItemId);
            }
            if ((this.onGetUserIdsByPermissionItemIdCompletedDelegate == null)) {
                this.onGetUserIdsByPermissionItemIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserIdsByPermissionItemIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserIdsByPermissionItemIdDelegate, new object[] {
                        userInfo,
                        permissionItemId}, this.onEndGetUserIdsByPermissionItemIdDelegate, this.onGetUserIdsByPermissionItemIdCompletedDelegate, userState);
        }
        
        public int GrantUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] grantPermissionItemIds) {
            return base.Channel.GrantUserPermissions(userInfo, userIds, grantPermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserPermissions(userInfo, userIds, grantPermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantUserPermissions(System.IAsyncResult result) {
            return base.Channel.EndGrantUserPermissions(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserPermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string[] userIds = ((string[])(inValues[1]));
            string[] grantPermissionItemIds = ((string[])(inValues[2]));
            return this.BeginGrantUserPermissions(userInfo, userIds, grantPermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndGrantUserPermissions(System.IAsyncResult result) {
            int retVal = this.EndGrantUserPermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserPermissionsCompleted(object state) {
            if ((this.GrantUserPermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserPermissionsCompleted(this, new GrantUserPermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserPermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] grantPermissionItemIds) {
            this.GrantUserPermissionsAsync(userInfo, userIds, grantPermissionItemIds, null);
        }
        
        public void GrantUserPermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] grantPermissionItemIds, object userState) {
            if ((this.onBeginGrantUserPermissionsDelegate == null)) {
                this.onBeginGrantUserPermissionsDelegate = new BeginOperationDelegate(this.OnBeginGrantUserPermissions);
            }
            if ((this.onEndGrantUserPermissionsDelegate == null)) {
                this.onEndGrantUserPermissionsDelegate = new EndOperationDelegate(this.OnEndGrantUserPermissions);
            }
            if ((this.onGrantUserPermissionsCompletedDelegate == null)) {
                this.onGrantUserPermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserPermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginGrantUserPermissionsDelegate, new object[] {
                        userInfo,
                        userIds,
                        grantPermissionItemIds}, this.onEndGrantUserPermissionsDelegate, this.onGrantUserPermissionsCompletedDelegate, userState);
        }
        
        public string GrantUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string grantPermissionItemId) {
            return base.Channel.GrantUserPermissionById(userInfo, userId, grantPermissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string grantPermissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserPermissionById(userInfo, userId, grantPermissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantUserPermissionById(System.IAsyncResult result) {
            return base.Channel.EndGrantUserPermissionById(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserPermissionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string grantPermissionItemId = ((string)(inValues[2]));
            return this.BeginGrantUserPermissionById(userInfo, userId, grantPermissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGrantUserPermissionById(System.IAsyncResult result) {
            string retVal = this.EndGrantUserPermissionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserPermissionByIdCompleted(object state) {
            if ((this.GrantUserPermissionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserPermissionByIdCompleted(this, new GrantUserPermissionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserPermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string grantPermissionItemId) {
            this.GrantUserPermissionByIdAsync(userInfo, userId, grantPermissionItemId, null);
        }
        
        public void GrantUserPermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string grantPermissionItemId, object userState) {
            if ((this.onBeginGrantUserPermissionByIdDelegate == null)) {
                this.onBeginGrantUserPermissionByIdDelegate = new BeginOperationDelegate(this.OnBeginGrantUserPermissionById);
            }
            if ((this.onEndGrantUserPermissionByIdDelegate == null)) {
                this.onEndGrantUserPermissionByIdDelegate = new EndOperationDelegate(this.OnEndGrantUserPermissionById);
            }
            if ((this.onGrantUserPermissionByIdCompletedDelegate == null)) {
                this.onGrantUserPermissionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserPermissionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGrantUserPermissionByIdDelegate, new object[] {
                        userInfo,
                        userId,
                        grantPermissionItemId}, this.onEndGrantUserPermissionByIdDelegate, this.onGrantUserPermissionByIdCompletedDelegate, userState);
        }
        
        public int RevokeUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] revokePermissionItemIds) {
            return base.Channel.RevokeUserPermissions(userInfo, userIds, revokePermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserPermissions(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserPermissions(userInfo, userIds, revokePermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserPermissions(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserPermissions(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserPermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string[] userIds = ((string[])(inValues[1]));
            string[] revokePermissionItemIds = ((string[])(inValues[2]));
            return this.BeginRevokeUserPermissions(userInfo, userIds, revokePermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserPermissions(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserPermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserPermissionsCompleted(object state) {
            if ((this.RevokeUserPermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserPermissionsCompleted(this, new RevokeUserPermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserPermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] revokePermissionItemIds) {
            this.RevokeUserPermissionsAsync(userInfo, userIds, revokePermissionItemIds, null);
        }
        
        public void RevokeUserPermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] userIds, string[] revokePermissionItemIds, object userState) {
            if ((this.onBeginRevokeUserPermissionsDelegate == null)) {
                this.onBeginRevokeUserPermissionsDelegate = new BeginOperationDelegate(this.OnBeginRevokeUserPermissions);
            }
            if ((this.onEndRevokeUserPermissionsDelegate == null)) {
                this.onEndRevokeUserPermissionsDelegate = new EndOperationDelegate(this.OnEndRevokeUserPermissions);
            }
            if ((this.onRevokeUserPermissionsCompletedDelegate == null)) {
                this.onRevokeUserPermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserPermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeUserPermissionsDelegate, new object[] {
                        userInfo,
                        userIds,
                        revokePermissionItemIds}, this.onEndRevokeUserPermissionsDelegate, this.onRevokeUserPermissionsCompletedDelegate, userState);
        }
        
        public int RevokeUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string revokePermissionItemId) {
            return base.Channel.RevokeUserPermissionById(userInfo, userId, revokePermissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserPermissionById(RDIFramework.Utilities.UserInfo userInfo, string userId, string revokePermissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserPermissionById(userInfo, userId, revokePermissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserPermissionById(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserPermissionById(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserPermissionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string revokePermissionItemId = ((string)(inValues[2]));
            return this.BeginRevokeUserPermissionById(userInfo, userId, revokePermissionItemId, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserPermissionById(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserPermissionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserPermissionByIdCompleted(object state) {
            if ((this.RevokeUserPermissionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserPermissionByIdCompleted(this, new RevokeUserPermissionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserPermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string revokePermissionItemId) {
            this.RevokeUserPermissionByIdAsync(userInfo, userId, revokePermissionItemId, null);
        }
        
        public void RevokeUserPermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string revokePermissionItemId, object userState) {
            if ((this.onBeginRevokeUserPermissionByIdDelegate == null)) {
                this.onBeginRevokeUserPermissionByIdDelegate = new BeginOperationDelegate(this.OnBeginRevokeUserPermissionById);
            }
            if ((this.onEndRevokeUserPermissionByIdDelegate == null)) {
                this.onEndRevokeUserPermissionByIdDelegate = new EndOperationDelegate(this.OnEndRevokeUserPermissionById);
            }
            if ((this.onRevokeUserPermissionByIdCompletedDelegate == null)) {
                this.onRevokeUserPermissionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserPermissionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeUserPermissionByIdDelegate, new object[] {
                        userInfo,
                        userId,
                        revokePermissionItemId}, this.onEndRevokeUserPermissionByIdDelegate, this.onRevokeUserPermissionByIdCompletedDelegate, userState);
        }
        
        public string[] GetScopeOrganizeIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetScopeOrganizeIdsByUserId(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeOrganizeIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeOrganizeIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeOrganizeIdsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeOrganizeIdsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeOrganizeIdsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeOrganizeIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeOrganizeIdsByUserId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeOrganizeIdsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeOrganizeIdsByUserIdCompleted(object state) {
            if ((this.GetScopeOrganizeIdsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeOrganizeIdsByUserIdCompleted(this, new GetScopeOrganizeIdsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeOrganizeIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetScopeOrganizeIdsByUserIdAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetScopeOrganizeIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeOrganizeIdsByUserIdDelegate == null)) {
                this.onBeginGetScopeOrganizeIdsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeOrganizeIdsByUserId);
            }
            if ((this.onEndGetScopeOrganizeIdsByUserIdDelegate == null)) {
                this.onEndGetScopeOrganizeIdsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetScopeOrganizeIdsByUserId);
            }
            if ((this.onGetScopeOrganizeIdsByUserIdCompletedDelegate == null)) {
                this.onGetScopeOrganizeIdsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeOrganizeIdsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeOrganizeIdsByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetScopeOrganizeIdsByUserIdDelegate, this.onGetScopeOrganizeIdsByUserIdCompletedDelegate, userState);
        }
        
        public int GrantUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantOrganizeIds) {
            return base.Channel.GrantUserOrganizeScope(userInfo, userId, permissionItemCode, grantOrganizeIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantOrganizeIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserOrganizeScope(userInfo, userId, permissionItemCode, grantOrganizeIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantUserOrganizeScope(System.IAsyncResult result) {
            return base.Channel.EndGrantUserOrganizeScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserOrganizeScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantOrganizeIds = ((string[])(inValues[3]));
            return this.BeginGrantUserOrganizeScope(userInfo, userId, permissionItemCode, grantOrganizeIds, callback, asyncState);
        }
        
        private object[] OnEndGrantUserOrganizeScope(System.IAsyncResult result) {
            int retVal = this.EndGrantUserOrganizeScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserOrganizeScopeCompleted(object state) {
            if ((this.GrantUserOrganizeScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserOrganizeScopeCompleted(this, new GrantUserOrganizeScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantOrganizeIds) {
            this.GrantUserOrganizeScopeAsync(userInfo, userId, permissionItemCode, grantOrganizeIds, null);
        }
        
        public void GrantUserOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantOrganizeIds, object userState) {
            if ((this.onBeginGrantUserOrganizeScopeDelegate == null)) {
                this.onBeginGrantUserOrganizeScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantUserOrganizeScope);
            }
            if ((this.onEndGrantUserOrganizeScopeDelegate == null)) {
                this.onEndGrantUserOrganizeScopeDelegate = new EndOperationDelegate(this.OnEndGrantUserOrganizeScope);
            }
            if ((this.onGrantUserOrganizeScopeCompletedDelegate == null)) {
                this.onGrantUserOrganizeScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserOrganizeScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantUserOrganizeScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        grantOrganizeIds}, this.onEndGrantUserOrganizeScopeDelegate, this.onGrantUserOrganizeScopeCompletedDelegate, userState);
        }
        
        public int RevokeUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeOrganizeIds) {
            return base.Channel.RevokeUserOrganizeScope(userInfo, userId, permissionItemCode, revokeOrganizeIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeOrganizeIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserOrganizeScope(userInfo, userId, permissionItemCode, revokeOrganizeIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserOrganizeScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserOrganizeScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserOrganizeScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeOrganizeIds = ((string[])(inValues[3]));
            return this.BeginRevokeUserOrganizeScope(userInfo, userId, permissionItemCode, revokeOrganizeIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserOrganizeScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserOrganizeScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserOrganizeScopeCompleted(object state) {
            if ((this.RevokeUserOrganizeScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserOrganizeScopeCompleted(this, new RevokeUserOrganizeScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeOrganizeIds) {
            this.RevokeUserOrganizeScopeAsync(userInfo, userId, permissionItemCode, revokeOrganizeIds, null);
        }
        
        public void RevokeUserOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeOrganizeIds, object userState) {
            if ((this.onBeginRevokeUserOrganizeScopeDelegate == null)) {
                this.onBeginRevokeUserOrganizeScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeUserOrganizeScope);
            }
            if ((this.onEndRevokeUserOrganizeScopeDelegate == null)) {
                this.onEndRevokeUserOrganizeScopeDelegate = new EndOperationDelegate(this.OnEndRevokeUserOrganizeScope);
            }
            if ((this.onRevokeUserOrganizeScopeCompletedDelegate == null)) {
                this.onRevokeUserOrganizeScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserOrganizeScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeUserOrganizeScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        revokeOrganizeIds}, this.onEndRevokeUserOrganizeScopeDelegate, this.onRevokeUserOrganizeScopeCompletedDelegate, userState);
        }
        
        public string[] GetScopeUserIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetScopeUserIdsByUserId(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeUserIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeUserIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeUserIdsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeUserIdsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeUserIdsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeUserIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeUserIdsByUserId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeUserIdsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeUserIdsByUserIdCompleted(object state) {
            if ((this.GetScopeUserIdsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeUserIdsByUserIdCompleted(this, new GetScopeUserIdsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeUserIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetScopeUserIdsByUserIdAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetScopeUserIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeUserIdsByUserIdDelegate == null)) {
                this.onBeginGetScopeUserIdsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeUserIdsByUserId);
            }
            if ((this.onEndGetScopeUserIdsByUserIdDelegate == null)) {
                this.onEndGetScopeUserIdsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetScopeUserIdsByUserId);
            }
            if ((this.onGetScopeUserIdsByUserIdCompletedDelegate == null)) {
                this.onGetScopeUserIdsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeUserIdsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeUserIdsByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetScopeUserIdsByUserIdDelegate, this.onGetScopeUserIdsByUserIdCompletedDelegate, userState);
        }
        
        public int GrantUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantUserIds) {
            return base.Channel.GrantUserUserScope(userInfo, userId, permissionItemCode, grantUserIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantUserIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserUserScope(userInfo, userId, permissionItemCode, grantUserIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantUserUserScope(System.IAsyncResult result) {
            return base.Channel.EndGrantUserUserScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserUserScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantUserIds = ((string[])(inValues[3]));
            return this.BeginGrantUserUserScope(userInfo, userId, permissionItemCode, grantUserIds, callback, asyncState);
        }
        
        private object[] OnEndGrantUserUserScope(System.IAsyncResult result) {
            int retVal = this.EndGrantUserUserScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserUserScopeCompleted(object state) {
            if ((this.GrantUserUserScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserUserScopeCompleted(this, new GrantUserUserScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantUserIds) {
            this.GrantUserUserScopeAsync(userInfo, userId, permissionItemCode, grantUserIds, null);
        }
        
        public void GrantUserUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantUserIds, object userState) {
            if ((this.onBeginGrantUserUserScopeDelegate == null)) {
                this.onBeginGrantUserUserScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantUserUserScope);
            }
            if ((this.onEndGrantUserUserScopeDelegate == null)) {
                this.onEndGrantUserUserScopeDelegate = new EndOperationDelegate(this.OnEndGrantUserUserScope);
            }
            if ((this.onGrantUserUserScopeCompletedDelegate == null)) {
                this.onGrantUserUserScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserUserScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantUserUserScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        grantUserIds}, this.onEndGrantUserUserScopeDelegate, this.onGrantUserUserScopeCompletedDelegate, userState);
        }
        
        public int RevokeUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeUserIds) {
            return base.Channel.RevokeUserUserScope(userInfo, userId, permissionItemCode, revokeUserIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserUserScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeUserIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserUserScope(userInfo, userId, permissionItemCode, revokeUserIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserUserScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserUserScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserUserScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeUserIds = ((string[])(inValues[3]));
            return this.BeginRevokeUserUserScope(userInfo, userId, permissionItemCode, revokeUserIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserUserScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserUserScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserUserScopeCompleted(object state) {
            if ((this.RevokeUserUserScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserUserScopeCompleted(this, new RevokeUserUserScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeUserIds) {
            this.RevokeUserUserScopeAsync(userInfo, userId, permissionItemCode, revokeUserIds, null);
        }
        
        public void RevokeUserUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeUserIds, object userState) {
            if ((this.onBeginRevokeUserUserScopeDelegate == null)) {
                this.onBeginRevokeUserUserScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeUserUserScope);
            }
            if ((this.onEndRevokeUserUserScopeDelegate == null)) {
                this.onEndRevokeUserUserScopeDelegate = new EndOperationDelegate(this.OnEndRevokeUserUserScope);
            }
            if ((this.onRevokeUserUserScopeCompletedDelegate == null)) {
                this.onRevokeUserUserScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserUserScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeUserUserScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        revokeUserIds}, this.onEndRevokeUserUserScopeDelegate, this.onRevokeUserUserScopeCompletedDelegate, userState);
        }
        
        public string[] GetScopeRoleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetScopeRoleIdsByUserId(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeRoleIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeRoleIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeRoleIdsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeRoleIdsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeRoleIdsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeRoleIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeRoleIdsByUserId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeRoleIdsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeRoleIdsByUserIdCompleted(object state) {
            if ((this.GetScopeRoleIdsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeRoleIdsByUserIdCompleted(this, new GetScopeRoleIdsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeRoleIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetScopeRoleIdsByUserIdAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetScopeRoleIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeRoleIdsByUserIdDelegate == null)) {
                this.onBeginGetScopeRoleIdsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeRoleIdsByUserId);
            }
            if ((this.onEndGetScopeRoleIdsByUserIdDelegate == null)) {
                this.onEndGetScopeRoleIdsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetScopeRoleIdsByUserId);
            }
            if ((this.onGetScopeRoleIdsByUserIdCompletedDelegate == null)) {
                this.onGetScopeRoleIdsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeRoleIdsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeRoleIdsByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetScopeRoleIdsByUserIdDelegate, this.onGetScopeRoleIdsByUserIdCompletedDelegate, userState);
        }
        
        public int GrantUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantRoleIds) {
            return base.Channel.GrantUserRoleScope(userInfo, userId, permissionItemCode, grantRoleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantRoleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserRoleScope(userInfo, userId, permissionItemCode, grantRoleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantUserRoleScope(System.IAsyncResult result) {
            return base.Channel.EndGrantUserRoleScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserRoleScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantRoleIds = ((string[])(inValues[3]));
            return this.BeginGrantUserRoleScope(userInfo, userId, permissionItemCode, grantRoleIds, callback, asyncState);
        }
        
        private object[] OnEndGrantUserRoleScope(System.IAsyncResult result) {
            int retVal = this.EndGrantUserRoleScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserRoleScopeCompleted(object state) {
            if ((this.GrantUserRoleScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserRoleScopeCompleted(this, new GrantUserRoleScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantRoleIds) {
            this.GrantUserRoleScopeAsync(userInfo, userId, permissionItemCode, grantRoleIds, null);
        }
        
        public void GrantUserRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantRoleIds, object userState) {
            if ((this.onBeginGrantUserRoleScopeDelegate == null)) {
                this.onBeginGrantUserRoleScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantUserRoleScope);
            }
            if ((this.onEndGrantUserRoleScopeDelegate == null)) {
                this.onEndGrantUserRoleScopeDelegate = new EndOperationDelegate(this.OnEndGrantUserRoleScope);
            }
            if ((this.onGrantUserRoleScopeCompletedDelegate == null)) {
                this.onGrantUserRoleScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserRoleScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantUserRoleScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        grantRoleIds}, this.onEndGrantUserRoleScopeDelegate, this.onGrantUserRoleScopeCompletedDelegate, userState);
        }
        
        public int RevokeUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeRoleds) {
            return base.Channel.RevokeUserRoleScope(userInfo, userId, permissionItemCode, revokeRoleds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserRoleScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeRoleds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserRoleScope(userInfo, userId, permissionItemCode, revokeRoleds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserRoleScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserRoleScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserRoleScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeRoleds = ((string[])(inValues[3]));
            return this.BeginRevokeUserRoleScope(userInfo, userId, permissionItemCode, revokeRoleds, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserRoleScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserRoleScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserRoleScopeCompleted(object state) {
            if ((this.RevokeUserRoleScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserRoleScopeCompleted(this, new RevokeUserRoleScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeRoleds) {
            this.RevokeUserRoleScopeAsync(userInfo, userId, permissionItemCode, revokeRoleds, null);
        }
        
        public void RevokeUserRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokeRoleds, object userState) {
            if ((this.onBeginRevokeUserRoleScopeDelegate == null)) {
                this.onBeginRevokeUserRoleScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeUserRoleScope);
            }
            if ((this.onEndRevokeUserRoleScopeDelegate == null)) {
                this.onEndRevokeUserRoleScopeDelegate = new EndOperationDelegate(this.OnEndRevokeUserRoleScope);
            }
            if ((this.onRevokeUserRoleScopeCompletedDelegate == null)) {
                this.onRevokeUserRoleScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserRoleScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeUserRoleScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        revokeRoleds}, this.onEndRevokeUserRoleScopeDelegate, this.onRevokeUserRoleScopeCompletedDelegate, userState);
        }
        
        public string[] GetScopePermissionItemIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetScopePermissionItemIdsByUserId(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopePermissionItemIdsByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopePermissionItemIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopePermissionItemIdsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetScopePermissionItemIdsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopePermissionItemIdsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopePermissionItemIdsByUserId(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopePermissionItemIdsByUserId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopePermissionItemIdsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopePermissionItemIdsByUserIdCompleted(object state) {
            if ((this.GetScopePermissionItemIdsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopePermissionItemIdsByUserIdCompleted(this, new GetScopePermissionItemIdsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopePermissionItemIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetScopePermissionItemIdsByUserIdAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetScopePermissionItemIdsByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopePermissionItemIdsByUserIdDelegate == null)) {
                this.onBeginGetScopePermissionItemIdsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopePermissionItemIdsByUserId);
            }
            if ((this.onEndGetScopePermissionItemIdsByUserIdDelegate == null)) {
                this.onEndGetScopePermissionItemIdsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetScopePermissionItemIdsByUserId);
            }
            if ((this.onGetScopePermissionItemIdsByUserIdCompletedDelegate == null)) {
                this.onGetScopePermissionItemIdsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopePermissionItemIdsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopePermissionItemIdsByUserIdDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetScopePermissionItemIdsByUserIdDelegate, this.onGetScopePermissionItemIdsByUserIdCompletedDelegate, userState);
        }
        
        public int GrantUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantPermissionItemIds) {
            return base.Channel.GrantUserPermissionItemScope(userInfo, userId, permissionItemCode, grantPermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantUserPermissionItemScope(userInfo, userId, permissionItemCode, grantPermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantUserPermissionItemScope(System.IAsyncResult result) {
            return base.Channel.EndGrantUserPermissionItemScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantUserPermissionItemScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantPermissionItemIds = ((string[])(inValues[3]));
            return this.BeginGrantUserPermissionItemScope(userInfo, userId, permissionItemCode, grantPermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndGrantUserPermissionItemScope(System.IAsyncResult result) {
            int retVal = this.EndGrantUserPermissionItemScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantUserPermissionItemScopeCompleted(object state) {
            if ((this.GrantUserPermissionItemScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantUserPermissionItemScopeCompleted(this, new GrantUserPermissionItemScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantUserPermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantPermissionItemIds) {
            this.GrantUserPermissionItemScopeAsync(userInfo, userId, permissionItemCode, grantPermissionItemIds, null);
        }
        
        public void GrantUserPermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] grantPermissionItemIds, object userState) {
            if ((this.onBeginGrantUserPermissionItemScopeDelegate == null)) {
                this.onBeginGrantUserPermissionItemScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantUserPermissionItemScope);
            }
            if ((this.onEndGrantUserPermissionItemScopeDelegate == null)) {
                this.onEndGrantUserPermissionItemScopeDelegate = new EndOperationDelegate(this.OnEndGrantUserPermissionItemScope);
            }
            if ((this.onGrantUserPermissionItemScopeCompletedDelegate == null)) {
                this.onGrantUserPermissionItemScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantUserPermissionItemScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantUserPermissionItemScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        grantPermissionItemIds}, this.onEndGrantUserPermissionItemScopeDelegate, this.onGrantUserPermissionItemScopeCompletedDelegate, userState);
        }
        
        public int RevokeUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokePermissionItemIds) {
            return base.Channel.RevokeUserPermissionItemScope(userInfo, userId, permissionItemCode, revokePermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeUserPermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeUserPermissionItemScope(userInfo, userId, permissionItemCode, revokePermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeUserPermissionItemScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeUserPermissionItemScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeUserPermissionItemScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokePermissionItemIds = ((string[])(inValues[3]));
            return this.BeginRevokeUserPermissionItemScope(userInfo, userId, permissionItemCode, revokePermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeUserPermissionItemScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeUserPermissionItemScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeUserPermissionItemScopeCompleted(object state) {
            if ((this.RevokeUserPermissionItemScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeUserPermissionItemScopeCompleted(this, new RevokeUserPermissionItemScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeUserPermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokePermissionItemIds) {
            this.RevokeUserPermissionItemScopeAsync(userInfo, userId, permissionItemCode, revokePermissionItemIds, null);
        }
        
        public void RevokeUserPermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, string[] revokePermissionItemIds, object userState) {
            if ((this.onBeginRevokeUserPermissionItemScopeDelegate == null)) {
                this.onBeginRevokeUserPermissionItemScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeUserPermissionItemScope);
            }
            if ((this.onEndRevokeUserPermissionItemScopeDelegate == null)) {
                this.onEndRevokeUserPermissionItemScopeDelegate = new EndOperationDelegate(this.OnEndRevokeUserPermissionItemScope);
            }
            if ((this.onRevokeUserPermissionItemScopeCompletedDelegate == null)) {
                this.onRevokeUserPermissionItemScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeUserPermissionItemScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeUserPermissionItemScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode,
                        revokePermissionItemIds}, this.onEndRevokeUserPermissionItemScopeDelegate, this.onRevokeUserPermissionItemScopeCompletedDelegate, userState);
        }
        
        public int ClearUserPermissionByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            return base.Channel.ClearUserPermissionByUserId(userInfo, userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearUserPermissionByUserId(RDIFramework.Utilities.UserInfo userInfo, string userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearUserPermissionByUserId(userInfo, userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndClearUserPermissionByUserId(System.IAsyncResult result) {
            return base.Channel.EndClearUserPermissionByUserId(result);
        }
        
        private System.IAsyncResult OnBeginClearUserPermissionByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            return this.BeginClearUserPermissionByUserId(userInfo, userId, callback, asyncState);
        }
        
        private object[] OnEndClearUserPermissionByUserId(System.IAsyncResult result) {
            int retVal = this.EndClearUserPermissionByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearUserPermissionByUserIdCompleted(object state) {
            if ((this.ClearUserPermissionByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearUserPermissionByUserIdCompleted(this, new ClearUserPermissionByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearUserPermissionByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId) {
            this.ClearUserPermissionByUserIdAsync(userInfo, userId, null);
        }
        
        public void ClearUserPermissionByUserIdAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, object userState) {
            if ((this.onBeginClearUserPermissionByUserIdDelegate == null)) {
                this.onBeginClearUserPermissionByUserIdDelegate = new BeginOperationDelegate(this.OnBeginClearUserPermissionByUserId);
            }
            if ((this.onEndClearUserPermissionByUserIdDelegate == null)) {
                this.onEndClearUserPermissionByUserIdDelegate = new EndOperationDelegate(this.OnEndClearUserPermissionByUserId);
            }
            if ((this.onClearUserPermissionByUserIdCompletedDelegate == null)) {
                this.onClearUserPermissionByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearUserPermissionByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginClearUserPermissionByUserIdDelegate, new object[] {
                        userInfo,
                        userId}, this.onEndClearUserPermissionByUserIdDelegate, this.onClearUserPermissionByUserIdCompletedDelegate, userState);
        }
        
        public int ClearUserPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.ClearUserPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearUserPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearUserPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndClearUserPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndClearUserPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginClearUserPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginClearUserPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndClearUserPermissionScope(System.IAsyncResult result) {
            int retVal = this.EndClearUserPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearUserPermissionScopeCompleted(object state) {
            if ((this.ClearUserPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearUserPermissionScopeCompleted(this, new ClearUserPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearUserPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.ClearUserPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void ClearUserPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginClearUserPermissionScopeDelegate == null)) {
                this.onBeginClearUserPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginClearUserPermissionScope);
            }
            if ((this.onEndClearUserPermissionScopeDelegate == null)) {
                this.onEndClearUserPermissionScopeDelegate = new EndOperationDelegate(this.OnEndClearUserPermissionScope);
            }
            if ((this.onClearUserPermissionScopeCompletedDelegate == null)) {
                this.onClearUserPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearUserPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginClearUserPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndClearUserPermissionScopeDelegate, this.onClearUserPermissionScopeCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetModuleDT(RDIFramework.Utilities.UserInfo userInfo) {
            return base.Channel.GetModuleDT(userInfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetModuleDT(RDIFramework.Utilities.UserInfo userInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetModuleDT(userInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetModuleDT(System.IAsyncResult result) {
            return base.Channel.EndGetModuleDT(result);
        }
        
        private System.IAsyncResult OnBeginGetModuleDT(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            return this.BeginGetModuleDT(userInfo, callback, asyncState);
        }
        
        private object[] OnEndGetModuleDT(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetModuleDT(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetModuleDTCompleted(object state) {
            if ((this.GetModuleDTCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetModuleDTCompleted(this, new GetModuleDTCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetModuleDTAsync(RDIFramework.Utilities.UserInfo userInfo) {
            this.GetModuleDTAsync(userInfo, null);
        }
        
        public void GetModuleDTAsync(RDIFramework.Utilities.UserInfo userInfo, object userState) {
            if ((this.onBeginGetModuleDTDelegate == null)) {
                this.onBeginGetModuleDTDelegate = new BeginOperationDelegate(this.OnBeginGetModuleDT);
            }
            if ((this.onEndGetModuleDTDelegate == null)) {
                this.onEndGetModuleDTDelegate = new EndOperationDelegate(this.OnEndGetModuleDT);
            }
            if ((this.onGetModuleDTCompletedDelegate == null)) {
                this.onGetModuleDTCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetModuleDTCompleted);
            }
            base.InvokeAsync(this.onBeginGetModuleDTDelegate, new object[] {
                        userInfo}, this.onEndGetModuleDTDelegate, this.onGetModuleDTCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetUserDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetUserDTByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetUserDTByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetUserDTByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetUserDTByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetUserDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetUserDTByPermissionScope(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetUserDTByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserDTByPermissionScopeCompleted(object state) {
            if ((this.GetUserDTByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserDTByPermissionScopeCompleted(this, new GetUserDTByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetUserDTByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetUserDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetUserDTByPermissionScopeDelegate == null)) {
                this.onBeginGetUserDTByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetUserDTByPermissionScope);
            }
            if ((this.onEndGetUserDTByPermissionScopeDelegate == null)) {
                this.onEndGetUserDTByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetUserDTByPermissionScope);
            }
            if ((this.onGetUserDTByPermissionScopeCompletedDelegate == null)) {
                this.onGetUserDTByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserDTByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDTByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetUserDTByPermissionScopeDelegate, this.onGetUserDTByPermissionScopeCompletedDelegate, userState);
        }
        
        public string[] GetUserIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetUserIdsByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserIdsByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetUserIdsByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetUserIdsByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetUserIdsByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetUserIdsByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetUserIdsByPermissionScope(System.IAsyncResult result) {
            string[] retVal = this.EndGetUserIdsByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserIdsByPermissionScopeCompleted(object state) {
            if ((this.GetUserIdsByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserIdsByPermissionScopeCompleted(this, new GetUserIdsByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserIdsByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetUserIdsByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetUserIdsByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetUserIdsByPermissionScopeDelegate == null)) {
                this.onBeginGetUserIdsByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetUserIdsByPermissionScope);
            }
            if ((this.onEndGetUserIdsByPermissionScopeDelegate == null)) {
                this.onEndGetUserIdsByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetUserIdsByPermissionScope);
            }
            if ((this.onGetUserIdsByPermissionScopeCompletedDelegate == null)) {
                this.onGetUserIdsByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserIdsByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserIdsByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetUserIdsByPermissionScopeDelegate, this.onGetUserIdsByPermissionScopeCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetRoleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetRoleDTByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRoleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoleDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetRoleDTByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetRoleDTByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetRoleDTByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetRoleDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetRoleDTByPermissionScope(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetRoleDTByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRoleDTByPermissionScopeCompleted(object state) {
            if ((this.GetRoleDTByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoleDTByPermissionScopeCompleted(this, new GetRoleDTByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoleDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetRoleDTByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetRoleDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetRoleDTByPermissionScopeDelegate == null)) {
                this.onBeginGetRoleDTByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetRoleDTByPermissionScope);
            }
            if ((this.onEndGetRoleDTByPermissionScopeDelegate == null)) {
                this.onEndGetRoleDTByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetRoleDTByPermissionScope);
            }
            if ((this.onGetRoleDTByPermissionScopeCompletedDelegate == null)) {
                this.onGetRoleDTByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoleDTByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoleDTByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetRoleDTByPermissionScopeDelegate, this.onGetRoleDTByPermissionScopeCompletedDelegate, userState);
        }
        
        public string[] GetRoleIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetRoleIdsByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRoleIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoleIdsByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetRoleIdsByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetRoleIdsByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetRoleIdsByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetRoleIdsByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetRoleIdsByPermissionScope(System.IAsyncResult result) {
            string[] retVal = this.EndGetRoleIdsByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRoleIdsByPermissionScopeCompleted(object state) {
            if ((this.GetRoleIdsByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoleIdsByPermissionScopeCompleted(this, new GetRoleIdsByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoleIdsByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetRoleIdsByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetRoleIdsByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetRoleIdsByPermissionScopeDelegate == null)) {
                this.onBeginGetRoleIdsByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetRoleIdsByPermissionScope);
            }
            if ((this.onEndGetRoleIdsByPermissionScopeDelegate == null)) {
                this.onEndGetRoleIdsByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetRoleIdsByPermissionScope);
            }
            if ((this.onGetRoleIdsByPermissionScopeCompletedDelegate == null)) {
                this.onGetRoleIdsByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoleIdsByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoleIdsByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetRoleIdsByPermissionScopeDelegate, this.onGetRoleIdsByPermissionScopeCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetModuleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetModuleDTByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetModuleDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetModuleDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetModuleDTByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetModuleDTByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetModuleDTByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetModuleDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetModuleDTByPermissionScope(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetModuleDTByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetModuleDTByPermissionScopeCompleted(object state) {
            if ((this.GetModuleDTByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetModuleDTByPermissionScopeCompleted(this, new GetModuleDTByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetModuleDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetModuleDTByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetModuleDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetModuleDTByPermissionScopeDelegate == null)) {
                this.onBeginGetModuleDTByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetModuleDTByPermissionScope);
            }
            if ((this.onEndGetModuleDTByPermissionScopeDelegate == null)) {
                this.onEndGetModuleDTByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetModuleDTByPermissionScope);
            }
            if ((this.onGetModuleDTByPermissionScopeCompletedDelegate == null)) {
                this.onGetModuleDTByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetModuleDTByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetModuleDTByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetModuleDTByPermissionScopeDelegate, this.onGetModuleDTByPermissionScopeCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetPermissionItemDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetPermissionItemDTByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetPermissionItemDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPermissionItemDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetPermissionItemDTByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetPermissionItemDTByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetPermissionItemDTByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetPermissionItemDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetPermissionItemDTByPermissionScope(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetPermissionItemDTByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPermissionItemDTByPermissionScopeCompleted(object state) {
            if ((this.GetPermissionItemDTByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPermissionItemDTByPermissionScopeCompleted(this, new GetPermissionItemDTByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPermissionItemDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetPermissionItemDTByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetPermissionItemDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetPermissionItemDTByPermissionScopeDelegate == null)) {
                this.onBeginGetPermissionItemDTByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetPermissionItemDTByPermissionScope);
            }
            if ((this.onEndGetPermissionItemDTByPermissionScopeDelegate == null)) {
                this.onEndGetPermissionItemDTByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetPermissionItemDTByPermissionScope);
            }
            if ((this.onGetPermissionItemDTByPermissionScopeCompletedDelegate == null)) {
                this.onGetPermissionItemDTByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPermissionItemDTByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetPermissionItemDTByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetPermissionItemDTByPermissionScopeDelegate, this.onGetPermissionItemDTByPermissionScopeCompletedDelegate, userState);
        }
        
        public System.Data.DataTable GetOrganizeDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetOrganizeDTByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizeDTByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizeDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndGetOrganizeDTByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizeDTByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizeDTByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetOrganizeDTByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizeDTByPermissionScope(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndGetOrganizeDTByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizeDTByPermissionScopeCompleted(object state) {
            if ((this.GetOrganizeDTByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizeDTByPermissionScopeCompleted(this, new GetOrganizeDTByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizeDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetOrganizeDTByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetOrganizeDTByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetOrganizeDTByPermissionScopeDelegate == null)) {
                this.onBeginGetOrganizeDTByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizeDTByPermissionScope);
            }
            if ((this.onEndGetOrganizeDTByPermissionScopeDelegate == null)) {
                this.onEndGetOrganizeDTByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetOrganizeDTByPermissionScope);
            }
            if ((this.onGetOrganizeDTByPermissionScopeCompletedDelegate == null)) {
                this.onGetOrganizeDTByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizeDTByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizeDTByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetOrganizeDTByPermissionScopeDelegate, this.onGetOrganizeDTByPermissionScopeCompletedDelegate, userState);
        }
        
        public string[] GetOrganizeIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            return base.Channel.GetOrganizeIdsByPermissionScope(userInfo, userId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrganizeIdsByPermissionScope(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrganizeIdsByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetOrganizeIdsByPermissionScope(System.IAsyncResult result) {
            return base.Channel.EndGetOrganizeIdsByPermissionScope(result);
        }
        
        private System.IAsyncResult OnBeginGetOrganizeIdsByPermissionScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string userId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetOrganizeIdsByPermissionScope(userInfo, userId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetOrganizeIdsByPermissionScope(System.IAsyncResult result) {
            string[] retVal = this.EndGetOrganizeIdsByPermissionScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrganizeIdsByPermissionScopeCompleted(object state) {
            if ((this.GetOrganizeIdsByPermissionScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrganizeIdsByPermissionScopeCompleted(this, new GetOrganizeIdsByPermissionScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrganizeIdsByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode) {
            this.GetOrganizeIdsByPermissionScopeAsync(userInfo, userId, permissionItemCode, null);
        }
        
        public void GetOrganizeIdsByPermissionScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string userId, string permissionItemCode, object userState) {
            if ((this.onBeginGetOrganizeIdsByPermissionScopeDelegate == null)) {
                this.onBeginGetOrganizeIdsByPermissionScopeDelegate = new BeginOperationDelegate(this.OnBeginGetOrganizeIdsByPermissionScope);
            }
            if ((this.onEndGetOrganizeIdsByPermissionScopeDelegate == null)) {
                this.onEndGetOrganizeIdsByPermissionScopeDelegate = new EndOperationDelegate(this.OnEndGetOrganizeIdsByPermissionScope);
            }
            if ((this.onGetOrganizeIdsByPermissionScopeCompletedDelegate == null)) {
                this.onGetOrganizeIdsByPermissionScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrganizeIdsByPermissionScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrganizeIdsByPermissionScopeDelegate, new object[] {
                        userInfo,
                        userId,
                        permissionItemCode}, this.onEndGetOrganizeIdsByPermissionScopeDelegate, this.onGetOrganizeIdsByPermissionScopeCompletedDelegate, userState);
        }
        
        public string[] GetRolePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string roleId) {
            return base.Channel.GetRolePermissionItemIds(userInfo, roleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRolePermissionItemIds(RDIFramework.Utilities.UserInfo userInfo, string roleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRolePermissionItemIds(userInfo, roleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetRolePermissionItemIds(System.IAsyncResult result) {
            return base.Channel.EndGetRolePermissionItemIds(result);
        }
        
        private System.IAsyncResult OnBeginGetRolePermissionItemIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            return this.BeginGetRolePermissionItemIds(userInfo, roleId, callback, asyncState);
        }
        
        private object[] OnEndGetRolePermissionItemIds(System.IAsyncResult result) {
            string[] retVal = this.EndGetRolePermissionItemIds(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRolePermissionItemIdsCompleted(object state) {
            if ((this.GetRolePermissionItemIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRolePermissionItemIdsCompleted(this, new GetRolePermissionItemIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRolePermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId) {
            this.GetRolePermissionItemIdsAsync(userInfo, roleId, null);
        }
        
        public void GetRolePermissionItemIdsAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, object userState) {
            if ((this.onBeginGetRolePermissionItemIdsDelegate == null)) {
                this.onBeginGetRolePermissionItemIdsDelegate = new BeginOperationDelegate(this.OnBeginGetRolePermissionItemIds);
            }
            if ((this.onEndGetRolePermissionItemIdsDelegate == null)) {
                this.onEndGetRolePermissionItemIdsDelegate = new EndOperationDelegate(this.OnEndGetRolePermissionItemIds);
            }
            if ((this.onGetRolePermissionItemIdsCompletedDelegate == null)) {
                this.onGetRolePermissionItemIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRolePermissionItemIdsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRolePermissionItemIdsDelegate, new object[] {
                        userInfo,
                        roleId}, this.onEndGetRolePermissionItemIdsDelegate, this.onGetRolePermissionItemIdsCompletedDelegate, userState);
        }
        
        public string[] GetRoleIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId) {
            return base.Channel.GetRoleIdsByPermissionItemId(userInfo, permissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRoleIdsByPermissionItemId(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoleIdsByPermissionItemId(userInfo, permissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetRoleIdsByPermissionItemId(System.IAsyncResult result) {
            return base.Channel.EndGetRoleIdsByPermissionItemId(result);
        }
        
        private System.IAsyncResult OnBeginGetRoleIdsByPermissionItemId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string permissionItemId = ((string)(inValues[1]));
            return this.BeginGetRoleIdsByPermissionItemId(userInfo, permissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGetRoleIdsByPermissionItemId(System.IAsyncResult result) {
            string[] retVal = this.EndGetRoleIdsByPermissionItemId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRoleIdsByPermissionItemIdCompleted(object state) {
            if ((this.GetRoleIdsByPermissionItemIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoleIdsByPermissionItemIdCompleted(this, new GetRoleIdsByPermissionItemIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoleIdsByPermissionItemIdAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId) {
            this.GetRoleIdsByPermissionItemIdAsync(userInfo, permissionItemId, null);
        }
        
        public void GetRoleIdsByPermissionItemIdAsync(RDIFramework.Utilities.UserInfo userInfo, string permissionItemId, object userState) {
            if ((this.onBeginGetRoleIdsByPermissionItemIdDelegate == null)) {
                this.onBeginGetRoleIdsByPermissionItemIdDelegate = new BeginOperationDelegate(this.OnBeginGetRoleIdsByPermissionItemId);
            }
            if ((this.onEndGetRoleIdsByPermissionItemIdDelegate == null)) {
                this.onEndGetRoleIdsByPermissionItemIdDelegate = new EndOperationDelegate(this.OnEndGetRoleIdsByPermissionItemId);
            }
            if ((this.onGetRoleIdsByPermissionItemIdCompletedDelegate == null)) {
                this.onGetRoleIdsByPermissionItemIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoleIdsByPermissionItemIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoleIdsByPermissionItemIdDelegate, new object[] {
                        userInfo,
                        permissionItemId}, this.onEndGetRoleIdsByPermissionItemIdDelegate, this.onGetRoleIdsByPermissionItemIdCompletedDelegate, userState);
        }
        
        public int GrantRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] grantPermissionItemIds) {
            return base.Channel.GrantRolePermissions(userInfo, roleIds, grantPermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRolePermissions(userInfo, roleIds, grantPermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantRolePermissions(System.IAsyncResult result) {
            return base.Channel.EndGrantRolePermissions(result);
        }
        
        private System.IAsyncResult OnBeginGrantRolePermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string[] roleIds = ((string[])(inValues[1]));
            string[] grantPermissionItemIds = ((string[])(inValues[2]));
            return this.BeginGrantRolePermissions(userInfo, roleIds, grantPermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndGrantRolePermissions(System.IAsyncResult result) {
            int retVal = this.EndGrantRolePermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRolePermissionsCompleted(object state) {
            if ((this.GrantRolePermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRolePermissionsCompleted(this, new GrantRolePermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRolePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] grantPermissionItemIds) {
            this.GrantRolePermissionsAsync(userInfo, roleIds, grantPermissionItemIds, null);
        }
        
        public void GrantRolePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] grantPermissionItemIds, object userState) {
            if ((this.onBeginGrantRolePermissionsDelegate == null)) {
                this.onBeginGrantRolePermissionsDelegate = new BeginOperationDelegate(this.OnBeginGrantRolePermissions);
            }
            if ((this.onEndGrantRolePermissionsDelegate == null)) {
                this.onEndGrantRolePermissionsDelegate = new EndOperationDelegate(this.OnEndGrantRolePermissions);
            }
            if ((this.onGrantRolePermissionsCompletedDelegate == null)) {
                this.onGrantRolePermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRolePermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRolePermissionsDelegate, new object[] {
                        userInfo,
                        roleIds,
                        grantPermissionItemIds}, this.onEndGrantRolePermissionsDelegate, this.onGrantRolePermissionsCompletedDelegate, userState);
        }
        
        public string GrantRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string grantPermissionItemCode) {
            return base.Channel.GrantRolePermission(userInfo, roleName, grantPermissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string grantPermissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRolePermission(userInfo, roleName, grantPermissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantRolePermission(System.IAsyncResult result) {
            return base.Channel.EndGrantRolePermission(result);
        }
        
        private System.IAsyncResult OnBeginGrantRolePermission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleName = ((string)(inValues[1]));
            string grantPermissionItemCode = ((string)(inValues[2]));
            return this.BeginGrantRolePermission(userInfo, roleName, grantPermissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGrantRolePermission(System.IAsyncResult result) {
            string retVal = this.EndGrantRolePermission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRolePermissionCompleted(object state) {
            if ((this.GrantRolePermissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRolePermissionCompleted(this, new GrantRolePermissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRolePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string roleName, string grantPermissionItemCode) {
            this.GrantRolePermissionAsync(userInfo, roleName, grantPermissionItemCode, null);
        }
        
        public void GrantRolePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string roleName, string grantPermissionItemCode, object userState) {
            if ((this.onBeginGrantRolePermissionDelegate == null)) {
                this.onBeginGrantRolePermissionDelegate = new BeginOperationDelegate(this.OnBeginGrantRolePermission);
            }
            if ((this.onEndGrantRolePermissionDelegate == null)) {
                this.onEndGrantRolePermissionDelegate = new EndOperationDelegate(this.OnEndGrantRolePermission);
            }
            if ((this.onGrantRolePermissionCompletedDelegate == null)) {
                this.onGrantRolePermissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRolePermissionCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRolePermissionDelegate, new object[] {
                        userInfo,
                        roleName,
                        grantPermissionItemCode}, this.onEndGrantRolePermissionDelegate, this.onGrantRolePermissionCompletedDelegate, userState);
        }
        
        public string GrantRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string grantPermissionItemId) {
            return base.Channel.GrantRolePermissionById(userInfo, roleId, grantPermissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string grantPermissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRolePermissionById(userInfo, roleId, grantPermissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGrantRolePermissionById(System.IAsyncResult result) {
            return base.Channel.EndGrantRolePermissionById(result);
        }
        
        private System.IAsyncResult OnBeginGrantRolePermissionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string grantPermissionItemId = ((string)(inValues[2]));
            return this.BeginGrantRolePermissionById(userInfo, roleId, grantPermissionItemId, callback, asyncState);
        }
        
        private object[] OnEndGrantRolePermissionById(System.IAsyncResult result) {
            string retVal = this.EndGrantRolePermissionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRolePermissionByIdCompleted(object state) {
            if ((this.GrantRolePermissionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRolePermissionByIdCompleted(this, new GrantRolePermissionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRolePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string grantPermissionItemId) {
            this.GrantRolePermissionByIdAsync(userInfo, roleId, grantPermissionItemId, null);
        }
        
        public void GrantRolePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string grantPermissionItemId, object userState) {
            if ((this.onBeginGrantRolePermissionByIdDelegate == null)) {
                this.onBeginGrantRolePermissionByIdDelegate = new BeginOperationDelegate(this.OnBeginGrantRolePermissionById);
            }
            if ((this.onEndGrantRolePermissionByIdDelegate == null)) {
                this.onEndGrantRolePermissionByIdDelegate = new EndOperationDelegate(this.OnEndGrantRolePermissionById);
            }
            if ((this.onGrantRolePermissionByIdCompletedDelegate == null)) {
                this.onGrantRolePermissionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRolePermissionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRolePermissionByIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        grantPermissionItemId}, this.onEndGrantRolePermissionByIdDelegate, this.onGrantRolePermissionByIdCompletedDelegate, userState);
        }
        
        public int RevokeRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] revokePermissionItemIds) {
            return base.Channel.RevokeRolePermissions(userInfo, roleIds, revokePermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRolePermissions(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRolePermissions(userInfo, roleIds, revokePermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRolePermissions(System.IAsyncResult result) {
            return base.Channel.EndRevokeRolePermissions(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRolePermissions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string[] roleIds = ((string[])(inValues[1]));
            string[] revokePermissionItemIds = ((string[])(inValues[2]));
            return this.BeginRevokeRolePermissions(userInfo, roleIds, revokePermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeRolePermissions(System.IAsyncResult result) {
            int retVal = this.EndRevokeRolePermissions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRolePermissionsCompleted(object state) {
            if ((this.RevokeRolePermissionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRolePermissionsCompleted(this, new RevokeRolePermissionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRolePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] revokePermissionItemIds) {
            this.RevokeRolePermissionsAsync(userInfo, roleIds, revokePermissionItemIds, null);
        }
        
        public void RevokeRolePermissionsAsync(RDIFramework.Utilities.UserInfo userInfo, string[] roleIds, string[] revokePermissionItemIds, object userState) {
            if ((this.onBeginRevokeRolePermissionsDelegate == null)) {
                this.onBeginRevokeRolePermissionsDelegate = new BeginOperationDelegate(this.OnBeginRevokeRolePermissions);
            }
            if ((this.onEndRevokeRolePermissionsDelegate == null)) {
                this.onEndRevokeRolePermissionsDelegate = new EndOperationDelegate(this.OnEndRevokeRolePermissions);
            }
            if ((this.onRevokeRolePermissionsCompletedDelegate == null)) {
                this.onRevokeRolePermissionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRolePermissionsCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRolePermissionsDelegate, new object[] {
                        userInfo,
                        roleIds,
                        revokePermissionItemIds}, this.onEndRevokeRolePermissionsDelegate, this.onRevokeRolePermissionsCompletedDelegate, userState);
        }
        
        public int RevokeRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string revokePermissionItemCode) {
            return base.Channel.RevokeRolePermission(userInfo, roleName, revokePermissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRolePermission(RDIFramework.Utilities.UserInfo userInfo, string roleName, string revokePermissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRolePermission(userInfo, roleName, revokePermissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRolePermission(System.IAsyncResult result) {
            return base.Channel.EndRevokeRolePermission(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRolePermission(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleName = ((string)(inValues[1]));
            string revokePermissionItemCode = ((string)(inValues[2]));
            return this.BeginRevokeRolePermission(userInfo, roleName, revokePermissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndRevokeRolePermission(System.IAsyncResult result) {
            int retVal = this.EndRevokeRolePermission(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRolePermissionCompleted(object state) {
            if ((this.RevokeRolePermissionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRolePermissionCompleted(this, new RevokeRolePermissionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRolePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string roleName, string revokePermissionItemCode) {
            this.RevokeRolePermissionAsync(userInfo, roleName, revokePermissionItemCode, null);
        }
        
        public void RevokeRolePermissionAsync(RDIFramework.Utilities.UserInfo userInfo, string roleName, string revokePermissionItemCode, object userState) {
            if ((this.onBeginRevokeRolePermissionDelegate == null)) {
                this.onBeginRevokeRolePermissionDelegate = new BeginOperationDelegate(this.OnBeginRevokeRolePermission);
            }
            if ((this.onEndRevokeRolePermissionDelegate == null)) {
                this.onEndRevokeRolePermissionDelegate = new EndOperationDelegate(this.OnEndRevokeRolePermission);
            }
            if ((this.onRevokeRolePermissionCompletedDelegate == null)) {
                this.onRevokeRolePermissionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRolePermissionCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRolePermissionDelegate, new object[] {
                        userInfo,
                        roleName,
                        revokePermissionItemCode}, this.onEndRevokeRolePermissionDelegate, this.onRevokeRolePermissionCompletedDelegate, userState);
        }
        
        public int RevokeRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string revokePermissionItemId) {
            return base.Channel.RevokeRolePermissionById(userInfo, roleId, revokePermissionItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRolePermissionById(RDIFramework.Utilities.UserInfo userInfo, string roleId, string revokePermissionItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRolePermissionById(userInfo, roleId, revokePermissionItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRolePermissionById(System.IAsyncResult result) {
            return base.Channel.EndRevokeRolePermissionById(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRolePermissionById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string revokePermissionItemId = ((string)(inValues[2]));
            return this.BeginRevokeRolePermissionById(userInfo, roleId, revokePermissionItemId, callback, asyncState);
        }
        
        private object[] OnEndRevokeRolePermissionById(System.IAsyncResult result) {
            int retVal = this.EndRevokeRolePermissionById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRolePermissionByIdCompleted(object state) {
            if ((this.RevokeRolePermissionByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRolePermissionByIdCompleted(this, new RevokeRolePermissionByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRolePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string revokePermissionItemId) {
            this.RevokeRolePermissionByIdAsync(userInfo, roleId, revokePermissionItemId, null);
        }
        
        public void RevokeRolePermissionByIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string revokePermissionItemId, object userState) {
            if ((this.onBeginRevokeRolePermissionByIdDelegate == null)) {
                this.onBeginRevokeRolePermissionByIdDelegate = new BeginOperationDelegate(this.OnBeginRevokeRolePermissionById);
            }
            if ((this.onEndRevokeRolePermissionByIdDelegate == null)) {
                this.onEndRevokeRolePermissionByIdDelegate = new EndOperationDelegate(this.OnEndRevokeRolePermissionById);
            }
            if ((this.onRevokeRolePermissionByIdCompletedDelegate == null)) {
                this.onRevokeRolePermissionByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRolePermissionByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRolePermissionByIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        revokePermissionItemId}, this.onEndRevokeRolePermissionByIdDelegate, this.onRevokeRolePermissionByIdCompletedDelegate, userState);
        }
        
        public string[] GetScopeUserIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.GetScopeUserIdsByRoleId(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeUserIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeUserIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeUserIdsByRoleId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeUserIdsByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeUserIdsByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeUserIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeUserIdsByRoleId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeUserIdsByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeUserIdsByRoleIdCompleted(object state) {
            if ((this.GetScopeUserIdsByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeUserIdsByRoleIdCompleted(this, new GetScopeUserIdsByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeUserIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.GetScopeUserIdsByRoleIdAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void GetScopeUserIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeUserIdsByRoleIdDelegate == null)) {
                this.onBeginGetScopeUserIdsByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeUserIdsByRoleId);
            }
            if ((this.onEndGetScopeUserIdsByRoleIdDelegate == null)) {
                this.onEndGetScopeUserIdsByRoleIdDelegate = new EndOperationDelegate(this.OnEndGetScopeUserIdsByRoleId);
            }
            if ((this.onGetScopeUserIdsByRoleIdCompletedDelegate == null)) {
                this.onGetScopeUserIdsByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeUserIdsByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeUserIdsByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndGetScopeUserIdsByRoleIdDelegate, this.onGetScopeUserIdsByRoleIdCompletedDelegate, userState);
        }
        
        public string[] GetScopeRoleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.GetScopeRoleIdsByRoleId(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeRoleIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeRoleIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeRoleIdsByRoleId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeRoleIdsByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeRoleIdsByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeRoleIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeRoleIdsByRoleId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeRoleIdsByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeRoleIdsByRoleIdCompleted(object state) {
            if ((this.GetScopeRoleIdsByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeRoleIdsByRoleIdCompleted(this, new GetScopeRoleIdsByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeRoleIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.GetScopeRoleIdsByRoleIdAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void GetScopeRoleIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeRoleIdsByRoleIdDelegate == null)) {
                this.onBeginGetScopeRoleIdsByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeRoleIdsByRoleId);
            }
            if ((this.onEndGetScopeRoleIdsByRoleIdDelegate == null)) {
                this.onEndGetScopeRoleIdsByRoleIdDelegate = new EndOperationDelegate(this.OnEndGetScopeRoleIdsByRoleId);
            }
            if ((this.onGetScopeRoleIdsByRoleIdCompletedDelegate == null)) {
                this.onGetScopeRoleIdsByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeRoleIdsByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeRoleIdsByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndGetScopeRoleIdsByRoleIdDelegate, this.onGetScopeRoleIdsByRoleIdCompletedDelegate, userState);
        }
        
        public string[] GetScopeOrganizeIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.GetScopeOrganizeIdsByRoleId(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopeOrganizeIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopeOrganizeIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopeOrganizeIdsByRoleId(System.IAsyncResult result) {
            return base.Channel.EndGetScopeOrganizeIdsByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopeOrganizeIdsByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopeOrganizeIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopeOrganizeIdsByRoleId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopeOrganizeIdsByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopeOrganizeIdsByRoleIdCompleted(object state) {
            if ((this.GetScopeOrganizeIdsByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopeOrganizeIdsByRoleIdCompleted(this, new GetScopeOrganizeIdsByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopeOrganizeIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.GetScopeOrganizeIdsByRoleIdAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void GetScopeOrganizeIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopeOrganizeIdsByRoleIdDelegate == null)) {
                this.onBeginGetScopeOrganizeIdsByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopeOrganizeIdsByRoleId);
            }
            if ((this.onEndGetScopeOrganizeIdsByRoleIdDelegate == null)) {
                this.onEndGetScopeOrganizeIdsByRoleIdDelegate = new EndOperationDelegate(this.OnEndGetScopeOrganizeIdsByRoleId);
            }
            if ((this.onGetScopeOrganizeIdsByRoleIdCompletedDelegate == null)) {
                this.onGetScopeOrganizeIdsByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopeOrganizeIdsByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopeOrganizeIdsByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndGetScopeOrganizeIdsByRoleIdDelegate, this.onGetScopeOrganizeIdsByRoleIdCompletedDelegate, userState);
        }
        
        public int GrantRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantUserIds) {
            return base.Channel.GrantRoleUserScope(userInfo, roleId, permissionItemCode, grantUserIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantUserIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRoleUserScope(userInfo, roleId, permissionItemCode, grantUserIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantRoleUserScope(System.IAsyncResult result) {
            return base.Channel.EndGrantRoleUserScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantRoleUserScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantUserIds = ((string[])(inValues[3]));
            return this.BeginGrantRoleUserScope(userInfo, roleId, permissionItemCode, grantUserIds, callback, asyncState);
        }
        
        private object[] OnEndGrantRoleUserScope(System.IAsyncResult result) {
            int retVal = this.EndGrantRoleUserScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRoleUserScopeCompleted(object state) {
            if ((this.GrantRoleUserScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRoleUserScopeCompleted(this, new GrantRoleUserScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRoleUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantUserIds) {
            this.GrantRoleUserScopeAsync(userInfo, roleId, permissionItemCode, grantUserIds, null);
        }
        
        public void GrantRoleUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantUserIds, object userState) {
            if ((this.onBeginGrantRoleUserScopeDelegate == null)) {
                this.onBeginGrantRoleUserScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantRoleUserScope);
            }
            if ((this.onEndGrantRoleUserScopeDelegate == null)) {
                this.onEndGrantRoleUserScopeDelegate = new EndOperationDelegate(this.OnEndGrantRoleUserScope);
            }
            if ((this.onGrantRoleUserScopeCompletedDelegate == null)) {
                this.onGrantRoleUserScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRoleUserScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRoleUserScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        grantUserIds}, this.onEndGrantRoleUserScopeDelegate, this.onGrantRoleUserScopeCompletedDelegate, userState);
        }
        
        public int RevokeRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeUserIds) {
            return base.Channel.RevokeRoleUserScope(userInfo, roleId, permissionItemCode, revokeUserIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRoleUserScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeUserIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRoleUserScope(userInfo, roleId, permissionItemCode, revokeUserIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRoleUserScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeRoleUserScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRoleUserScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeUserIds = ((string[])(inValues[3]));
            return this.BeginRevokeRoleUserScope(userInfo, roleId, permissionItemCode, revokeUserIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeRoleUserScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeRoleUserScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRoleUserScopeCompleted(object state) {
            if ((this.RevokeRoleUserScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRoleUserScopeCompleted(this, new RevokeRoleUserScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRoleUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeUserIds) {
            this.RevokeRoleUserScopeAsync(userInfo, roleId, permissionItemCode, revokeUserIds, null);
        }
        
        public void RevokeRoleUserScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeUserIds, object userState) {
            if ((this.onBeginRevokeRoleUserScopeDelegate == null)) {
                this.onBeginRevokeRoleUserScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeRoleUserScope);
            }
            if ((this.onEndRevokeRoleUserScopeDelegate == null)) {
                this.onEndRevokeRoleUserScopeDelegate = new EndOperationDelegate(this.OnEndRevokeRoleUserScope);
            }
            if ((this.onRevokeRoleUserScopeCompletedDelegate == null)) {
                this.onRevokeRoleUserScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRoleUserScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRoleUserScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        revokeUserIds}, this.onEndRevokeRoleUserScopeDelegate, this.onRevokeRoleUserScopeCompletedDelegate, userState);
        }
        
        public int GrantRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantRoleIds) {
            return base.Channel.GrantRoleRoleScope(userInfo, roleId, permissionItemCode, grantRoleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantRoleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRoleRoleScope(userInfo, roleId, permissionItemCode, grantRoleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantRoleRoleScope(System.IAsyncResult result) {
            return base.Channel.EndGrantRoleRoleScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantRoleRoleScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantRoleIds = ((string[])(inValues[3]));
            return this.BeginGrantRoleRoleScope(userInfo, roleId, permissionItemCode, grantRoleIds, callback, asyncState);
        }
        
        private object[] OnEndGrantRoleRoleScope(System.IAsyncResult result) {
            int retVal = this.EndGrantRoleRoleScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRoleRoleScopeCompleted(object state) {
            if ((this.GrantRoleRoleScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRoleRoleScopeCompleted(this, new GrantRoleRoleScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRoleRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantRoleIds) {
            this.GrantRoleRoleScopeAsync(userInfo, roleId, permissionItemCode, grantRoleIds, null);
        }
        
        public void GrantRoleRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantRoleIds, object userState) {
            if ((this.onBeginGrantRoleRoleScopeDelegate == null)) {
                this.onBeginGrantRoleRoleScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantRoleRoleScope);
            }
            if ((this.onEndGrantRoleRoleScopeDelegate == null)) {
                this.onEndGrantRoleRoleScopeDelegate = new EndOperationDelegate(this.OnEndGrantRoleRoleScope);
            }
            if ((this.onGrantRoleRoleScopeCompletedDelegate == null)) {
                this.onGrantRoleRoleScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRoleRoleScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRoleRoleScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        grantRoleIds}, this.onEndGrantRoleRoleScopeDelegate, this.onGrantRoleRoleScopeCompletedDelegate, userState);
        }
        
        public int RevokeRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeRoleIds) {
            return base.Channel.RevokeRoleRoleScope(userInfo, roleId, permissionItemCode, revokeRoleIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRoleRoleScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeRoleIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRoleRoleScope(userInfo, roleId, permissionItemCode, revokeRoleIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRoleRoleScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeRoleRoleScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRoleRoleScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeRoleIds = ((string[])(inValues[3]));
            return this.BeginRevokeRoleRoleScope(userInfo, roleId, permissionItemCode, revokeRoleIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeRoleRoleScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeRoleRoleScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRoleRoleScopeCompleted(object state) {
            if ((this.RevokeRoleRoleScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRoleRoleScopeCompleted(this, new RevokeRoleRoleScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRoleRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeRoleIds) {
            this.RevokeRoleRoleScopeAsync(userInfo, roleId, permissionItemCode, revokeRoleIds, null);
        }
        
        public void RevokeRoleRoleScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeRoleIds, object userState) {
            if ((this.onBeginRevokeRoleRoleScopeDelegate == null)) {
                this.onBeginRevokeRoleRoleScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeRoleRoleScope);
            }
            if ((this.onEndRevokeRoleRoleScopeDelegate == null)) {
                this.onEndRevokeRoleRoleScopeDelegate = new EndOperationDelegate(this.OnEndRevokeRoleRoleScope);
            }
            if ((this.onRevokeRoleRoleScopeCompletedDelegate == null)) {
                this.onRevokeRoleRoleScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRoleRoleScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRoleRoleScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        revokeRoleIds}, this.onEndRevokeRoleRoleScopeDelegate, this.onRevokeRoleRoleScopeCompletedDelegate, userState);
        }
        
        public int GrantRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantOrganizeIds) {
            return base.Channel.GrantRoleOrganizeScope(userInfo, roleId, permissionItemCode, grantOrganizeIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantOrganizeIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRoleOrganizeScope(userInfo, roleId, permissionItemCode, grantOrganizeIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantRoleOrganizeScope(System.IAsyncResult result) {
            return base.Channel.EndGrantRoleOrganizeScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantRoleOrganizeScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantOrganizeIds = ((string[])(inValues[3]));
            return this.BeginGrantRoleOrganizeScope(userInfo, roleId, permissionItemCode, grantOrganizeIds, callback, asyncState);
        }
        
        private object[] OnEndGrantRoleOrganizeScope(System.IAsyncResult result) {
            int retVal = this.EndGrantRoleOrganizeScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRoleOrganizeScopeCompleted(object state) {
            if ((this.GrantRoleOrganizeScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRoleOrganizeScopeCompleted(this, new GrantRoleOrganizeScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRoleOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantOrganizeIds) {
            this.GrantRoleOrganizeScopeAsync(userInfo, roleId, permissionItemCode, grantOrganizeIds, null);
        }
        
        public void GrantRoleOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantOrganizeIds, object userState) {
            if ((this.onBeginGrantRoleOrganizeScopeDelegate == null)) {
                this.onBeginGrantRoleOrganizeScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantRoleOrganizeScope);
            }
            if ((this.onEndGrantRoleOrganizeScopeDelegate == null)) {
                this.onEndGrantRoleOrganizeScopeDelegate = new EndOperationDelegate(this.OnEndGrantRoleOrganizeScope);
            }
            if ((this.onGrantRoleOrganizeScopeCompletedDelegate == null)) {
                this.onGrantRoleOrganizeScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRoleOrganizeScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRoleOrganizeScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        grantOrganizeIds}, this.onEndGrantRoleOrganizeScopeDelegate, this.onGrantRoleOrganizeScopeCompletedDelegate, userState);
        }
        
        public int RevokeRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeOrganizeIds) {
            return base.Channel.RevokeRoleOrganizeScope(userInfo, roleId, permissionItemCode, revokeOrganizeIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRoleOrganizeScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeOrganizeIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRoleOrganizeScope(userInfo, roleId, permissionItemCode, revokeOrganizeIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRoleOrganizeScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeRoleOrganizeScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRoleOrganizeScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokeOrganizeIds = ((string[])(inValues[3]));
            return this.BeginRevokeRoleOrganizeScope(userInfo, roleId, permissionItemCode, revokeOrganizeIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeRoleOrganizeScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeRoleOrganizeScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRoleOrganizeScopeCompleted(object state) {
            if ((this.RevokeRoleOrganizeScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRoleOrganizeScopeCompleted(this, new RevokeRoleOrganizeScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRoleOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeOrganizeIds) {
            this.RevokeRoleOrganizeScopeAsync(userInfo, roleId, permissionItemCode, revokeOrganizeIds, null);
        }
        
        public void RevokeRoleOrganizeScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokeOrganizeIds, object userState) {
            if ((this.onBeginRevokeRoleOrganizeScopeDelegate == null)) {
                this.onBeginRevokeRoleOrganizeScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeRoleOrganizeScope);
            }
            if ((this.onEndRevokeRoleOrganizeScopeDelegate == null)) {
                this.onEndRevokeRoleOrganizeScopeDelegate = new EndOperationDelegate(this.OnEndRevokeRoleOrganizeScope);
            }
            if ((this.onRevokeRoleOrganizeScopeCompletedDelegate == null)) {
                this.onRevokeRoleOrganizeScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRoleOrganizeScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRoleOrganizeScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        revokeOrganizeIds}, this.onEndRevokeRoleOrganizeScopeDelegate, this.onRevokeRoleOrganizeScopeCompletedDelegate, userState);
        }
        
        public string[] GetScopePermissionItemIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            return base.Channel.GetScopePermissionItemIdsByRoleId(userInfo, roleId, permissionItemCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScopePermissionItemIdsByRoleId(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScopePermissionItemIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetScopePermissionItemIdsByRoleId(System.IAsyncResult result) {
            return base.Channel.EndGetScopePermissionItemIdsByRoleId(result);
        }
        
        private System.IAsyncResult OnBeginGetScopePermissionItemIdsByRoleId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            return this.BeginGetScopePermissionItemIdsByRoleId(userInfo, roleId, permissionItemCode, callback, asyncState);
        }
        
        private object[] OnEndGetScopePermissionItemIdsByRoleId(System.IAsyncResult result) {
            string[] retVal = this.EndGetScopePermissionItemIdsByRoleId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScopePermissionItemIdsByRoleIdCompleted(object state) {
            if ((this.GetScopePermissionItemIdsByRoleIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScopePermissionItemIdsByRoleIdCompleted(this, new GetScopePermissionItemIdsByRoleIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScopePermissionItemIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode) {
            this.GetScopePermissionItemIdsByRoleIdAsync(userInfo, roleId, permissionItemCode, null);
        }
        
        public void GetScopePermissionItemIdsByRoleIdAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, object userState) {
            if ((this.onBeginGetScopePermissionItemIdsByRoleIdDelegate == null)) {
                this.onBeginGetScopePermissionItemIdsByRoleIdDelegate = new BeginOperationDelegate(this.OnBeginGetScopePermissionItemIdsByRoleId);
            }
            if ((this.onEndGetScopePermissionItemIdsByRoleIdDelegate == null)) {
                this.onEndGetScopePermissionItemIdsByRoleIdDelegate = new EndOperationDelegate(this.OnEndGetScopePermissionItemIdsByRoleId);
            }
            if ((this.onGetScopePermissionItemIdsByRoleIdCompletedDelegate == null)) {
                this.onGetScopePermissionItemIdsByRoleIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScopePermissionItemIdsByRoleIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetScopePermissionItemIdsByRoleIdDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode}, this.onEndGetScopePermissionItemIdsByRoleIdDelegate, this.onGetScopePermissionItemIdsByRoleIdCompletedDelegate, userState);
        }
        
        public int GrantRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantPermissionItemIds) {
            return base.Channel.GrantRolePermissionItemScope(userInfo, roleId, permissionItemCode, grantPermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGrantRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantPermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGrantRolePermissionItemScope(userInfo, roleId, permissionItemCode, grantPermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGrantRolePermissionItemScope(System.IAsyncResult result) {
            return base.Channel.EndGrantRolePermissionItemScope(result);
        }
        
        private System.IAsyncResult OnBeginGrantRolePermissionItemScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] grantPermissionItemIds = ((string[])(inValues[3]));
            return this.BeginGrantRolePermissionItemScope(userInfo, roleId, permissionItemCode, grantPermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndGrantRolePermissionItemScope(System.IAsyncResult result) {
            int retVal = this.EndGrantRolePermissionItemScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGrantRolePermissionItemScopeCompleted(object state) {
            if ((this.GrantRolePermissionItemScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GrantRolePermissionItemScopeCompleted(this, new GrantRolePermissionItemScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GrantRolePermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantPermissionItemIds) {
            this.GrantRolePermissionItemScopeAsync(userInfo, roleId, permissionItemCode, grantPermissionItemIds, null);
        }
        
        public void GrantRolePermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] grantPermissionItemIds, object userState) {
            if ((this.onBeginGrantRolePermissionItemScopeDelegate == null)) {
                this.onBeginGrantRolePermissionItemScopeDelegate = new BeginOperationDelegate(this.OnBeginGrantRolePermissionItemScope);
            }
            if ((this.onEndGrantRolePermissionItemScopeDelegate == null)) {
                this.onEndGrantRolePermissionItemScopeDelegate = new EndOperationDelegate(this.OnEndGrantRolePermissionItemScope);
            }
            if ((this.onGrantRolePermissionItemScopeCompletedDelegate == null)) {
                this.onGrantRolePermissionItemScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGrantRolePermissionItemScopeCompleted);
            }
            base.InvokeAsync(this.onBeginGrantRolePermissionItemScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        grantPermissionItemIds}, this.onEndGrantRolePermissionItemScopeDelegate, this.onGrantRolePermissionItemScopeCompletedDelegate, userState);
        }
        
        public int RevokeRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokePermissionItemIds) {
            return base.Channel.RevokeRolePermissionItemScope(userInfo, roleId, permissionItemCode, revokePermissionItemIds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevokeRolePermissionItemScope(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokePermissionItemIds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevokeRolePermissionItemScope(userInfo, roleId, permissionItemCode, revokePermissionItemIds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndRevokeRolePermissionItemScope(System.IAsyncResult result) {
            return base.Channel.EndRevokeRolePermissionItemScope(result);
        }
        
        private System.IAsyncResult OnBeginRevokeRolePermissionItemScope(object[] inValues, System.AsyncCallback callback, object asyncState) {
            RDIFramework.Utilities.UserInfo userInfo = ((RDIFramework.Utilities.UserInfo)(inValues[0]));
            string roleId = ((string)(inValues[1]));
            string permissionItemCode = ((string)(inValues[2]));
            string[] revokePermissionItemIds = ((string[])(inValues[3]));
            return this.BeginRevokeRolePermissionItemScope(userInfo, roleId, permissionItemCode, revokePermissionItemIds, callback, asyncState);
        }
        
        private object[] OnEndRevokeRolePermissionItemScope(System.IAsyncResult result) {
            int retVal = this.EndRevokeRolePermissionItemScope(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRevokeRolePermissionItemScopeCompleted(object state) {
            if ((this.RevokeRolePermissionItemScopeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevokeRolePermissionItemScopeCompleted(this, new RevokeRolePermissionItemScopeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevokeRolePermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokePermissionItemIds) {
            this.RevokeRolePermissionItemScopeAsync(userInfo, roleId, permissionItemCode, revokePermissionItemIds, null);
        }
        
        public void RevokeRolePermissionItemScopeAsync(RDIFramework.Utilities.UserInfo userInfo, string roleId, string permissionItemCode, string[] revokePermissionItemIds, object userState) {
            if ((this.onBeginRevokeRolePermissionItemScopeDelegate == null)) {
                this.onBeginRevokeRolePermissionItemScopeDelegate = new BeginOperationDelegate(this.OnBeginRevokeRolePermissionItemScope);
            }
            if ((this.onEndRevokeRolePermissionItemScopeDelegate == null)) {
                this.onEndRevokeRolePermissionItemScopeDelegate = new EndOperationDelegate(this.OnEndRevokeRolePermissionItemScope);
            }
            if ((this.onRevokeRolePermissionItemScopeCompletedDelegate == null)) {
                this.onRevokeRolePermissionItemScopeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevokeRolePermissionItemScopeCompleted);
            }
            base.InvokeAsync(this.onBeginRevokeRolePermissionItemScopeDelegate, new object[] {
                        userInfo,
                        roleId,
                        permissionItemCode,
                        revokePermissionItemIds}, this.onEndRevokeRolePermissionItemScopeDelegate, this.onRevokeRolePermissionItemScopeCompletedDelegate, userState);
        }
    }
}
